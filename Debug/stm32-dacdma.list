
stm32-dacdma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005afc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005cd8  08005cd8  00015cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef0  08005ef0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef8  08005ef8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000000c  08005f0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005f0c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ff0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5a  00000000  00000000  0003602c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00038d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00039fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002738a  00000000  00000000  0003b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001661b  00000000  00000000  0006241a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe30a  00000000  00000000  00078a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176d3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f98  00000000  00000000  00176d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005cbc 	.word	0x08005cbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005cbc 	.word	0x08005cbc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b974 	b.w	8000e54 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	468e      	mov	lr, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d14d      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b92:	428a      	cmp	r2, r1
 8000b94:	4694      	mov	ip, r2
 8000b96:	d969      	bls.n	8000c6c <__udivmoddi4+0xe8>
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	b152      	cbz	r2, 8000bb4 <__udivmoddi4+0x30>
 8000b9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba2:	f1c2 0120 	rsb	r1, r2, #32
 8000ba6:	fa20 f101 	lsr.w	r1, r0, r1
 8000baa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bae:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb2:	4094      	lsls	r4, r2
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	0c21      	lsrs	r1, r4, #16
 8000bba:	fbbe f6f8 	udiv	r6, lr, r8
 8000bbe:	fa1f f78c 	uxth.w	r7, ip
 8000bc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bca:	fb06 f107 	mul.w	r1, r6, r7
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bda:	f080 811f 	bcs.w	8000e1c <__udivmoddi4+0x298>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 811c 	bls.w	8000e1c <__udivmoddi4+0x298>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 f707 	mul.w	r7, r0, r7
 8000bfc:	42a7      	cmp	r7, r4
 8000bfe:	d90a      	bls.n	8000c16 <__udivmoddi4+0x92>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c08:	f080 810a 	bcs.w	8000e20 <__udivmoddi4+0x29c>
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	f240 8107 	bls.w	8000e20 <__udivmoddi4+0x29c>
 8000c12:	4464      	add	r4, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	1be4      	subs	r4, r4, r7
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa4>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xc2>
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	f000 80ef 	beq.w	8000e16 <__udivmoddi4+0x292>
 8000c38:	2600      	movs	r6, #0
 8000c3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3e:	4630      	mov	r0, r6
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f683 	clz	r6, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d14a      	bne.n	8000ce4 <__udivmoddi4+0x160>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd4>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80f9 	bhi.w	8000e4a <__udivmoddi4+0x2c6>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	469e      	mov	lr, r3
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa4>
 8000c66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa4>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xec>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 8092 	bne.w	8000d9e <__udivmoddi4+0x21a>
 8000c7a:	eba1 010c 	sub.w	r1, r1, ip
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2601      	movs	r6, #1
 8000c88:	0c20      	lsrs	r0, r4, #16
 8000c8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c96:	fb0e f003 	mul.w	r0, lr, r3
 8000c9a:	4288      	cmp	r0, r1
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x12c>
 8000c9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x12a>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2c0>
 8000cae:	4643      	mov	r3, r8
 8000cb0:	1a09      	subs	r1, r1, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x156>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x154>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2ca>
 8000cd8:	4608      	mov	r0, r1
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce2:	e79c      	b.n	8000c1e <__udivmoddi4+0x9a>
 8000ce4:	f1c6 0720 	rsb	r7, r6, #32
 8000ce8:	40b3      	lsls	r3, r6
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	40f9      	lsrs	r1, r7
 8000cfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d02:	fa00 f306 	lsl.w	r3, r0, r6
 8000d06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0a:	0c20      	lsrs	r0, r4, #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fb09 1118 	mls	r1, r9, r8, r1
 8000d14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d18:	fb08 f00e 	mul.w	r0, r8, lr
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b8>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2bc>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2bc>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4461      	add	r1, ip
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d44:	fb09 1110 	mls	r1, r9, r0, r1
 8000d48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d50:	458e      	cmp	lr, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1e2>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2b4>
 8000d5e:	458e      	cmp	lr, r1
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2b4>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6e:	eba1 010e 	sub.w	r1, r1, lr
 8000d72:	42a1      	cmp	r1, r4
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46a6      	mov	lr, r4
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x2a4>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x2a0>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x212>
 8000d7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d82:	eb61 010e 	sbc.w	r1, r1, lr
 8000d86:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8e:	40f1      	lsrs	r1, r6
 8000d90:	431f      	orrs	r7, r3
 8000d92:	e9c5 7100 	strd	r7, r1, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	40d8      	lsrs	r0, r3
 8000da4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dac:	4091      	lsls	r1, r2
 8000dae:	4301      	orrs	r1, r0
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc0:	0c0b      	lsrs	r3, r1, #16
 8000dc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dca:	429e      	cmp	r6, r3
 8000dcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x260>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b8>
 8000ddc:	429e      	cmp	r6, r3
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b8>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	1b9b      	subs	r3, r3, r6
 8000de6:	b289      	uxth	r1, r1
 8000de8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dec:	fb07 3316 	mls	r3, r7, r6, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb06 f30e 	mul.w	r3, r6, lr
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x28a>
 8000dfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000e00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2b0>
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2b0>
 8000e0a:	3e02      	subs	r6, #2
 8000e0c:	4461      	add	r1, ip
 8000e0e:	1ac9      	subs	r1, r1, r3
 8000e10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0x104>
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e705      	b.n	8000c28 <__udivmoddi4+0xa4>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e3      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6f8      	b.n	8000c16 <__udivmoddi4+0x92>
 8000e24:	454b      	cmp	r3, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f8>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f8>
 8000e34:	4646      	mov	r6, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x28a>
 8000e38:	4620      	mov	r0, r4
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1e2>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x260>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b8>
 8000e44:	3b02      	subs	r3, #2
 8000e46:	4461      	add	r1, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x12c>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e709      	b.n	8000c62 <__udivmoddi4+0xde>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x156>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2230      	movs	r2, #48	; 0x30
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fed7 	bl	8004c18 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_DAC1_Init+0x6c>)
 8000e6c:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <MX_DAC1_Init+0x70>)
 8000e6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <MX_DAC1_Init+0x6c>)
 8000e72:	f000 fd4a 	bl	800190a <HAL_DAC_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e7c:	f000 f9f1 	bl	8001262 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e80:	2302      	movs	r3, #2
 8000e82:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000e90:	2316      	movs	r3, #22
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_DAC1_Init+0x6c>)
 8000eac:	f000 fe3c 	bl	8001b28 <HAL_DAC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000eb6:	f000 f9d4 	bl	8001262 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	; 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000028 	.word	0x20000028
 8000ec8:	50000800 	.word	0x50000800

08000ecc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <HAL_DAC_MspInit+0xcc>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d150      	bne.n	8000f90 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_DAC_MspInit+0xd0>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_DAC_MspInit+0xd0>)
 8000ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_DAC_MspInit+0xd0>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_DAC_MspInit+0xd0>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <HAL_DAC_MspInit+0xd0>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_DAC_MspInit+0xd0>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f22:	2303      	movs	r3, #3
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f001 fa9c 	bl	8002470 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f3a:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <HAL_DAC_MspInit+0xd8>)
 8000f3c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f40:	2206      	movs	r2, #6
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f46:	2210      	movs	r2, #16
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f64:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f68:	2220      	movs	r2, #32
 8000f6a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f76:	f001 f809 	bl	8001f8c <HAL_DMA_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000f80:	f000 f96f 	bl	8001262 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_DAC_MspInit+0xd4>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	50000800 	.word	0x50000800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	2000003c 	.word	0x2000003c
 8000fa4:	40020008 	.word	0x40020008

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_DMA_Init+0x50>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <MX_DMA_Init+0x50>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_DMA_Init+0x50>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_DMA_Init+0x50>)
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <MX_DMA_Init+0x50>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6493      	str	r3, [r2, #72]	; 0x48
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_DMA_Init+0x50>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	200b      	movs	r0, #11
 8000fe4:	f000 fc5d 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f000 fc74 	bl	80018d6 <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a2e      	ldr	r2, [pc, #184]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <MX_GPIO_Init+0xd4>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_GPIO_Init+0xd4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_GPIO_Init+0xd4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2120      	movs	r1, #32
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f001 fb7b 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800107e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001084:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <MX_GPIO_Init+0xd8>)
 8001096:	f001 f9eb 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109a:	2320      	movs	r3, #32
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f001 f9dc 	bl	8002470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	f000 fbf0 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c2:	2028      	movs	r0, #40	; 0x28
 80010c4:	f000 fc07 	bl	80018d6 <HAL_NVIC_EnableIRQ>

}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 fa72 	bl	80015c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f873 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f7ff ff89 	bl	8000ffc <MX_GPIO_Init>
  MX_DMA_Init();
 80010ea:	f7ff ff5d 	bl	8000fa8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010ee:	f000 f99f 	bl	8001430 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 80010f2:	f000 f92d 	bl	8001350 <MX_TIM4_Init>
  MX_DAC1_Init();
 80010f6:	f7ff feaf 	bl	8000e58 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start(&htim4);
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <main+0xe0>)
 80010fc:	f002 fc04 	bl	8003908 <HAL_TIM_Base_Start>

  // Generate node one signal sample
  for(uint16_t i = 0; i < NODE_ONE_SAMPLE_SIZE; i++){
 8001100:	2300      	movs	r3, #0
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	e043      	b.n	800118e <main+0xb6>
	  node_one_signal[i] = (sin(i * 2 * M_PI / (float) NODE_ONE_SAMPLE_SIZE) + 1)*(0xFFF * 0.15)+(0xFFF * 0.15);
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9d6 	bl	80004bc <__aeabi_i2d>
 8001110:	a325      	add	r3, pc, #148	; (adr r3, 80011a8 <main+0xd0>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff fa3b 	bl	8000590 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <main+0xe4>)
 8001128:	f7ff fb5c 	bl	80007e4 <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	ec43 2b17 	vmov	d7, r2, r3
 8001134:	eeb0 0a47 	vmov.f32	s0, s14
 8001138:	eef0 0a67 	vmov.f32	s1, s15
 800113c:	f003 fd74 	bl	8004c28 <sin>
 8001140:	ec51 0b10 	vmov	r0, r1, d0
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <main+0xe8>)
 800114a:	f7ff f86b 	bl	8000224 <__adddf3>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	a316      	add	r3, pc, #88	; (adr r3, 80011b0 <main+0xd8>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fa18 	bl	8000590 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	a311      	add	r3, pc, #68	; (adr r3, 80011b0 <main+0xd8>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff f859 	bl	8000224 <__adddf3>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	88fc      	ldrh	r4, [r7, #6]
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fcca 	bl	8000b14 <__aeabi_d2uiz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <main+0xec>)
 8001184:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for(uint16_t i = 0; i < NODE_ONE_SAMPLE_SIZE; i++){
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	3301      	adds	r3, #1
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	2b63      	cmp	r3, #99	; 0x63
 8001192:	d9b8      	bls.n	8001106 <main+0x2e>
  }

  // Start DAC with DMA
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, node_one_signal, NODE_ONE_SAMPLE_SIZE, DAC_ALIGN_12B_R);
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <main+0xec>)
 800119c:	2100      	movs	r1, #0
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <main+0xf0>)
 80011a0:	f000 fbd6 	bl	8001950 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <main+0xcc>
 80011a6:	bf00      	nop
 80011a8:	54442d18 	.word	0x54442d18
 80011ac:	400921fb 	.word	0x400921fb
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40833200 	.word	0x40833200
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	40590000 	.word	0x40590000
 80011c0:	3ff00000 	.word	0x3ff00000
 80011c4:	2000009c 	.word	0x2000009c
 80011c8:	20000028 	.word	0x20000028

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	2238      	movs	r2, #56	; 0x38
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fd1c 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f001 fafc 	bl	80027ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fe:	2340      	movs	r3, #64	; 0x40
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001206:	2302      	movs	r3, #2
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800120a:	2304      	movs	r3, #4
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800120e:	2355      	movs	r3, #85	; 0x55
 8001210:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fb96 	bl	8002954 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800122e:	f000 f818 	bl	8001262 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2303      	movs	r3, #3
 8001238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2104      	movs	r1, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fe9a 	bl	8002f84 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001256:	f000 f804 	bl	8001262 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3750      	adds	r7, #80	; 0x50
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001266:	b672      	cpsid	i
}
 8001268:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126a:	e7fe      	b.n	800126a <Error_Handler+0x8>

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x44>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_MspInit+0x44>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6613      	str	r3, [r2, #96]	; 0x60
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_MspInit+0x44>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x44>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x44>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6593      	str	r3, [r2, #88]	; 0x58
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x44>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012a2:	f001 fb47 	bl	8002934 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f9b4 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA1_Channel1_IRQHandler+0x10>)
 800130e:	f000 ff60 	bl	80021d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000003c 	.word	0x2000003c

0800131c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001324:	f001 fa3e 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001370:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <MX_TIM4_Init+0x9c>)
 8001372:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2125-1;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001376:	f640 024c 	movw	r2, #2124	; 0x84c
 800137a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM4_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001384:	f240 128f 	movw	r2, #399	; 0x18f
 8001388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_TIM4_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001398:	f002 fa5e 	bl	8003858 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80013a2:	f7ff ff5e 	bl	8001262 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM4_Init+0x98>)
 80013b4:	f002 fb18 	bl	80039e8 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80013be:	f7ff ff50 	bl	8001262 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013c2:	2320      	movs	r3, #32
 80013c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM4_Init+0x98>)
 80013d0:	f002 fd64 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80013da:	f7ff ff42 	bl	8001262 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000022c 	.word	0x2000022c
 80013ec:	40000800 	.word	0x40000800

080013f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_TIM_Base_MspInit+0x38>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10b      	bne.n	800141a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_TIM_Base_MspInit+0x3c>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_TIM_Base_MspInit+0x3c>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_TIM_Base_MspInit+0x3c>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40000800 	.word	0x40000800
 800142c:	40021000 	.word	0x40021000

08001430 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001436:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <MX_LPUART1_UART_Init+0x90>)
 8001438:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 800146e:	2200      	movs	r2, #0
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001474:	f002 fda8 	bl	8003fc8 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800147e:	f7ff fef0 	bl	8001262 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001486:	f003 fad9 	bl	8004a3c <HAL_UARTEx_SetTxFifoThreshold>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001490:	f7ff fee7 	bl	8001262 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4809      	ldr	r0, [pc, #36]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 8001498:	f003 fb0e 	bl	8004ab8 <HAL_UARTEx_SetRxFifoThreshold>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80014a2:	f7ff fede 	bl	8001262 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_LPUART1_UART_Init+0x8c>)
 80014a8:	f003 fa8f 	bl	80049ca <HAL_UARTEx_DisableFifoMode>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80014b2:	f7ff fed6 	bl	8001262 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000278 	.word	0x20000278
 80014c0:	40008000 	.word	0x40008000

080014c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09e      	sub	sp, #120	; 0x78
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	2254      	movs	r2, #84	; 0x54
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fb97 	bl	8004c18 <memset>
  if(uartHandle->Instance==LPUART1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_UART_MspInit+0xa8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d136      	bne.n	8001562 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014f4:	2320      	movs	r3, #32
 80014f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4618      	mov	r0, r3
 8001502:	f001 ff5b 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800150c:	f7ff fea9 	bl	8001262 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_UART_MspInit+0xac>)
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_UART_MspInit+0xac>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_UART_MspInit+0xac>)
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_UART_MspInit+0xac>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_UART_MspInit+0xac>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_UART_MspInit+0xac>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001540:	230c      	movs	r3, #12
 8001542:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001550:	230c      	movs	r3, #12
 8001552:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f000 ff87 	bl	8002470 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001562:	bf00      	nop
 8001564:	3778      	adds	r7, #120	; 0x78
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40008000 	.word	0x40008000
 8001570:	40021000 	.word	0x40021000

08001574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001576:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0b      	ldr	r4, [pc, #44]	; (80015c0 <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159e:	f7ff fec5 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a2:	f003 fb15 	bl	8004bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a6:	f7ff fd97 	bl	80010d8 <main>

080015aa <LoopForever>:

LoopForever:
    b LoopForever
 80015aa:	e7fe      	b.n	80015aa <LoopForever>
  ldr   r0, =_estack
 80015ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015b8:	08005f00 	.word	0x08005f00
  ldr r2, =_sbss
 80015bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015c0:	2000030c 	.word	0x2000030c

080015c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC1_2_IRQHandler>

080015c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f95b 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f80e 	bl	80015f8 <HAL_InitTick>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	e001      	b.n	80015ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015e8:	f7ff fe40 	bl	800126c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ec:	79fb      	ldrb	r3, [r7, #7]

}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_InitTick+0x68>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d022      	beq.n	8001652 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_InitTick+0x6c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_InitTick+0x68>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001618:	fbb1 f3f3 	udiv	r3, r1, r3
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f966 	bl	80018f2 <HAL_SYSTICK_Config>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10f      	bne.n	800164c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	d809      	bhi.n	8001646 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001632:	2200      	movs	r2, #0
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	f04f 30ff 	mov.w	r0, #4294967295
 800163a:	f000 f932 	bl	80018a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_InitTick+0x70>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e007      	b.n	8001656 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	e004      	b.n	8001656 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e001      	b.n	8001656 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000008 	.word	0x20000008
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x1c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x20>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4413      	add	r3, r2
 800167a:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_IncTick+0x1c>)
 800167c:	6013      	str	r3, [r2, #0]
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20000308 	.word	0x20000308
 800168c:	20000008 	.word	0x20000008

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000308 	.word	0x20000308

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d004      	beq.n	80016cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_Delay+0x40>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016cc:	bf00      	nop
 80016ce:	f7ff ffdf 	bl	8001690 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d8f7      	bhi.n	80016ce <HAL_Delay+0x26>
  {
  }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000008 	.word	0x20000008

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff40 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff33 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa4 	bl	8001848 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e014      	b.n	8001946 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	791b      	ldrb	r3, [r3, #4]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff facd 	bl	8000ecc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	795b      	ldrb	r3, [r3, #5]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_DAC_Start_DMA+0x1e>
 800196a:	2302      	movs	r3, #2
 800196c:	e0ae      	b.n	8001acc <HAL_DAC_Start_DMA+0x17c>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2202      	movs	r2, #2
 8001978:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d12f      	bne.n	80019e0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a53      	ldr	r2, [pc, #332]	; (8001ad4 <HAL_DAC_Start_DMA+0x184>)
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_DAC_Start_DMA+0x188>)
 800198e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a51      	ldr	r2, [pc, #324]	; (8001adc <HAL_DAC_Start_DMA+0x18c>)
 8001996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019a6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d013      	beq.n	80019d6 <HAL_DAC_Start_DMA+0x86>
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d845      	bhi.n	8001a40 <HAL_DAC_Start_DMA+0xf0>
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_DAC_Start_DMA+0x72>
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d005      	beq.n	80019cc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80019c0:	e03e      	b.n	8001a40 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3308      	adds	r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
        break;
 80019ca:	e03c      	b.n	8001a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	330c      	adds	r3, #12
 80019d2:	613b      	str	r3, [r7, #16]
        break;
 80019d4:	e037      	b.n	8001a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3310      	adds	r3, #16
 80019dc:	613b      	str	r3, [r7, #16]
        break;
 80019de:	e032      	b.n	8001a46 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a3e      	ldr	r2, [pc, #248]	; (8001ae0 <HAL_DAC_Start_DMA+0x190>)
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a3d      	ldr	r2, [pc, #244]	; (8001ae4 <HAL_DAC_Start_DMA+0x194>)
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4a3c      	ldr	r2, [pc, #240]	; (8001ae8 <HAL_DAC_Start_DMA+0x198>)
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a06:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d013      	beq.n	8001a36 <HAL_DAC_Start_DMA+0xe6>
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d817      	bhi.n	8001a44 <HAL_DAC_Start_DMA+0xf4>
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_DAC_Start_DMA+0xd2>
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d005      	beq.n	8001a2c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001a20:	e010      	b.n	8001a44 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3314      	adds	r3, #20
 8001a28:	613b      	str	r3, [r7, #16]
        break;
 8001a2a:	e00c      	b.n	8001a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3318      	adds	r3, #24
 8001a32:	613b      	str	r3, [r7, #16]
        break;
 8001a34:	e007      	b.n	8001a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	331c      	adds	r3, #28
 8001a3c:	613b      	str	r3, [r7, #16]
        break;
 8001a3e:	e002      	b.n	8001a46 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001a40:	bf00      	nop
 8001a42:	e000      	b.n	8001a46 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001a44:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6898      	ldr	r0, [r3, #8]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	f000 fb39 	bl	80020dc <HAL_DMA_Start_IT>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]
 8001a6e:	e010      	b.n	8001a92 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68d8      	ldr	r0, [r3, #12]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	f000 fb27 	bl	80020dc <HAL_DMA_Start_IT>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10f      	bne.n	8001abe <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2201      	movs	r2, #1
 8001aac:	409a      	lsls	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff fdf6 	bl	80016a8 <HAL_Delay>
 8001abc:	e005      	b.n	8001aca <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	08001e79 	.word	0x08001e79
 8001ad8:	08001e9b 	.word	0x08001e9b
 8001adc:	08001eb7 	.word	0x08001eb7
 8001ae0:	08001f21 	.word	0x08001f21
 8001ae4:	08001f43 	.word	0x08001f43
 8001ae8:	08001f5f 	.word	0x08001f5f

08001aec <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	795b      	ldrb	r3, [r3, #5]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_DAC_ConfigChannel+0x18>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e192      	b.n	8001e66 <HAL_DAC_ConfigChannel+0x33e>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d174      	bne.n	8001c3e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b54:	f7ff fd9c 	bl	8001690 <HAL_GetTick>
 8001b58:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d134      	bne.n	8001bca <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b60:	e011      	b.n	8001b86 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b62:	f7ff fd95 	bl	8001690 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d90a      	bls.n	8001b86 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f043 0208 	orr.w	r2, r3, #8
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e16f      	b.n	8001e66 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e6      	bne.n	8001b62 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f7ff fd87 	bl	80016a8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba4:	e01e      	b.n	8001be4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ba6:	f7ff fd73 	bl	8001690 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d90a      	bls.n	8001bca <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f043 0208 	orr.w	r2, r3, #8
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e14d      	b.n	8001e66 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	dbe8      	blt.n	8001ba6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff fd67 	bl	80016a8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	ea02 0103 	and.w	r1, r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	21ff      	movs	r1, #255	; 0xff
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	ea02 0103 	and.w	r1, r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	409a      	lsls	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d11d      	bne.n	8001c82 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	221f      	movs	r2, #31
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	4013      	ands	r3, r2
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c76:	4313      	orrs	r3, r2
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2207      	movs	r2, #7
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	e00f      	b.n	8001ccc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d102      	bne.n	8001cba <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	e008      	b.n	8001ccc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	e001      	b.n	8001ccc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	6a3a      	ldr	r2, [r7, #32]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	4013      	ands	r3, r2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	791b      	ldrb	r3, [r3, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_DAC_ConfigChannel+0x1d8>
 8001cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfe:	e000      	b.n	8001d02 <HAL_DAC_ConfigChannel+0x1da>
 8001d00:	2300      	movs	r3, #0
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	795b      	ldrb	r3, [r3, #5]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <HAL_DAC_ConfigChannel+0x204>
 8001d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2a:	e000      	b.n	8001d2e <HAL_DAC_ConfigChannel+0x206>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d114      	bne.n	8001d6e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001d44:	f001 fabc 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 8001d48:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	4a48      	ldr	r2, [pc, #288]	; (8001e70 <HAL_DAC_ConfigChannel+0x348>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d904      	bls.n	8001d5c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	e00f      	b.n	8001d7c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_DAC_ConfigChannel+0x34c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d90a      	bls.n	8001d7a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	e006      	b.n	8001d7c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d74:	4313      	orrs	r3, r2
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	e000      	b.n	8001d7c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001d7a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	400a      	ands	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	4013      	ands	r3, r2
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	4313      	orrs	r3, r2
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	22c0      	movs	r2, #192	; 0xc0
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	ea02 0103 	and.w	r1, r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	09896800 	.word	0x09896800
 8001e74:	04c4b400 	.word	0x04c4b400

08001e78 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fe30 	bl	8001aec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	711a      	strb	r2, [r3, #4]
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff fe29 	bl	8001b00 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff fe1f 	bl	8001b14 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	711a      	strb	r2, [r3, #4]
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff ffd8 	bl	8001ee4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	711a      	strb	r2, [r3, #4]
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff ffd1 	bl	8001ef8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff ffc7 	bl	8001f0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	711a      	strb	r2, [r3, #4]
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e08d      	b.n	80020ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_DMA_Init+0x138>)
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d80f      	bhi.n	8001fca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <HAL_DMA_Init+0x13c>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a45      	ldr	r2, [pc, #276]	; (80020cc <HAL_DMA_Init+0x140>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	009a      	lsls	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a42      	ldr	r2, [pc, #264]	; (80020d0 <HAL_DMA_Init+0x144>)
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fc8:	e00e      	b.n	8001fe8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_DMA_Init+0x148>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a3d      	ldr	r2, [pc, #244]	; (80020cc <HAL_DMA_Init+0x140>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	009a      	lsls	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <HAL_DMA_Init+0x14c>)
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f9b6 	bl	80023ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002048:	d102      	bne.n	8002050 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002064:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_DMA_Init+0x104>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b04      	cmp	r3, #4
 8002074:	d80c      	bhi.n	8002090 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f9d6 	bl	8002428 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e008      	b.n	80020a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40020407 	.word	0x40020407
 80020c8:	bffdfff8 	.word	0xbffdfff8
 80020cc:	cccccccd 	.word	0xcccccccd
 80020d0:	40020000 	.word	0x40020000
 80020d4:	bffdfbf8 	.word	0xbffdfbf8
 80020d8:	40020400 	.word	0x40020400

080020dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Start_IT+0x20>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e066      	b.n	80021ca <HAL_DMA_Start_IT+0xee>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d155      	bne.n	80021bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f8fb 	bl	8002330 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 020e 	orr.w	r2, r2, #14
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e00f      	b.n	8002174 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 020a 	orr.w	r2, r2, #10
 8002172:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002190:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e005      	b.n	80021c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
 80021c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2204      	movs	r2, #4
 80021f4:	409a      	lsls	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d026      	beq.n	800224c <HAL_DMA_IRQHandler+0x7a>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d021      	beq.n	800224c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0204 	bic.w	r2, r2, #4
 8002224:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f003 021f 	and.w	r2, r3, #31
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2104      	movs	r1, #4
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	2b00      	cmp	r3, #0
 8002240:	d071      	beq.n	8002326 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800224a:	e06c      	b.n	8002326 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2202      	movs	r2, #2
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d02e      	beq.n	80022be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d029      	beq.n	80022be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10b      	bne.n	8002290 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 020a 	bic.w	r2, r2, #10
 8002286:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2102      	movs	r1, #2
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d038      	beq.n	8002326 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80022bc:	e033      	b.n	8002326 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2208      	movs	r2, #8
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d02a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d025      	beq.n	8002328 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 020e 	bic.w	r2, r2, #14
 80022ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002326:	bf00      	nop
 8002328:	bf00      	nop
}
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002346:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002358:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f003 021f 	and.w	r2, r3, #31
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2101      	movs	r1, #1
 8002368:	fa01 f202 	lsl.w	r2, r1, r2
 800236c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d108      	bne.n	8002390 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800238e:	e007      	b.n	80023a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80023bc:	429a      	cmp	r2, r3
 80023be:	d802      	bhi.n	80023c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e001      	b.n	80023ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80023c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	3b08      	subs	r3, #8
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	009a      	lsls	r2, r3, #2
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80023f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2201      	movs	r2, #1
 8002400:	409a      	lsls	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40020407 	.word	0x40020407
 8002418:	40020800 	.word	0x40020800
 800241c:	40020820 	.word	0x40020820
 8002420:	cccccccd 	.word	0xcccccccd
 8002424:	40020880 	.word	0x40020880

08002428 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	461a      	mov	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a08      	ldr	r2, [pc, #32]	; (800246c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800244a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3b01      	subs	r3, #1
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2201      	movs	r2, #1
 8002456:	409a      	lsls	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	1000823f 	.word	0x1000823f
 800246c:	40020940 	.word	0x40020940

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800247e:	e15a      	b.n	8002736 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 814c 	beq.w	8002730 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d005      	beq.n	80024b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d130      	bne.n	8002512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e6:	2201      	movs	r2, #1
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0201 	and.w	r2, r3, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b03      	cmp	r3, #3
 800251c:	d017      	beq.n	800254e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d123      	bne.n	80025a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	6939      	ldr	r1, [r7, #16]
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80a6 	beq.w	8002730 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e4:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <HAL_GPIO_Init+0x2e4>)
 80025e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e8:	4a5a      	ldr	r2, [pc, #360]	; (8002754 <HAL_GPIO_Init+0x2e4>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6613      	str	r3, [r2, #96]	; 0x60
 80025f0:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_GPIO_Init+0x2e4>)
 80025f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fc:	4a56      	ldr	r2, [pc, #344]	; (8002758 <HAL_GPIO_Init+0x2e8>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002626:	d01f      	beq.n	8002668 <HAL_GPIO_Init+0x1f8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_GPIO_Init+0x2ec>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d019      	beq.n	8002664 <HAL_GPIO_Init+0x1f4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4b      	ldr	r2, [pc, #300]	; (8002760 <HAL_GPIO_Init+0x2f0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_GPIO_Init+0x1f0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a4a      	ldr	r2, [pc, #296]	; (8002764 <HAL_GPIO_Init+0x2f4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00d      	beq.n	800265c <HAL_GPIO_Init+0x1ec>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_GPIO_Init+0x2f8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_Init+0x1e8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a48      	ldr	r2, [pc, #288]	; (800276c <HAL_GPIO_Init+0x2fc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_GPIO_Init+0x1e4>
 8002650:	2305      	movs	r3, #5
 8002652:	e00a      	b.n	800266a <HAL_GPIO_Init+0x1fa>
 8002654:	2306      	movs	r3, #6
 8002656:	e008      	b.n	800266a <HAL_GPIO_Init+0x1fa>
 8002658:	2304      	movs	r3, #4
 800265a:	e006      	b.n	800266a <HAL_GPIO_Init+0x1fa>
 800265c:	2303      	movs	r3, #3
 800265e:	e004      	b.n	800266a <HAL_GPIO_Init+0x1fa>
 8002660:	2302      	movs	r3, #2
 8002662:	e002      	b.n	800266a <HAL_GPIO_Init+0x1fa>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_GPIO_Init+0x1fa>
 8002668:	2300      	movs	r3, #0
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	f002 0203 	and.w	r2, r2, #3
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	4093      	lsls	r3, r2
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267a:	4937      	ldr	r1, [pc, #220]	; (8002758 <HAL_GPIO_Init+0x2e8>)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	3302      	adds	r3, #2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_GPIO_Init+0x300>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ac:	4a30      	ldr	r2, [pc, #192]	; (8002770 <HAL_GPIO_Init+0x300>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_GPIO_Init+0x300>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_GPIO_Init+0x300>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_GPIO_Init+0x300>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_GPIO_Init+0x300>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_GPIO_Init+0x300>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <HAL_GPIO_Init+0x300>)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	f47f ae9d 	bne.w	8002480 <HAL_GPIO_Init+0x10>
  }
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40021000 	.word	0x40021000
 8002758:	40010000 	.word	0x40010000
 800275c:	48000400 	.word	0x48000400
 8002760:	48000800 	.word	0x48000800
 8002764:	48000c00 	.word	0x48000c00
 8002768:	48001000 	.word	0x48001000
 800276c:	48001400 	.word	0x48001400
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002790:	e002      	b.n	8002798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f806 	bl	80027d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40010400 	.word	0x40010400

080027d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d141      	bne.n	800287e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d131      	bne.n	800286c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002808:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280e:	4a46      	ldr	r2, [pc, #280]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002818:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002820:	4a41      	ldr	r2, [pc, #260]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002828:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2232      	movs	r2, #50	; 0x32
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	4a3f      	ldr	r2, [pc, #252]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	3301      	adds	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283e:	e002      	b.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3b01      	subs	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d102      	bne.n	800285a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f2      	bne.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002866:	d158      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e057      	b.n	800291c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002872:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800287c:	e04d      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002884:	d141      	bne.n	800290a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d131      	bne.n	80028f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800289a:	4a23      	ldr	r2, [pc, #140]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ac:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2232      	movs	r2, #50	; 0x32
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	0c9b      	lsrs	r3, r3, #18
 80028c6:	3301      	adds	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ca:	e002      	b.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028de:	d102      	bne.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f2      	bne.n	80028cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d112      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e011      	b.n	800291c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002908:	e007      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002918:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40007000 	.word	0x40007000
 800292c:	20000000 	.word	0x20000000
 8002930:	431bde83 	.word	0x431bde83

08002934 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800293e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002942:	6093      	str	r3, [r2, #8]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e306      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d075      	beq.n	8002a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002972:	4b97      	ldr	r3, [pc, #604]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	d102      	bne.n	8002992 <HAL_RCC_OscConfig+0x3e>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d002      	beq.n	8002998 <HAL_RCC_OscConfig+0x44>
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d10b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05b      	beq.n	8002a5c <HAL_RCC_OscConfig+0x108>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d157      	bne.n	8002a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e2e1      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x74>
 80029ba:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a84      	ldr	r2, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xb0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x98>
 80029d2:	4b7f      	ldr	r3, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7e      	ldr	r2, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b7c      	ldr	r3, [pc, #496]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7b      	ldr	r2, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xb0>
 80029ec:	4b78      	ldr	r3, [pc, #480]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a77      	ldr	r2, [pc, #476]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b75      	ldr	r3, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a74      	ldr	r2, [pc, #464]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fe40 	bl	8001690 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe fe3c 	bl	8001690 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e2a6      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xc0>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fe2c 	bl	8001690 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fe28 	bl	8001690 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e292      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0xe8>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_OscConfig+0x136>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_OscConfig+0x13c>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d11f      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x154>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e265      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	4946      	ldr	r1, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002abc:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <HAL_RCC_OscConfig+0x280>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fd99 	bl	80015f8 <HAL_InitTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d043      	beq.n	8002b54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e251      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fdd4 	bl	8001690 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fe fdd0 	bl	8001690 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e23a      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	061b      	lsls	r3, r3, #24
 8002b18:	492d      	ldr	r1, [pc, #180]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
 8002b1e:	e01a      	b.n	8002b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fdb0 	bl	8001690 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fdac 	bl	8001690 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e216      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1e0>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d041      	beq.n	8002be6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fd89 	bl	8001690 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b82:	f7fe fd85 	bl	8001690 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1ef      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ef      	beq.n	8002b82 <HAL_RCC_OscConfig+0x22e>
 8002ba2:	e020      	b.n	8002be6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fd6c 	bl	8001690 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bba:	e00d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fd68 	bl	8001690 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d906      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1d2      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ea      	bne.n	8002bbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80a6 	beq.w	8002d40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bf8:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2b4>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x2b6>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	4a7e      	ldr	r2, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d118      	bne.n	8002c68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fd25 	bl	8001690 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fe fd21 	bl	8001690 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e18b      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_RCC_OscConfig+0x32e>
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c80:	e024      	b.n	8002ccc <HAL_RCC_OscConfig+0x378>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d110      	bne.n	8002cac <HAL_RCC_OscConfig+0x358>
 8002c8a:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002caa:	e00f      	b.n	8002ccc <HAL_RCC_OscConfig+0x378>
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fcdc 	bl	8001690 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fcd8 	bl	8001690 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e140      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ed      	beq.n	8002cdc <HAL_RCC_OscConfig+0x388>
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe fcc5 	bl	8001690 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fcc1 	bl	8001690 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e129      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d20:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ed      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2e:	7ffb      	ldrb	r3, [r7, #31]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5a:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fc94 	bl	8001690 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6c:	f7fe fc90 	bl	8001690 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0fa      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCC_OscConfig+0x418>
 8002d8c:	e01b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fc77 	bl	8001690 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da6:	f7fe fc73 	bl	8001690 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0dd      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ef      	bne.n	8002da6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80d1 	beq.w	8002f72 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	f000 808b 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d15e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fc4d 	bl	8001690 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	e00c      	b.n	8002e14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe fc49 	bl	8001690 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d905      	bls.n	8002e14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0b3      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ec      	bne.n	8002dfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e20:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x62c>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6a11      	ldr	r1, [r2, #32]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e3a:	0212      	lsls	r2, r2, #8
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e42:	0852      	lsrs	r2, r2, #1
 8002e44:	3a01      	subs	r2, #1
 8002e46:	0552      	lsls	r2, r2, #21
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4e:	0852      	lsrs	r2, r2, #1
 8002e50:	3a01      	subs	r2, #1
 8002e52:	0652      	lsls	r2, r2, #25
 8002e54:	4311      	orrs	r1, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e5a:	06d2      	lsls	r2, r2, #27
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	4947      	ldr	r1, [pc, #284]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a44      	ldr	r2, [pc, #272]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e70:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fc08 	bl	8001690 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fc04 	bl	8001690 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e06e      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x530>
 8002ea2:	e066      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a34      	ldr	r2, [pc, #208]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ec2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fbe0 	bl	8001690 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe fbdc 	bl	8001690 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e046      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x580>
 8002ef2:	e03e      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e039      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f00:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d12c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d123      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d11b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d113      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	3b01      	subs	r3, #1
 8002f68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	019f800c 	.word	0x019f800c

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e11e      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b91      	ldr	r3, [pc, #580]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d910      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	498c      	ldr	r1, [pc, #560]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b8a      	ldr	r3, [pc, #552]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e106      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d073      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d129      	bne.n	8003034 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe0:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0f4      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ff0:	f000 f99e 	bl	8003330 <RCC_GetSysClockFreqFromPLLSource>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4a7c      	ldr	r2, [pc, #496]	; (80031ec <HAL_RCC_ClockConfig+0x268>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d93f      	bls.n	800307e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	d033      	beq.n	800307e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d12f      	bne.n	800307e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800301e:	4b72      	ldr	r3, [pc, #456]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003026:	4a70      	ldr	r2, [pc, #448]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e024      	b.n	800307e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d107      	bne.n	800304c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0c6      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304c:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0be      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800305c:	f000 f8ce 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003060:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4a61      	ldr	r2, [pc, #388]	; (80031ec <HAL_RCC_ClockConfig+0x268>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d909      	bls.n	800307e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800306a:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003072:	4a5d      	ldr	r2, [pc, #372]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4957      	ldr	r1, [pc, #348]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003090:	f7fe fafe 	bl	8001690 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7fe fafa 	bl	8001690 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e095      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d023      	beq.n	8003114 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030f8:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
 8003112:	e008      	b.n	8003126 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d105      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800311a:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4a32      	ldr	r2, [pc, #200]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003124:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d21d      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 020f 	bic.w	r2, r3, #15
 800313c:	4929      	ldr	r1, [pc, #164]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003144:	f7fe faa4 	bl	8001690 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fe faa0 	bl	8001690 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e03b      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d1ed      	bne.n	800314c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4917      	ldr	r1, [pc, #92]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490f      	ldr	r1, [pc, #60]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ae:	f000 f825 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490c      	ldr	r1, [pc, #48]	; (80031f0 <HAL_RCC_ClockConfig+0x26c>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <HAL_RCC_ClockConfig+0x270>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x274>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fa10 	bl	80015f8 <HAL_InitTick>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	04c4b400 	.word	0x04c4b400
 80031f0:	08005cd8 	.word	0x08005cd8
 80031f4:	20000000 	.word	0x20000000
 80031f8:	20000004 	.word	0x20000004

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d102      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e047      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d102      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e03e      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d136      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3301      	adds	r3, #1
 8003248:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d10c      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003250:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800325a:	68d2      	ldr	r2, [r2, #12]
 800325c:	0a12      	lsrs	r2, r2, #8
 800325e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
      break;
 8003268:	e00c      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	0a12      	lsrs	r2, r2, #8
 8003278:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
      break;
 8003282:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0e5b      	lsrs	r3, r3, #25
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	3301      	adds	r3, #1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e001      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032a4:	693b      	ldr	r3, [r7, #16]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	016e3600 	.word	0x016e3600

080032c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000

080032d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032dc:	f7ff fff0 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	08005ce8 	.word	0x08005ce8

08003304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003308:	f7ff ffda 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0adb      	lsrs	r3, r3, #11
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4904      	ldr	r1, [pc, #16]	; (800332c <HAL_RCC_GetPCLK2Freq+0x28>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	08005ce8 	.word	0x08005ce8

08003330 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d10c      	bne.n	800336e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800335e:	68d2      	ldr	r2, [r2, #12]
 8003360:	0a12      	lsrs	r2, r2, #8
 8003362:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
    break;
 800336c:	e00c      	b.n	8003388 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	0a12      	lsrs	r2, r2, #8
 800337c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
    break;
 8003386:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0e5b      	lsrs	r3, r3, #25
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	3301      	adds	r3, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033a2:	687b      	ldr	r3, [r7, #4]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40021000 	.word	0x40021000
 80033b4:	016e3600 	.word	0x016e3600
 80033b8:	00f42400 	.word	0x00f42400

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c4:	2300      	movs	r3, #0
 80033c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c8:	2300      	movs	r3, #0
 80033ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8098 	beq.w	800350a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6593      	str	r3, [r2, #88]	; 0x58
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003402:	2301      	movs	r3, #1
 8003404:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a39      	ldr	r2, [pc, #228]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003412:	f7fe f93d 	bl	8001690 <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003418:	e009      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fe f939 	bl	8001690 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d902      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	74fb      	strb	r3, [r7, #19]
        break;
 800342c:	e005      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ef      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d159      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003440:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01e      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	429a      	cmp	r2, r3
 800345a:	d019      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003468:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003488:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe f8f9 	bl	8001690 <HAL_GetTick>
 800349e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a0:	e00b      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe f8f5 	bl	8001690 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d902      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	74fb      	strb	r3, [r7, #19]
            break;
 80034b8:	e006      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ec      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e4:	e008      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	74bb      	strb	r3, [r7, #18]
 80034ea:	e005      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f8:	7c7b      	ldrb	r3, [r7, #17]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4ba7      	ldr	r3, [pc, #668]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	4aa6      	ldr	r2, [pc, #664]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003516:	4ba1      	ldr	r3, [pc, #644]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 0203 	bic.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	499d      	ldr	r1, [pc, #628]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003538:	4b98      	ldr	r3, [pc, #608]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 020c 	bic.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4995      	ldr	r1, [pc, #596]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355a:	4b90      	ldr	r3, [pc, #576]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	498c      	ldr	r1, [pc, #560]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800357c:	4b87      	ldr	r3, [pc, #540]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	4984      	ldr	r1, [pc, #528]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800359e:	4b7f      	ldr	r3, [pc, #508]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	497b      	ldr	r1, [pc, #492]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c0:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	4973      	ldr	r1, [pc, #460]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e2:	4b6e      	ldr	r3, [pc, #440]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	496a      	ldr	r1, [pc, #424]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003604:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4962      	ldr	r1, [pc, #392]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003626:	4b5d      	ldr	r3, [pc, #372]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	4959      	ldr	r1, [pc, #356]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003648:	4b54      	ldr	r3, [pc, #336]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	4951      	ldr	r1, [pc, #324]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800366a:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4948      	ldr	r1, [pc, #288]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d015      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368c:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4940      	ldr	r1, [pc, #256]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036aa:	d105      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ac:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a3a      	ldr	r2, [pc, #232]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036c4:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	4932      	ldr	r1, [pc, #200]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e2:	d105      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a2c      	ldr	r2, [pc, #176]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	4924      	ldr	r1, [pc, #144]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800371a:	d105      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003726:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	4916      	ldr	r1, [pc, #88]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a10      	ldr	r2, [pc, #64]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d019      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e002      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4926      	ldr	r1, [pc, #152]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ca:	d105      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	4918      	ldr	r1, [pc, #96]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d105      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800380a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800381e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	490a      	ldr	r1, [pc, #40]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800383a:	d105      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003848:	7cbb      	ldrb	r3, [r7, #18]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e049      	b.n	80038fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd fdb6 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f000 f9bc 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d001      	beq.n	8003920 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e04c      	b.n	80039ba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <HAL_TIM_Base_Start+0xc0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d022      	beq.n	8003978 <HAL_TIM_Base_Start+0x70>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d01d      	beq.n	8003978 <HAL_TIM_Base_Start+0x70>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a22      	ldr	r2, [pc, #136]	; (80039cc <HAL_TIM_Base_Start+0xc4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d018      	beq.n	8003978 <HAL_TIM_Base_Start+0x70>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <HAL_TIM_Base_Start+0xc8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_TIM_Base_Start+0x70>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_TIM_Base_Start+0xcc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_TIM_Base_Start+0x70>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_TIM_Base_Start+0xd0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_TIM_Base_Start+0x70>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_TIM_Base_Start+0xd4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_TIM_Base_Start+0x70>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_TIM_Base_Start+0xd8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d115      	bne.n	80039a4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_TIM_Base_Start+0xdc>)
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b06      	cmp	r3, #6
 8003988:	d015      	beq.n	80039b6 <HAL_TIM_Base_Start+0xae>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d011      	beq.n	80039b6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	e008      	b.n	80039b6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e000      	b.n	80039b8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40013400 	.word	0x40013400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40015000 	.word	0x40015000
 80039e4:	00010007 	.word	0x00010007

080039e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_TIM_ConfigClockSource+0x1c>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0f6      	b.n	8003bf2 <HAL_TIM_ConfigClockSource+0x20a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6f      	ldr	r2, [pc, #444]	; (8003bfc <HAL_TIM_ConfigClockSource+0x214>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	f000 80c1 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a44:	4a6d      	ldr	r2, [pc, #436]	; (8003bfc <HAL_TIM_ConfigClockSource+0x214>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	f200 80c6 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a4c:	4a6c      	ldr	r2, [pc, #432]	; (8003c00 <HAL_TIM_ConfigClockSource+0x218>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	f000 80b9 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a54:	4a6a      	ldr	r2, [pc, #424]	; (8003c00 <HAL_TIM_ConfigClockSource+0x218>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	f200 80be 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a5c:	4a69      	ldr	r2, [pc, #420]	; (8003c04 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	f000 80b1 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a64:	4a67      	ldr	r2, [pc, #412]	; (8003c04 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f200 80b6 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a6c:	4a66      	ldr	r2, [pc, #408]	; (8003c08 <HAL_TIM_ConfigClockSource+0x220>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	f000 80a9 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a74:	4a64      	ldr	r2, [pc, #400]	; (8003c08 <HAL_TIM_ConfigClockSource+0x220>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	f200 80ae 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a7c:	4a63      	ldr	r2, [pc, #396]	; (8003c0c <HAL_TIM_ConfigClockSource+0x224>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	f000 80a1 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a84:	4a61      	ldr	r2, [pc, #388]	; (8003c0c <HAL_TIM_ConfigClockSource+0x224>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	f200 80a6 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a8c:	4a60      	ldr	r2, [pc, #384]	; (8003c10 <HAL_TIM_ConfigClockSource+0x228>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f000 8099 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a94:	4a5e      	ldr	r2, [pc, #376]	; (8003c10 <HAL_TIM_ConfigClockSource+0x228>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	f200 809e 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003aa0:	f000 8091 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003aa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003aa8:	f200 8096 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab0:	f000 8089 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab8:	f200 808e 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac0:	d03e      	beq.n	8003b40 <HAL_TIM_ConfigClockSource+0x158>
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	f200 8087 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	f000 8086 	beq.w	8003bde <HAL_TIM_ConfigClockSource+0x1f6>
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	d87f      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad8:	2b70      	cmp	r3, #112	; 0x70
 8003ada:	d01a      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x12a>
 8003adc:	2b70      	cmp	r3, #112	; 0x70
 8003ade:	d87b      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae0:	2b60      	cmp	r3, #96	; 0x60
 8003ae2:	d050      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x19e>
 8003ae4:	2b60      	cmp	r3, #96	; 0x60
 8003ae6:	d877      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae8:	2b50      	cmp	r3, #80	; 0x50
 8003aea:	d03c      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x17e>
 8003aec:	2b50      	cmp	r3, #80	; 0x50
 8003aee:	d873      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003af0:	2b40      	cmp	r3, #64	; 0x40
 8003af2:	d058      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x1be>
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d86f      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003af8:	2b30      	cmp	r3, #48	; 0x30
 8003afa:	d064      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003afc:	2b30      	cmp	r3, #48	; 0x30
 8003afe:	d86b      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d060      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d867      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d05c      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d05a      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x1de>
 8003b10:	e062      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6899      	ldr	r1, [r3, #8]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f000 f99b 	bl	8003e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	609a      	str	r2, [r3, #8]
      break;
 8003b3e:	e04f      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6899      	ldr	r1, [r3, #8]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f000 f984 	bl	8003e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b62:	609a      	str	r2, [r3, #8]
      break;
 8003b64:	e03c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 f8f6 	bl	8003d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2150      	movs	r1, #80	; 0x50
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f94f 	bl	8003e22 <TIM_ITRx_SetConfig>
      break;
 8003b84:	e02c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 f915 	bl	8003dc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2160      	movs	r1, #96	; 0x60
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f93f 	bl	8003e22 <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e01c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 f8d6 	bl	8003d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2140      	movs	r1, #64	; 0x40
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f92f 	bl	8003e22 <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e00c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f000 f926 	bl	8003e22 <TIM_ITRx_SetConfig>
      break;
 8003bd6:	e003      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e000      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	00100070 	.word	0x00100070
 8003c00:	00100060 	.word	0x00100060
 8003c04:	00100050 	.word	0x00100050
 8003c08:	00100040 	.word	0x00100040
 8003c0c:	00100030 	.word	0x00100030
 8003c10:	00100020 	.word	0x00100020

08003c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a46      	ldr	r2, [pc, #280]	; (8003d40 <TIM_Base_SetConfig+0x12c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d017      	beq.n	8003c5c <TIM_Base_SetConfig+0x48>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d013      	beq.n	8003c5c <TIM_Base_SetConfig+0x48>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a43      	ldr	r2, [pc, #268]	; (8003d44 <TIM_Base_SetConfig+0x130>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00f      	beq.n	8003c5c <TIM_Base_SetConfig+0x48>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a42      	ldr	r2, [pc, #264]	; (8003d48 <TIM_Base_SetConfig+0x134>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <TIM_Base_SetConfig+0x48>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a41      	ldr	r2, [pc, #260]	; (8003d4c <TIM_Base_SetConfig+0x138>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <TIM_Base_SetConfig+0x48>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a40      	ldr	r2, [pc, #256]	; (8003d50 <TIM_Base_SetConfig+0x13c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0x48>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3f      	ldr	r2, [pc, #252]	; (8003d54 <TIM_Base_SetConfig+0x140>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d108      	bne.n	8003c6e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a33      	ldr	r2, [pc, #204]	; (8003d40 <TIM_Base_SetConfig+0x12c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d023      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d01f      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a30      	ldr	r2, [pc, #192]	; (8003d44 <TIM_Base_SetConfig+0x130>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <TIM_Base_SetConfig+0x134>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <TIM_Base_SetConfig+0x138>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <TIM_Base_SetConfig+0x13c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <TIM_Base_SetConfig+0x144>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <TIM_Base_SetConfig+0x148>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <TIM_Base_SetConfig+0x14c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0xaa>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <TIM_Base_SetConfig+0x140>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <TIM_Base_SetConfig+0x12c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <TIM_Base_SetConfig+0x110>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <TIM_Base_SetConfig+0x13c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0x110>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <TIM_Base_SetConfig+0x144>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x110>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <TIM_Base_SetConfig+0x148>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x110>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <TIM_Base_SetConfig+0x14c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x110>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <TIM_Base_SetConfig+0x140>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40013400 	.word	0x40013400
 8003d54:	40015000 	.word	0x40015000
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800

08003d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0201 	bic.w	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 030a 	bic.w	r3, r3, #10
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b087      	sub	sp, #28
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f023 0210 	bic.w	r2, r3, #16
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f043 0307 	orr.w	r3, r3, #7
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e074      	b.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a34      	ldr	r2, [pc, #208]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a33      	ldr	r2, [pc, #204]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a31      	ldr	r2, [pc, #196]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ef8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a21      	ldr	r2, [pc, #132]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d022      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d01d      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d018      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00e      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a11      	ldr	r2, [pc, #68]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10c      	bne.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40013400 	.word	0x40013400
 8003fb4:	40015000 	.word	0x40015000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000

08003fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e042      	b.n	8004060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fd fa69 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2224      	movs	r2, #36	; 0x24
 8003ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f82c 	bl	8004068 <UART_SetConfig>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e022      	b.n	8004060 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fb1c 	bl	8004660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fba3 	bl	80047a4 <UART_CheckIdleState>
 800405e:	4603      	mov	r3, r0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b08c      	sub	sp, #48	; 0x30
 800406e:	af00      	add	r7, sp, #0
 8004070:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	431a      	orrs	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	4313      	orrs	r3, r2
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4baa      	ldr	r3, [pc, #680]	; (8004340 <UART_SetConfig+0x2d8>)
 8004098:	4013      	ands	r3, r2
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a9f      	ldr	r2, [pc, #636]	; (8004344 <UART_SetConfig+0x2dc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d0:	4313      	orrs	r3, r2
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80040de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f023 010f 	bic.w	r1, r3, #15
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a90      	ldr	r2, [pc, #576]	; (8004348 <UART_SetConfig+0x2e0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d125      	bne.n	8004158 <UART_SetConfig+0xf0>
 800410c:	4b8f      	ldr	r3, [pc, #572]	; (800434c <UART_SetConfig+0x2e4>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b03      	cmp	r3, #3
 8004118:	d81a      	bhi.n	8004150 <UART_SetConfig+0xe8>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0xb8>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	08004141 	.word	0x08004141
 8004128:	08004139 	.word	0x08004139
 800412c:	08004149 	.word	0x08004149
 8004130:	2301      	movs	r3, #1
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004136:	e116      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004138:	2302      	movs	r3, #2
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413e:	e112      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004140:	2304      	movs	r3, #4
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004146:	e10e      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004148:	2308      	movs	r3, #8
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414e:	e10a      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004150:	2310      	movs	r3, #16
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004156:	e106      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a7c      	ldr	r2, [pc, #496]	; (8004350 <UART_SetConfig+0x2e8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d138      	bne.n	80041d4 <UART_SetConfig+0x16c>
 8004162:	4b7a      	ldr	r3, [pc, #488]	; (800434c <UART_SetConfig+0x2e4>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d82d      	bhi.n	80041cc <UART_SetConfig+0x164>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0x110>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041cd 	.word	0x080041cd
 8004180:	080041cd 	.word	0x080041cd
 8004184:	080041cd 	.word	0x080041cd
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041cd 	.word	0x080041cd
 8004190:	080041cd 	.word	0x080041cd
 8004194:	080041cd 	.word	0x080041cd
 8004198:	080041b5 	.word	0x080041b5
 800419c:	080041cd 	.word	0x080041cd
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041c5 	.word	0x080041c5
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b2:	e0d8      	b.n	8004366 <UART_SetConfig+0x2fe>
 80041b4:	2302      	movs	r3, #2
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ba:	e0d4      	b.n	8004366 <UART_SetConfig+0x2fe>
 80041bc:	2304      	movs	r3, #4
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c2:	e0d0      	b.n	8004366 <UART_SetConfig+0x2fe>
 80041c4:	2308      	movs	r3, #8
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ca:	e0cc      	b.n	8004366 <UART_SetConfig+0x2fe>
 80041cc:	2310      	movs	r3, #16
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d2:	e0c8      	b.n	8004366 <UART_SetConfig+0x2fe>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5e      	ldr	r2, [pc, #376]	; (8004354 <UART_SetConfig+0x2ec>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d125      	bne.n	800422a <UART_SetConfig+0x1c2>
 80041de:	4b5b      	ldr	r3, [pc, #364]	; (800434c <UART_SetConfig+0x2e4>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041e8:	2b30      	cmp	r3, #48	; 0x30
 80041ea:	d016      	beq.n	800421a <UART_SetConfig+0x1b2>
 80041ec:	2b30      	cmp	r3, #48	; 0x30
 80041ee:	d818      	bhi.n	8004222 <UART_SetConfig+0x1ba>
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d00a      	beq.n	800420a <UART_SetConfig+0x1a2>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d814      	bhi.n	8004222 <UART_SetConfig+0x1ba>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <UART_SetConfig+0x19a>
 80041fc:	2b10      	cmp	r3, #16
 80041fe:	d008      	beq.n	8004212 <UART_SetConfig+0x1aa>
 8004200:	e00f      	b.n	8004222 <UART_SetConfig+0x1ba>
 8004202:	2300      	movs	r3, #0
 8004204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004208:	e0ad      	b.n	8004366 <UART_SetConfig+0x2fe>
 800420a:	2302      	movs	r3, #2
 800420c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004210:	e0a9      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004212:	2304      	movs	r3, #4
 8004214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004218:	e0a5      	b.n	8004366 <UART_SetConfig+0x2fe>
 800421a:	2308      	movs	r3, #8
 800421c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004220:	e0a1      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004222:	2310      	movs	r3, #16
 8004224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004228:	e09d      	b.n	8004366 <UART_SetConfig+0x2fe>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <UART_SetConfig+0x2f0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d125      	bne.n	8004280 <UART_SetConfig+0x218>
 8004234:	4b45      	ldr	r3, [pc, #276]	; (800434c <UART_SetConfig+0x2e4>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800423e:	2bc0      	cmp	r3, #192	; 0xc0
 8004240:	d016      	beq.n	8004270 <UART_SetConfig+0x208>
 8004242:	2bc0      	cmp	r3, #192	; 0xc0
 8004244:	d818      	bhi.n	8004278 <UART_SetConfig+0x210>
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d00a      	beq.n	8004260 <UART_SetConfig+0x1f8>
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d814      	bhi.n	8004278 <UART_SetConfig+0x210>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <UART_SetConfig+0x1f0>
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d008      	beq.n	8004268 <UART_SetConfig+0x200>
 8004256:	e00f      	b.n	8004278 <UART_SetConfig+0x210>
 8004258:	2300      	movs	r3, #0
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e082      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004260:	2302      	movs	r3, #2
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004266:	e07e      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004268:	2304      	movs	r3, #4
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426e:	e07a      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004270:	2308      	movs	r3, #8
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004276:	e076      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004278:	2310      	movs	r3, #16
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427e:	e072      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a35      	ldr	r2, [pc, #212]	; (800435c <UART_SetConfig+0x2f4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d12a      	bne.n	80042e0 <UART_SetConfig+0x278>
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <UART_SetConfig+0x2e4>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004298:	d01a      	beq.n	80042d0 <UART_SetConfig+0x268>
 800429a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800429e:	d81b      	bhi.n	80042d8 <UART_SetConfig+0x270>
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d00c      	beq.n	80042c0 <UART_SetConfig+0x258>
 80042a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042aa:	d815      	bhi.n	80042d8 <UART_SetConfig+0x270>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <UART_SetConfig+0x250>
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b4:	d008      	beq.n	80042c8 <UART_SetConfig+0x260>
 80042b6:	e00f      	b.n	80042d8 <UART_SetConfig+0x270>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042be:	e052      	b.n	8004366 <UART_SetConfig+0x2fe>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c6:	e04e      	b.n	8004366 <UART_SetConfig+0x2fe>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ce:	e04a      	b.n	8004366 <UART_SetConfig+0x2fe>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d6:	e046      	b.n	8004366 <UART_SetConfig+0x2fe>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042de:	e042      	b.n	8004366 <UART_SetConfig+0x2fe>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a17      	ldr	r2, [pc, #92]	; (8004344 <UART_SetConfig+0x2dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d13a      	bne.n	8004360 <UART_SetConfig+0x2f8>
 80042ea:	4b18      	ldr	r3, [pc, #96]	; (800434c <UART_SetConfig+0x2e4>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f8:	d01a      	beq.n	8004330 <UART_SetConfig+0x2c8>
 80042fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042fe:	d81b      	bhi.n	8004338 <UART_SetConfig+0x2d0>
 8004300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004304:	d00c      	beq.n	8004320 <UART_SetConfig+0x2b8>
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d815      	bhi.n	8004338 <UART_SetConfig+0x2d0>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <UART_SetConfig+0x2b0>
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d008      	beq.n	8004328 <UART_SetConfig+0x2c0>
 8004316:	e00f      	b.n	8004338 <UART_SetConfig+0x2d0>
 8004318:	2300      	movs	r3, #0
 800431a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800431e:	e022      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004320:	2302      	movs	r3, #2
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004326:	e01e      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004328:	2304      	movs	r3, #4
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800432e:	e01a      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004330:	2308      	movs	r3, #8
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004336:	e016      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800433e:	e012      	b.n	8004366 <UART_SetConfig+0x2fe>
 8004340:	cfff69f3 	.word	0xcfff69f3
 8004344:	40008000 	.word	0x40008000
 8004348:	40013800 	.word	0x40013800
 800434c:	40021000 	.word	0x40021000
 8004350:	40004400 	.word	0x40004400
 8004354:	40004800 	.word	0x40004800
 8004358:	40004c00 	.word	0x40004c00
 800435c:	40005000 	.word	0x40005000
 8004360:	2310      	movs	r3, #16
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4aae      	ldr	r2, [pc, #696]	; (8004624 <UART_SetConfig+0x5bc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	f040 8097 	bne.w	80044a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004376:	2b08      	cmp	r3, #8
 8004378:	d823      	bhi.n	80043c2 <UART_SetConfig+0x35a>
 800437a:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x318>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043c3 	.word	0x080043c3
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043c3 	.word	0x080043c3
 8004390:	080043b3 	.word	0x080043b3
 8004394:	080043c3 	.word	0x080043c3
 8004398:	080043c3 	.word	0x080043c3
 800439c:	080043c3 	.word	0x080043c3
 80043a0:	080043bb 	.word	0x080043bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe ff98 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 80043a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043aa:	e010      	b.n	80043ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ac:	4b9e      	ldr	r3, [pc, #632]	; (8004628 <UART_SetConfig+0x5c0>)
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043b0:	e00d      	b.n	80043ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b2:	f7fe ff23 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043b8:	e009      	b.n	80043ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043c0:	e005      	b.n	80043ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8130 	beq.w	8004636 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	4a94      	ldr	r2, [pc, #592]	; (800462c <UART_SetConfig+0x5c4>)
 80043dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d305      	bcc.n	8004406 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	429a      	cmp	r2, r3
 8004404:	d903      	bls.n	800440e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800440c:	e113      	b.n	8004636 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2200      	movs	r2, #0
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	60fa      	str	r2, [r7, #12]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	4a84      	ldr	r2, [pc, #528]	; (800462c <UART_SetConfig+0x5c4>)
 800441c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004420:	b29b      	uxth	r3, r3
 8004422:	2200      	movs	r2, #0
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800442c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004430:	f7fc fb90 	bl	8000b54 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	020b      	lsls	r3, r1, #8
 8004446:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800444a:	0202      	lsls	r2, r0, #8
 800444c:	6979      	ldr	r1, [r7, #20]
 800444e:	6849      	ldr	r1, [r1, #4]
 8004450:	0849      	lsrs	r1, r1, #1
 8004452:	2000      	movs	r0, #0
 8004454:	460c      	mov	r4, r1
 8004456:	4605      	mov	r5, r0
 8004458:	eb12 0804 	adds.w	r8, r2, r4
 800445c:	eb43 0905 	adc.w	r9, r3, r5
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	469a      	mov	sl, r3
 8004468:	4693      	mov	fp, r2
 800446a:	4652      	mov	r2, sl
 800446c:	465b      	mov	r3, fp
 800446e:	4640      	mov	r0, r8
 8004470:	4649      	mov	r1, r9
 8004472:	f7fc fb6f 	bl	8000b54 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4613      	mov	r3, r2
 800447c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004484:	d308      	bcc.n	8004498 <UART_SetConfig+0x430>
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800448c:	d204      	bcs.n	8004498 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	e0ce      	b.n	8004636 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800449e:	e0ca      	b.n	8004636 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a8:	d166      	bne.n	8004578 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80044aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d827      	bhi.n	8004502 <UART_SetConfig+0x49a>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x450>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044ed 	.word	0x080044ed
 80044c4:	08004503 	.word	0x08004503
 80044c8:	080044f3 	.word	0x080044f3
 80044cc:	08004503 	.word	0x08004503
 80044d0:	08004503 	.word	0x08004503
 80044d4:	08004503 	.word	0x08004503
 80044d8:	080044fb 	.word	0x080044fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe fefc 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 80044e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044e2:	e014      	b.n	800450e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e4:	f7fe ff0e 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 80044e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044ea:	e010      	b.n	800450e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ec:	4b4e      	ldr	r3, [pc, #312]	; (8004628 <UART_SetConfig+0x5c0>)
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044f0:	e00d      	b.n	800450e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f2:	f7fe fe83 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80044f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044f8:	e009      	b.n	800450e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004500:	e005      	b.n	800450e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800450c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8090 	beq.w	8004636 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	4a44      	ldr	r2, [pc, #272]	; (800462c <UART_SetConfig+0x5c4>)
 800451c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004520:	461a      	mov	r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	fbb3 f3f2 	udiv	r3, r3, r2
 8004528:	005a      	lsls	r2, r3, #1
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	441a      	add	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	d916      	bls.n	8004570 <UART_SetConfig+0x508>
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004548:	d212      	bcs.n	8004570 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f023 030f 	bic.w	r3, r3, #15
 8004552:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	b29a      	uxth	r2, r3
 8004560:	8bfb      	ldrh	r3, [r7, #30]
 8004562:	4313      	orrs	r3, r2
 8004564:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	8bfa      	ldrh	r2, [r7, #30]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	e062      	b.n	8004636 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004576:	e05e      	b.n	8004636 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800457c:	2b08      	cmp	r3, #8
 800457e:	d828      	bhi.n	80045d2 <UART_SetConfig+0x56a>
 8004580:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <UART_SetConfig+0x520>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045bd 	.word	0x080045bd
 8004594:	080045d3 	.word	0x080045d3
 8004598:	080045c3 	.word	0x080045c3
 800459c:	080045d3 	.word	0x080045d3
 80045a0:	080045d3 	.word	0x080045d3
 80045a4:	080045d3 	.word	0x080045d3
 80045a8:	080045cb 	.word	0x080045cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fe fe94 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 80045b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045b2:	e014      	b.n	80045de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b4:	f7fe fea6 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 80045b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ba:	e010      	b.n	80045de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <UART_SetConfig+0x5c0>)
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045c0:	e00d      	b.n	80045de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c2:	f7fe fe1b 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80045c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045c8:	e009      	b.n	80045de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045d0:	e005      	b.n	80045de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045dc:	bf00      	nop
    }

    if (pclk != 0U)
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d028      	beq.n	8004636 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	4a10      	ldr	r2, [pc, #64]	; (800462c <UART_SetConfig+0x5c4>)
 80045ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045ee:	461a      	mov	r2, r3
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	441a      	add	r2, r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	2b0f      	cmp	r3, #15
 800460c:	d910      	bls.n	8004630 <UART_SetConfig+0x5c8>
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d20c      	bcs.n	8004630 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	b29a      	uxth	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	e009      	b.n	8004636 <UART_SetConfig+0x5ce>
 8004622:	bf00      	nop
 8004624:	40008000 	.word	0x40008000
 8004628:	00f42400 	.word	0x00f42400
 800462c:	08005cf0 	.word	0x08005cf0
      }
      else
      {
        ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2201      	movs	r2, #1
 800463a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2201      	movs	r2, #1
 8004642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2200      	movs	r2, #0
 800464a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004652:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004656:	4618      	mov	r0, r3
 8004658:	3730      	adds	r7, #48	; 0x30
 800465a:	46bd      	mov	sp, r7
 800465c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01a      	beq.n	8004776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475e:	d10a      	bne.n	8004776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047b4:	f7fc ff6c 	bl	8001690 <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d10e      	bne.n	80047e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f82f 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e025      	b.n	8004832 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d10e      	bne.n	8004812 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f819 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e00f      	b.n	8004832 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b09c      	sub	sp, #112	; 0x70
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484a:	e0a9      	b.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	f000 80a5 	beq.w	80049a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004856:	f7fc ff1b 	bl	8001690 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <UART_WaitOnFlagUntilTimeout+0x32>
 8004866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004868:	2b00      	cmp	r3, #0
 800486a:	d140      	bne.n	80048ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004880:	667b      	str	r3, [r7, #100]	; 0x64
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e6      	bne.n	800486c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	663b      	str	r3, [r7, #96]	; 0x60
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048be:	64ba      	str	r2, [r7, #72]	; 0x48
 80048c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e069      	b.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d051      	beq.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490a:	d149      	bne.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004914:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
 8004936:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	613b      	str	r3, [r7, #16]
   return(result);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004968:	623a      	str	r2, [r7, #32]
 800496a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	69f9      	ldr	r1, [r7, #28]
 800496e:	6a3a      	ldr	r2, [r7, #32]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	61bb      	str	r3, [r7, #24]
   return(result);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e5      	bne.n	8004948 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e010      	b.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	f43f af46 	beq.w	800484c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3770      	adds	r7, #112	; 0x70
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80049dc:	2302      	movs	r3, #2
 80049de:	e027      	b.n	8004a30 <HAL_UARTEx_DisableFifoMode+0x66>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2224      	movs	r2, #36	; 0x24
 80049ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e02d      	b.n	8004ab0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f84f 	bl	8004b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e02d      	b.n	8004b2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f811 	bl	8004b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d108      	bne.n	8004b56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b54:	e031      	b.n	8004bba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b56:	2308      	movs	r3, #8
 8004b58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	0e5b      	lsrs	r3, r3, #25
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	0f5b      	lsrs	r3, r3, #29
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b7e:	7bbb      	ldrb	r3, [r7, #14]
 8004b80:	7b3a      	ldrb	r2, [r7, #12]
 8004b82:	4911      	ldr	r1, [pc, #68]	; (8004bc8 <UARTEx_SetNbDataToProcess+0x94>)
 8004b84:	5c8a      	ldrb	r2, [r1, r2]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b8a:	7b3a      	ldrb	r2, [r7, #12]
 8004b8c:	490f      	ldr	r1, [pc, #60]	; (8004bcc <UARTEx_SetNbDataToProcess+0x98>)
 8004b8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	7b7a      	ldrb	r2, [r7, #13]
 8004ba0:	4909      	ldr	r1, [pc, #36]	; (8004bc8 <UARTEx_SetNbDataToProcess+0x94>)
 8004ba2:	5c8a      	ldrb	r2, [r1, r2]
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ba8:	7b7a      	ldrb	r2, [r7, #13]
 8004baa:	4908      	ldr	r1, [pc, #32]	; (8004bcc <UARTEx_SetNbDataToProcess+0x98>)
 8004bac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	08005d08 	.word	0x08005d08
 8004bcc:	08005d10 	.word	0x08005d10

08004bd0 <__libc_init_array>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	4d0d      	ldr	r5, [pc, #52]	; (8004c08 <__libc_init_array+0x38>)
 8004bd4:	4c0d      	ldr	r4, [pc, #52]	; (8004c0c <__libc_init_array+0x3c>)
 8004bd6:	1b64      	subs	r4, r4, r5
 8004bd8:	10a4      	asrs	r4, r4, #2
 8004bda:	2600      	movs	r6, #0
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	d109      	bne.n	8004bf4 <__libc_init_array+0x24>
 8004be0:	4d0b      	ldr	r5, [pc, #44]	; (8004c10 <__libc_init_array+0x40>)
 8004be2:	4c0c      	ldr	r4, [pc, #48]	; (8004c14 <__libc_init_array+0x44>)
 8004be4:	f001 f86a 	bl	8005cbc <_init>
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	2600      	movs	r6, #0
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d105      	bne.n	8004bfe <__libc_init_array+0x2e>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf8:	4798      	blx	r3
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7ee      	b.n	8004bdc <__libc_init_array+0xc>
 8004bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c02:	4798      	blx	r3
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7f2      	b.n	8004bee <__libc_init_array+0x1e>
 8004c08:	08005ef8 	.word	0x08005ef8
 8004c0c:	08005ef8 	.word	0x08005ef8
 8004c10:	08005ef8 	.word	0x08005ef8
 8004c14:	08005efc 	.word	0x08005efc

08004c18 <memset>:
 8004c18:	4402      	add	r2, r0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	f803 1b01 	strb.w	r1, [r3], #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <sin>:
 8004c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c2a:	ec53 2b10 	vmov	r2, r3, d0
 8004c2e:	4828      	ldr	r0, [pc, #160]	; (8004cd0 <sin+0xa8>)
 8004c30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c34:	4281      	cmp	r1, r0
 8004c36:	dc07      	bgt.n	8004c48 <sin+0x20>
 8004c38:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004cc8 <sin+0xa0>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	b005      	add	sp, #20
 8004c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c44:	f000 be6c 	b.w	8005920 <__kernel_sin>
 8004c48:	4822      	ldr	r0, [pc, #136]	; (8004cd4 <sin+0xac>)
 8004c4a:	4281      	cmp	r1, r0
 8004c4c:	dd09      	ble.n	8004c62 <sin+0x3a>
 8004c4e:	ee10 0a10 	vmov	r0, s0
 8004c52:	4619      	mov	r1, r3
 8004c54:	f7fb fae4 	bl	8000220 <__aeabi_dsub>
 8004c58:	ec41 0b10 	vmov	d0, r0, r1
 8004c5c:	b005      	add	sp, #20
 8004c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c62:	4668      	mov	r0, sp
 8004c64:	f000 f838 	bl	8004cd8 <__ieee754_rem_pio2>
 8004c68:	f000 0003 	and.w	r0, r0, #3
 8004c6c:	2801      	cmp	r0, #1
 8004c6e:	d00c      	beq.n	8004c8a <sin+0x62>
 8004c70:	2802      	cmp	r0, #2
 8004c72:	d011      	beq.n	8004c98 <sin+0x70>
 8004c74:	b9f0      	cbnz	r0, 8004cb4 <sin+0x8c>
 8004c76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c7a:	ed9d 0b00 	vldr	d0, [sp]
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f000 fe4e 	bl	8005920 <__kernel_sin>
 8004c84:	ec51 0b10 	vmov	r0, r1, d0
 8004c88:	e7e6      	b.n	8004c58 <sin+0x30>
 8004c8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c8e:	ed9d 0b00 	vldr	d0, [sp]
 8004c92:	f000 fa2d 	bl	80050f0 <__kernel_cos>
 8004c96:	e7f5      	b.n	8004c84 <sin+0x5c>
 8004c98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c9c:	ed9d 0b00 	vldr	d0, [sp]
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f000 fe3d 	bl	8005920 <__kernel_sin>
 8004ca6:	ec53 2b10 	vmov	r2, r3, d0
 8004caa:	ee10 0a10 	vmov	r0, s0
 8004cae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004cb2:	e7d1      	b.n	8004c58 <sin+0x30>
 8004cb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004cb8:	ed9d 0b00 	vldr	d0, [sp]
 8004cbc:	f000 fa18 	bl	80050f0 <__kernel_cos>
 8004cc0:	e7f1      	b.n	8004ca6 <sin+0x7e>
 8004cc2:	bf00      	nop
 8004cc4:	f3af 8000 	nop.w
	...
 8004cd0:	3fe921fb 	.word	0x3fe921fb
 8004cd4:	7fefffff 	.word	0x7fefffff

08004cd8 <__ieee754_rem_pio2>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	ed2d 8b02 	vpush	{d8}
 8004ce0:	ec55 4b10 	vmov	r4, r5, d0
 8004ce4:	4bca      	ldr	r3, [pc, #808]	; (8005010 <__ieee754_rem_pio2+0x338>)
 8004ce6:	b08b      	sub	sp, #44	; 0x2c
 8004ce8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004cec:	4598      	cmp	r8, r3
 8004cee:	4682      	mov	sl, r0
 8004cf0:	9502      	str	r5, [sp, #8]
 8004cf2:	dc08      	bgt.n	8004d06 <__ieee754_rem_pio2+0x2e>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	ed80 0b00 	vstr	d0, [r0]
 8004cfc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d00:	f04f 0b00 	mov.w	fp, #0
 8004d04:	e028      	b.n	8004d58 <__ieee754_rem_pio2+0x80>
 8004d06:	4bc3      	ldr	r3, [pc, #780]	; (8005014 <__ieee754_rem_pio2+0x33c>)
 8004d08:	4598      	cmp	r8, r3
 8004d0a:	dc78      	bgt.n	8004dfe <__ieee754_rem_pio2+0x126>
 8004d0c:	9b02      	ldr	r3, [sp, #8]
 8004d0e:	4ec2      	ldr	r6, [pc, #776]	; (8005018 <__ieee754_rem_pio2+0x340>)
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	ee10 0a10 	vmov	r0, s0
 8004d16:	a3b0      	add	r3, pc, #704	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x300>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	dd39      	ble.n	8004d94 <__ieee754_rem_pio2+0xbc>
 8004d20:	f7fb fa7e 	bl	8000220 <__aeabi_dsub>
 8004d24:	45b0      	cmp	r8, r6
 8004d26:	4604      	mov	r4, r0
 8004d28:	460d      	mov	r5, r1
 8004d2a:	d01b      	beq.n	8004d64 <__ieee754_rem_pio2+0x8c>
 8004d2c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x308>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f7fb fa75 	bl	8000220 <__aeabi_dsub>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	e9ca 2300 	strd	r2, r3, [sl]
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fa6d 	bl	8000220 <__aeabi_dsub>
 8004d46:	a3a6      	add	r3, pc, #664	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x308>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f7fb fa68 	bl	8000220 <__aeabi_dsub>
 8004d50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d54:	f04f 0b01 	mov.w	fp, #1
 8004d58:	4658      	mov	r0, fp
 8004d5a:	b00b      	add	sp, #44	; 0x2c
 8004d5c:	ecbd 8b02 	vpop	{d8}
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d64:	a3a0      	add	r3, pc, #640	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x310>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f7fb fa59 	bl	8000220 <__aeabi_dsub>
 8004d6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x318>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	4604      	mov	r4, r0
 8004d76:	460d      	mov	r5, r1
 8004d78:	f7fb fa52 	bl	8000220 <__aeabi_dsub>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	e9ca 2300 	strd	r2, r3, [sl]
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7fb fa4a 	bl	8000220 <__aeabi_dsub>
 8004d8c:	a398      	add	r3, pc, #608	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x318>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	e7db      	b.n	8004d4c <__ieee754_rem_pio2+0x74>
 8004d94:	f7fb fa46 	bl	8000224 <__adddf3>
 8004d98:	45b0      	cmp	r8, r6
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	d016      	beq.n	8004dce <__ieee754_rem_pio2+0xf6>
 8004da0:	a38f      	add	r3, pc, #572	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x308>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fa3d 	bl	8000224 <__adddf3>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	e9ca 2300 	strd	r2, r3, [sl]
 8004db2:	4620      	mov	r0, r4
 8004db4:	4629      	mov	r1, r5
 8004db6:	f7fb fa33 	bl	8000220 <__aeabi_dsub>
 8004dba:	a389      	add	r3, pc, #548	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x308>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fa30 	bl	8000224 <__adddf3>
 8004dc4:	f04f 3bff 	mov.w	fp, #4294967295
 8004dc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004dcc:	e7c4      	b.n	8004d58 <__ieee754_rem_pio2+0x80>
 8004dce:	a386      	add	r3, pc, #536	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x310>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb fa26 	bl	8000224 <__adddf3>
 8004dd8:	a385      	add	r3, pc, #532	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x318>)
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	f7fb fa1f 	bl	8000224 <__adddf3>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	e9ca 2300 	strd	r2, r3, [sl]
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fa15 	bl	8000220 <__aeabi_dsub>
 8004df6:	a37e      	add	r3, pc, #504	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x318>)
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	e7e0      	b.n	8004dc0 <__ieee754_rem_pio2+0xe8>
 8004dfe:	4b87      	ldr	r3, [pc, #540]	; (800501c <__ieee754_rem_pio2+0x344>)
 8004e00:	4598      	cmp	r8, r3
 8004e02:	f300 80d9 	bgt.w	8004fb8 <__ieee754_rem_pio2+0x2e0>
 8004e06:	f000 fe49 	bl	8005a9c <fabs>
 8004e0a:	ec55 4b10 	vmov	r4, r5, d0
 8004e0e:	ee10 0a10 	vmov	r0, s0
 8004e12:	a379      	add	r3, pc, #484	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x320>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f7fb fbb9 	bl	8000590 <__aeabi_dmul>
 8004e1e:	4b80      	ldr	r3, [pc, #512]	; (8005020 <__ieee754_rem_pio2+0x348>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	f7fb f9ff 	bl	8000224 <__adddf3>
 8004e26:	f7fb fe4d 	bl	8000ac4 <__aeabi_d2iz>
 8004e2a:	4683      	mov	fp, r0
 8004e2c:	f7fb fb46 	bl	80004bc <__aeabi_i2d>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	ec43 2b18 	vmov	d8, r2, r3
 8004e38:	a367      	add	r3, pc, #412	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x300>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb fba7 	bl	8000590 <__aeabi_dmul>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f7fb f9e9 	bl	8000220 <__aeabi_dsub>
 8004e4e:	a364      	add	r3, pc, #400	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x308>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	4606      	mov	r6, r0
 8004e56:	460f      	mov	r7, r1
 8004e58:	ec51 0b18 	vmov	r0, r1, d8
 8004e5c:	f7fb fb98 	bl	8000590 <__aeabi_dmul>
 8004e60:	f1bb 0f1f 	cmp.w	fp, #31
 8004e64:	4604      	mov	r4, r0
 8004e66:	460d      	mov	r5, r1
 8004e68:	dc0d      	bgt.n	8004e86 <__ieee754_rem_pio2+0x1ae>
 8004e6a:	4b6e      	ldr	r3, [pc, #440]	; (8005024 <__ieee754_rem_pio2+0x34c>)
 8004e6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	4543      	cmp	r3, r8
 8004e76:	d006      	beq.n	8004e86 <__ieee754_rem_pio2+0x1ae>
 8004e78:	4622      	mov	r2, r4
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4639      	mov	r1, r7
 8004e80:	f7fb f9ce 	bl	8000220 <__aeabi_dsub>
 8004e84:	e00f      	b.n	8004ea6 <__ieee754_rem_pio2+0x1ce>
 8004e86:	462b      	mov	r3, r5
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	f7fb f9c7 	bl	8000220 <__aeabi_dsub>
 8004e92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004ea0:	f1b8 0f10 	cmp.w	r8, #16
 8004ea4:	dc02      	bgt.n	8004eac <__ieee754_rem_pio2+0x1d4>
 8004ea6:	e9ca 0100 	strd	r0, r1, [sl]
 8004eaa:	e039      	b.n	8004f20 <__ieee754_rem_pio2+0x248>
 8004eac:	a34e      	add	r3, pc, #312	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x310>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	ec51 0b18 	vmov	r0, r1, d8
 8004eb6:	f7fb fb6b 	bl	8000590 <__aeabi_dmul>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	460d      	mov	r5, r1
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	f7fb f9ab 	bl	8000220 <__aeabi_dsub>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4680      	mov	r8, r0
 8004ed0:	4689      	mov	r9, r1
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f7fb f9a3 	bl	8000220 <__aeabi_dsub>
 8004eda:	4622      	mov	r2, r4
 8004edc:	462b      	mov	r3, r5
 8004ede:	f7fb f99f 	bl	8000220 <__aeabi_dsub>
 8004ee2:	a343      	add	r3, pc, #268	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x318>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	4604      	mov	r4, r0
 8004eea:	460d      	mov	r5, r1
 8004eec:	ec51 0b18 	vmov	r0, r1, d8
 8004ef0:	f7fb fb4e 	bl	8000590 <__aeabi_dmul>
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	f7fb f992 	bl	8000220 <__aeabi_dsub>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	4640      	mov	r0, r8
 8004f06:	4649      	mov	r1, r9
 8004f08:	f7fb f98a 	bl	8000220 <__aeabi_dsub>
 8004f0c:	9a03      	ldr	r2, [sp, #12]
 8004f0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b31      	cmp	r3, #49	; 0x31
 8004f16:	dc24      	bgt.n	8004f62 <__ieee754_rem_pio2+0x28a>
 8004f18:	e9ca 0100 	strd	r0, r1, [sl]
 8004f1c:	4646      	mov	r6, r8
 8004f1e:	464f      	mov	r7, r9
 8004f20:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f24:	4630      	mov	r0, r6
 8004f26:	4642      	mov	r2, r8
 8004f28:	464b      	mov	r3, r9
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb f978 	bl	8000220 <__aeabi_dsub>
 8004f30:	462b      	mov	r3, r5
 8004f32:	4622      	mov	r2, r4
 8004f34:	f7fb f974 	bl	8000220 <__aeabi_dsub>
 8004f38:	9b02      	ldr	r3, [sp, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f40:	f6bf af0a 	bge.w	8004d58 <__ieee754_rem_pio2+0x80>
 8004f44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f48:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f50:	f8ca 8000 	str.w	r8, [sl]
 8004f54:	f8ca 0008 	str.w	r0, [sl, #8]
 8004f58:	f8ca 300c 	str.w	r3, [sl, #12]
 8004f5c:	f1cb 0b00 	rsb	fp, fp, #0
 8004f60:	e6fa      	b.n	8004d58 <__ieee754_rem_pio2+0x80>
 8004f62:	a327      	add	r3, pc, #156	; (adr r3, 8005000 <__ieee754_rem_pio2+0x328>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	ec51 0b18 	vmov	r0, r1, d8
 8004f6c:	f7fb fb10 	bl	8000590 <__aeabi_dmul>
 8004f70:	4604      	mov	r4, r0
 8004f72:	460d      	mov	r5, r1
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f7fb f950 	bl	8000220 <__aeabi_dsub>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	4640      	mov	r0, r8
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	f7fb f948 	bl	8000220 <__aeabi_dsub>
 8004f90:	4622      	mov	r2, r4
 8004f92:	462b      	mov	r3, r5
 8004f94:	f7fb f944 	bl	8000220 <__aeabi_dsub>
 8004f98:	a31b      	add	r3, pc, #108	; (adr r3, 8005008 <__ieee754_rem_pio2+0x330>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	ec51 0b18 	vmov	r0, r1, d8
 8004fa6:	f7fb faf3 	bl	8000590 <__aeabi_dmul>
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	f7fb f937 	bl	8000220 <__aeabi_dsub>
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	460d      	mov	r5, r1
 8004fb6:	e75f      	b.n	8004e78 <__ieee754_rem_pio2+0x1a0>
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <__ieee754_rem_pio2+0x350>)
 8004fba:	4598      	cmp	r8, r3
 8004fbc:	dd36      	ble.n	800502c <__ieee754_rem_pio2+0x354>
 8004fbe:	ee10 2a10 	vmov	r2, s0
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	f7fb f92a 	bl	8000220 <__aeabi_dsub>
 8004fcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004fd0:	e9ca 0100 	strd	r0, r1, [sl]
 8004fd4:	e694      	b.n	8004d00 <__ieee754_rem_pio2+0x28>
 8004fd6:	bf00      	nop
 8004fd8:	54400000 	.word	0x54400000
 8004fdc:	3ff921fb 	.word	0x3ff921fb
 8004fe0:	1a626331 	.word	0x1a626331
 8004fe4:	3dd0b461 	.word	0x3dd0b461
 8004fe8:	1a600000 	.word	0x1a600000
 8004fec:	3dd0b461 	.word	0x3dd0b461
 8004ff0:	2e037073 	.word	0x2e037073
 8004ff4:	3ba3198a 	.word	0x3ba3198a
 8004ff8:	6dc9c883 	.word	0x6dc9c883
 8004ffc:	3fe45f30 	.word	0x3fe45f30
 8005000:	2e000000 	.word	0x2e000000
 8005004:	3ba3198a 	.word	0x3ba3198a
 8005008:	252049c1 	.word	0x252049c1
 800500c:	397b839a 	.word	0x397b839a
 8005010:	3fe921fb 	.word	0x3fe921fb
 8005014:	4002d97b 	.word	0x4002d97b
 8005018:	3ff921fb 	.word	0x3ff921fb
 800501c:	413921fb 	.word	0x413921fb
 8005020:	3fe00000 	.word	0x3fe00000
 8005024:	08005d18 	.word	0x08005d18
 8005028:	7fefffff 	.word	0x7fefffff
 800502c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005030:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005034:	ee10 0a10 	vmov	r0, s0
 8005038:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800503c:	ee10 6a10 	vmov	r6, s0
 8005040:	460f      	mov	r7, r1
 8005042:	f7fb fd3f 	bl	8000ac4 <__aeabi_d2iz>
 8005046:	f7fb fa39 	bl	80004bc <__aeabi_i2d>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4630      	mov	r0, r6
 8005050:	4639      	mov	r1, r7
 8005052:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005056:	f7fb f8e3 	bl	8000220 <__aeabi_dsub>
 800505a:	4b23      	ldr	r3, [pc, #140]	; (80050e8 <__ieee754_rem_pio2+0x410>)
 800505c:	2200      	movs	r2, #0
 800505e:	f7fb fa97 	bl	8000590 <__aeabi_dmul>
 8005062:	460f      	mov	r7, r1
 8005064:	4606      	mov	r6, r0
 8005066:	f7fb fd2d 	bl	8000ac4 <__aeabi_d2iz>
 800506a:	f7fb fa27 	bl	80004bc <__aeabi_i2d>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4630      	mov	r0, r6
 8005074:	4639      	mov	r1, r7
 8005076:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800507a:	f7fb f8d1 	bl	8000220 <__aeabi_dsub>
 800507e:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <__ieee754_rem_pio2+0x410>)
 8005080:	2200      	movs	r2, #0
 8005082:	f7fb fa85 	bl	8000590 <__aeabi_dmul>
 8005086:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800508a:	ad04      	add	r5, sp, #16
 800508c:	f04f 0803 	mov.w	r8, #3
 8005090:	46a9      	mov	r9, r5
 8005092:	2600      	movs	r6, #0
 8005094:	2700      	movs	r7, #0
 8005096:	4632      	mov	r2, r6
 8005098:	463b      	mov	r3, r7
 800509a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800509e:	46c3      	mov	fp, r8
 80050a0:	3d08      	subs	r5, #8
 80050a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80050a6:	f7fb fcdb 	bl	8000a60 <__aeabi_dcmpeq>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d1f3      	bne.n	8005096 <__ieee754_rem_pio2+0x3be>
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <__ieee754_rem_pio2+0x414>)
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	2302      	movs	r3, #2
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4622      	mov	r2, r4
 80050b8:	465b      	mov	r3, fp
 80050ba:	4651      	mov	r1, sl
 80050bc:	4648      	mov	r0, r9
 80050be:	f000 f8df 	bl	8005280 <__kernel_rem_pio2>
 80050c2:	9b02      	ldr	r3, [sp, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	4683      	mov	fp, r0
 80050c8:	f6bf ae46 	bge.w	8004d58 <__ieee754_rem_pio2+0x80>
 80050cc:	e9da 2100 	ldrd	r2, r1, [sl]
 80050d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050d4:	e9ca 2300 	strd	r2, r3, [sl]
 80050d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80050dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80050e4:	e73a      	b.n	8004f5c <__ieee754_rem_pio2+0x284>
 80050e6:	bf00      	nop
 80050e8:	41700000 	.word	0x41700000
 80050ec:	08005d98 	.word	0x08005d98

080050f0 <__kernel_cos>:
 80050f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	ec57 6b10 	vmov	r6, r7, d0
 80050f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80050fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005100:	ed8d 1b00 	vstr	d1, [sp]
 8005104:	da07      	bge.n	8005116 <__kernel_cos+0x26>
 8005106:	ee10 0a10 	vmov	r0, s0
 800510a:	4639      	mov	r1, r7
 800510c:	f7fb fcda 	bl	8000ac4 <__aeabi_d2iz>
 8005110:	2800      	cmp	r0, #0
 8005112:	f000 8088 	beq.w	8005226 <__kernel_cos+0x136>
 8005116:	4632      	mov	r2, r6
 8005118:	463b      	mov	r3, r7
 800511a:	4630      	mov	r0, r6
 800511c:	4639      	mov	r1, r7
 800511e:	f7fb fa37 	bl	8000590 <__aeabi_dmul>
 8005122:	4b51      	ldr	r3, [pc, #324]	; (8005268 <__kernel_cos+0x178>)
 8005124:	2200      	movs	r2, #0
 8005126:	4604      	mov	r4, r0
 8005128:	460d      	mov	r5, r1
 800512a:	f7fb fa31 	bl	8000590 <__aeabi_dmul>
 800512e:	a340      	add	r3, pc, #256	; (adr r3, 8005230 <__kernel_cos+0x140>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	4682      	mov	sl, r0
 8005136:	468b      	mov	fp, r1
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	f7fb fa28 	bl	8000590 <__aeabi_dmul>
 8005140:	a33d      	add	r3, pc, #244	; (adr r3, 8005238 <__kernel_cos+0x148>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f7fb f86d 	bl	8000224 <__adddf3>
 800514a:	4622      	mov	r2, r4
 800514c:	462b      	mov	r3, r5
 800514e:	f7fb fa1f 	bl	8000590 <__aeabi_dmul>
 8005152:	a33b      	add	r3, pc, #236	; (adr r3, 8005240 <__kernel_cos+0x150>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f7fb f862 	bl	8000220 <__aeabi_dsub>
 800515c:	4622      	mov	r2, r4
 800515e:	462b      	mov	r3, r5
 8005160:	f7fb fa16 	bl	8000590 <__aeabi_dmul>
 8005164:	a338      	add	r3, pc, #224	; (adr r3, 8005248 <__kernel_cos+0x158>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fb f85b 	bl	8000224 <__adddf3>
 800516e:	4622      	mov	r2, r4
 8005170:	462b      	mov	r3, r5
 8005172:	f7fb fa0d 	bl	8000590 <__aeabi_dmul>
 8005176:	a336      	add	r3, pc, #216	; (adr r3, 8005250 <__kernel_cos+0x160>)
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f7fb f850 	bl	8000220 <__aeabi_dsub>
 8005180:	4622      	mov	r2, r4
 8005182:	462b      	mov	r3, r5
 8005184:	f7fb fa04 	bl	8000590 <__aeabi_dmul>
 8005188:	a333      	add	r3, pc, #204	; (adr r3, 8005258 <__kernel_cos+0x168>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb f849 	bl	8000224 <__adddf3>
 8005192:	4622      	mov	r2, r4
 8005194:	462b      	mov	r3, r5
 8005196:	f7fb f9fb 	bl	8000590 <__aeabi_dmul>
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	f7fb f9f7 	bl	8000590 <__aeabi_dmul>
 80051a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051a6:	4604      	mov	r4, r0
 80051a8:	460d      	mov	r5, r1
 80051aa:	4630      	mov	r0, r6
 80051ac:	4639      	mov	r1, r7
 80051ae:	f7fb f9ef 	bl	8000590 <__aeabi_dmul>
 80051b2:	460b      	mov	r3, r1
 80051b4:	4602      	mov	r2, r0
 80051b6:	4629      	mov	r1, r5
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7fb f831 	bl	8000220 <__aeabi_dsub>
 80051be:	4b2b      	ldr	r3, [pc, #172]	; (800526c <__kernel_cos+0x17c>)
 80051c0:	4598      	cmp	r8, r3
 80051c2:	4606      	mov	r6, r0
 80051c4:	460f      	mov	r7, r1
 80051c6:	dc10      	bgt.n	80051ea <__kernel_cos+0xfa>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4650      	mov	r0, sl
 80051ce:	4659      	mov	r1, fp
 80051d0:	f7fb f826 	bl	8000220 <__aeabi_dsub>
 80051d4:	460b      	mov	r3, r1
 80051d6:	4926      	ldr	r1, [pc, #152]	; (8005270 <__kernel_cos+0x180>)
 80051d8:	4602      	mov	r2, r0
 80051da:	2000      	movs	r0, #0
 80051dc:	f7fb f820 	bl	8000220 <__aeabi_dsub>
 80051e0:	ec41 0b10 	vmov	d0, r0, r1
 80051e4:	b003      	add	sp, #12
 80051e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ea:	4b22      	ldr	r3, [pc, #136]	; (8005274 <__kernel_cos+0x184>)
 80051ec:	4920      	ldr	r1, [pc, #128]	; (8005270 <__kernel_cos+0x180>)
 80051ee:	4598      	cmp	r8, r3
 80051f0:	bfcc      	ite	gt
 80051f2:	4d21      	ldrgt	r5, [pc, #132]	; (8005278 <__kernel_cos+0x188>)
 80051f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80051f8:	2400      	movs	r4, #0
 80051fa:	4622      	mov	r2, r4
 80051fc:	462b      	mov	r3, r5
 80051fe:	2000      	movs	r0, #0
 8005200:	f7fb f80e 	bl	8000220 <__aeabi_dsub>
 8005204:	4622      	mov	r2, r4
 8005206:	4680      	mov	r8, r0
 8005208:	4689      	mov	r9, r1
 800520a:	462b      	mov	r3, r5
 800520c:	4650      	mov	r0, sl
 800520e:	4659      	mov	r1, fp
 8005210:	f7fb f806 	bl	8000220 <__aeabi_dsub>
 8005214:	4632      	mov	r2, r6
 8005216:	463b      	mov	r3, r7
 8005218:	f7fb f802 	bl	8000220 <__aeabi_dsub>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4640      	mov	r0, r8
 8005222:	4649      	mov	r1, r9
 8005224:	e7da      	b.n	80051dc <__kernel_cos+0xec>
 8005226:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005260 <__kernel_cos+0x170>
 800522a:	e7db      	b.n	80051e4 <__kernel_cos+0xf4>
 800522c:	f3af 8000 	nop.w
 8005230:	be8838d4 	.word	0xbe8838d4
 8005234:	bda8fae9 	.word	0xbda8fae9
 8005238:	bdb4b1c4 	.word	0xbdb4b1c4
 800523c:	3e21ee9e 	.word	0x3e21ee9e
 8005240:	809c52ad 	.word	0x809c52ad
 8005244:	3e927e4f 	.word	0x3e927e4f
 8005248:	19cb1590 	.word	0x19cb1590
 800524c:	3efa01a0 	.word	0x3efa01a0
 8005250:	16c15177 	.word	0x16c15177
 8005254:	3f56c16c 	.word	0x3f56c16c
 8005258:	5555554c 	.word	0x5555554c
 800525c:	3fa55555 	.word	0x3fa55555
 8005260:	00000000 	.word	0x00000000
 8005264:	3ff00000 	.word	0x3ff00000
 8005268:	3fe00000 	.word	0x3fe00000
 800526c:	3fd33332 	.word	0x3fd33332
 8005270:	3ff00000 	.word	0x3ff00000
 8005274:	3fe90000 	.word	0x3fe90000
 8005278:	3fd20000 	.word	0x3fd20000
 800527c:	00000000 	.word	0x00000000

08005280 <__kernel_rem_pio2>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	ed2d 8b02 	vpush	{d8}
 8005288:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800528c:	f112 0f14 	cmn.w	r2, #20
 8005290:	9308      	str	r3, [sp, #32]
 8005292:	9101      	str	r1, [sp, #4]
 8005294:	4bc4      	ldr	r3, [pc, #784]	; (80055a8 <__kernel_rem_pio2+0x328>)
 8005296:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005298:	900b      	str	r0, [sp, #44]	; 0x2c
 800529a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800529e:	9302      	str	r3, [sp, #8]
 80052a0:	9b08      	ldr	r3, [sp, #32]
 80052a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80052a6:	bfa8      	it	ge
 80052a8:	1ed4      	subge	r4, r2, #3
 80052aa:	9306      	str	r3, [sp, #24]
 80052ac:	bfb2      	itee	lt
 80052ae:	2400      	movlt	r4, #0
 80052b0:	2318      	movge	r3, #24
 80052b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80052b6:	f06f 0317 	mvn.w	r3, #23
 80052ba:	fb04 3303 	mla	r3, r4, r3, r3
 80052be:	eb03 0a02 	add.w	sl, r3, r2
 80052c2:	9b02      	ldr	r3, [sp, #8]
 80052c4:	9a06      	ldr	r2, [sp, #24]
 80052c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005598 <__kernel_rem_pio2+0x318>
 80052ca:	eb03 0802 	add.w	r8, r3, r2
 80052ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80052d0:	1aa7      	subs	r7, r4, r2
 80052d2:	ae22      	add	r6, sp, #136	; 0x88
 80052d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80052d8:	2500      	movs	r5, #0
 80052da:	4545      	cmp	r5, r8
 80052dc:	dd13      	ble.n	8005306 <__kernel_rem_pio2+0x86>
 80052de:	9b08      	ldr	r3, [sp, #32]
 80052e0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005598 <__kernel_rem_pio2+0x318>
 80052e4:	aa22      	add	r2, sp, #136	; 0x88
 80052e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80052ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80052ee:	f04f 0800 	mov.w	r8, #0
 80052f2:	9b02      	ldr	r3, [sp, #8]
 80052f4:	4598      	cmp	r8, r3
 80052f6:	dc2f      	bgt.n	8005358 <__kernel_rem_pio2+0xd8>
 80052f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80052fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005300:	462f      	mov	r7, r5
 8005302:	2600      	movs	r6, #0
 8005304:	e01b      	b.n	800533e <__kernel_rem_pio2+0xbe>
 8005306:	42ef      	cmn	r7, r5
 8005308:	d407      	bmi.n	800531a <__kernel_rem_pio2+0x9a>
 800530a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800530e:	f7fb f8d5 	bl	80004bc <__aeabi_i2d>
 8005312:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005316:	3501      	adds	r5, #1
 8005318:	e7df      	b.n	80052da <__kernel_rem_pio2+0x5a>
 800531a:	ec51 0b18 	vmov	r0, r1, d8
 800531e:	e7f8      	b.n	8005312 <__kernel_rem_pio2+0x92>
 8005320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005324:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005328:	f7fb f932 	bl	8000590 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005334:	f7fa ff76 	bl	8000224 <__adddf3>
 8005338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800533c:	3601      	adds	r6, #1
 800533e:	9b06      	ldr	r3, [sp, #24]
 8005340:	429e      	cmp	r6, r3
 8005342:	f1a7 0708 	sub.w	r7, r7, #8
 8005346:	ddeb      	ble.n	8005320 <__kernel_rem_pio2+0xa0>
 8005348:	ed9d 7b04 	vldr	d7, [sp, #16]
 800534c:	f108 0801 	add.w	r8, r8, #1
 8005350:	ecab 7b02 	vstmia	fp!, {d7}
 8005354:	3508      	adds	r5, #8
 8005356:	e7cc      	b.n	80052f2 <__kernel_rem_pio2+0x72>
 8005358:	9b02      	ldr	r3, [sp, #8]
 800535a:	aa0e      	add	r2, sp, #56	; 0x38
 800535c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005360:	930d      	str	r3, [sp, #52]	; 0x34
 8005362:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005364:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005368:	9c02      	ldr	r4, [sp, #8]
 800536a:	930c      	str	r3, [sp, #48]	; 0x30
 800536c:	00e3      	lsls	r3, r4, #3
 800536e:	930a      	str	r3, [sp, #40]	; 0x28
 8005370:	ab9a      	add	r3, sp, #616	; 0x268
 8005372:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005376:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800537a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800537e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005380:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005384:	46c3      	mov	fp, r8
 8005386:	46a1      	mov	r9, r4
 8005388:	f1b9 0f00 	cmp.w	r9, #0
 800538c:	f1a5 0508 	sub.w	r5, r5, #8
 8005390:	dc77      	bgt.n	8005482 <__kernel_rem_pio2+0x202>
 8005392:	ec47 6b10 	vmov	d0, r6, r7
 8005396:	4650      	mov	r0, sl
 8005398:	f000 fc0a 	bl	8005bb0 <scalbn>
 800539c:	ec57 6b10 	vmov	r6, r7, d0
 80053a0:	2200      	movs	r2, #0
 80053a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80053a6:	ee10 0a10 	vmov	r0, s0
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fb f8f0 	bl	8000590 <__aeabi_dmul>
 80053b0:	ec41 0b10 	vmov	d0, r0, r1
 80053b4:	f000 fb7c 	bl	8005ab0 <floor>
 80053b8:	4b7c      	ldr	r3, [pc, #496]	; (80055ac <__kernel_rem_pio2+0x32c>)
 80053ba:	ec51 0b10 	vmov	r0, r1, d0
 80053be:	2200      	movs	r2, #0
 80053c0:	f7fb f8e6 	bl	8000590 <__aeabi_dmul>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fa ff28 	bl	8000220 <__aeabi_dsub>
 80053d0:	460f      	mov	r7, r1
 80053d2:	4606      	mov	r6, r0
 80053d4:	f7fb fb76 	bl	8000ac4 <__aeabi_d2iz>
 80053d8:	9004      	str	r0, [sp, #16]
 80053da:	f7fb f86f 	bl	80004bc <__aeabi_i2d>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4630      	mov	r0, r6
 80053e4:	4639      	mov	r1, r7
 80053e6:	f7fa ff1b 	bl	8000220 <__aeabi_dsub>
 80053ea:	f1ba 0f00 	cmp.w	sl, #0
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	dd6d      	ble.n	80054d0 <__kernel_rem_pio2+0x250>
 80053f4:	1e62      	subs	r2, r4, #1
 80053f6:	ab0e      	add	r3, sp, #56	; 0x38
 80053f8:	9d04      	ldr	r5, [sp, #16]
 80053fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80053fe:	f1ca 0118 	rsb	r1, sl, #24
 8005402:	fa40 f301 	asr.w	r3, r0, r1
 8005406:	441d      	add	r5, r3
 8005408:	408b      	lsls	r3, r1
 800540a:	1ac0      	subs	r0, r0, r3
 800540c:	ab0e      	add	r3, sp, #56	; 0x38
 800540e:	9504      	str	r5, [sp, #16]
 8005410:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005414:	f1ca 0317 	rsb	r3, sl, #23
 8005418:	fa40 fb03 	asr.w	fp, r0, r3
 800541c:	f1bb 0f00 	cmp.w	fp, #0
 8005420:	dd65      	ble.n	80054ee <__kernel_rem_pio2+0x26e>
 8005422:	9b04      	ldr	r3, [sp, #16]
 8005424:	2200      	movs	r2, #0
 8005426:	3301      	adds	r3, #1
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	4615      	mov	r5, r2
 800542c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005430:	4294      	cmp	r4, r2
 8005432:	f300 809c 	bgt.w	800556e <__kernel_rem_pio2+0x2ee>
 8005436:	f1ba 0f00 	cmp.w	sl, #0
 800543a:	dd07      	ble.n	800544c <__kernel_rem_pio2+0x1cc>
 800543c:	f1ba 0f01 	cmp.w	sl, #1
 8005440:	f000 80c0 	beq.w	80055c4 <__kernel_rem_pio2+0x344>
 8005444:	f1ba 0f02 	cmp.w	sl, #2
 8005448:	f000 80c6 	beq.w	80055d8 <__kernel_rem_pio2+0x358>
 800544c:	f1bb 0f02 	cmp.w	fp, #2
 8005450:	d14d      	bne.n	80054ee <__kernel_rem_pio2+0x26e>
 8005452:	4632      	mov	r2, r6
 8005454:	463b      	mov	r3, r7
 8005456:	4956      	ldr	r1, [pc, #344]	; (80055b0 <__kernel_rem_pio2+0x330>)
 8005458:	2000      	movs	r0, #0
 800545a:	f7fa fee1 	bl	8000220 <__aeabi_dsub>
 800545e:	4606      	mov	r6, r0
 8005460:	460f      	mov	r7, r1
 8005462:	2d00      	cmp	r5, #0
 8005464:	d043      	beq.n	80054ee <__kernel_rem_pio2+0x26e>
 8005466:	4650      	mov	r0, sl
 8005468:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80055a0 <__kernel_rem_pio2+0x320>
 800546c:	f000 fba0 	bl	8005bb0 <scalbn>
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	ec53 2b10 	vmov	r2, r3, d0
 8005478:	f7fa fed2 	bl	8000220 <__aeabi_dsub>
 800547c:	4606      	mov	r6, r0
 800547e:	460f      	mov	r7, r1
 8005480:	e035      	b.n	80054ee <__kernel_rem_pio2+0x26e>
 8005482:	4b4c      	ldr	r3, [pc, #304]	; (80055b4 <__kernel_rem_pio2+0x334>)
 8005484:	2200      	movs	r2, #0
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fb f881 	bl	8000590 <__aeabi_dmul>
 800548e:	f7fb fb19 	bl	8000ac4 <__aeabi_d2iz>
 8005492:	f7fb f813 	bl	80004bc <__aeabi_i2d>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	ec43 2b18 	vmov	d8, r2, r3
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <__kernel_rem_pio2+0x338>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	f7fb f875 	bl	8000590 <__aeabi_dmul>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4630      	mov	r0, r6
 80054ac:	4639      	mov	r1, r7
 80054ae:	f7fa feb7 	bl	8000220 <__aeabi_dsub>
 80054b2:	f7fb fb07 	bl	8000ac4 <__aeabi_d2iz>
 80054b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ba:	f84b 0b04 	str.w	r0, [fp], #4
 80054be:	ec51 0b18 	vmov	r0, r1, d8
 80054c2:	f7fa feaf 	bl	8000224 <__adddf3>
 80054c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80054ca:	4606      	mov	r6, r0
 80054cc:	460f      	mov	r7, r1
 80054ce:	e75b      	b.n	8005388 <__kernel_rem_pio2+0x108>
 80054d0:	d106      	bne.n	80054e0 <__kernel_rem_pio2+0x260>
 80054d2:	1e63      	subs	r3, r4, #1
 80054d4:	aa0e      	add	r2, sp, #56	; 0x38
 80054d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80054de:	e79d      	b.n	800541c <__kernel_rem_pio2+0x19c>
 80054e0:	4b36      	ldr	r3, [pc, #216]	; (80055bc <__kernel_rem_pio2+0x33c>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	f7fb fada 	bl	8000a9c <__aeabi_dcmpge>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d13d      	bne.n	8005568 <__kernel_rem_pio2+0x2e8>
 80054ec:	4683      	mov	fp, r0
 80054ee:	2200      	movs	r2, #0
 80054f0:	2300      	movs	r3, #0
 80054f2:	4630      	mov	r0, r6
 80054f4:	4639      	mov	r1, r7
 80054f6:	f7fb fab3 	bl	8000a60 <__aeabi_dcmpeq>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f000 80c0 	beq.w	8005680 <__kernel_rem_pio2+0x400>
 8005500:	1e65      	subs	r5, r4, #1
 8005502:	462b      	mov	r3, r5
 8005504:	2200      	movs	r2, #0
 8005506:	9902      	ldr	r1, [sp, #8]
 8005508:	428b      	cmp	r3, r1
 800550a:	da6c      	bge.n	80055e6 <__kernel_rem_pio2+0x366>
 800550c:	2a00      	cmp	r2, #0
 800550e:	f000 8089 	beq.w	8005624 <__kernel_rem_pio2+0x3a4>
 8005512:	ab0e      	add	r3, sp, #56	; 0x38
 8005514:	f1aa 0a18 	sub.w	sl, sl, #24
 8005518:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80ad 	beq.w	800567c <__kernel_rem_pio2+0x3fc>
 8005522:	4650      	mov	r0, sl
 8005524:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80055a0 <__kernel_rem_pio2+0x320>
 8005528:	f000 fb42 	bl	8005bb0 <scalbn>
 800552c:	ab9a      	add	r3, sp, #616	; 0x268
 800552e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005532:	ec57 6b10 	vmov	r6, r7, d0
 8005536:	00ec      	lsls	r4, r5, #3
 8005538:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800553c:	46aa      	mov	sl, r5
 800553e:	f1ba 0f00 	cmp.w	sl, #0
 8005542:	f280 80d6 	bge.w	80056f2 <__kernel_rem_pio2+0x472>
 8005546:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005598 <__kernel_rem_pio2+0x318>
 800554a:	462e      	mov	r6, r5
 800554c:	2e00      	cmp	r6, #0
 800554e:	f2c0 8104 	blt.w	800575a <__kernel_rem_pio2+0x4da>
 8005552:	ab72      	add	r3, sp, #456	; 0x1c8
 8005554:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005558:	f8df a064 	ldr.w	sl, [pc, #100]	; 80055c0 <__kernel_rem_pio2+0x340>
 800555c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005560:	f04f 0800 	mov.w	r8, #0
 8005564:	1baf      	subs	r7, r5, r6
 8005566:	e0ea      	b.n	800573e <__kernel_rem_pio2+0x4be>
 8005568:	f04f 0b02 	mov.w	fp, #2
 800556c:	e759      	b.n	8005422 <__kernel_rem_pio2+0x1a2>
 800556e:	f8d8 3000 	ldr.w	r3, [r8]
 8005572:	b955      	cbnz	r5, 800558a <__kernel_rem_pio2+0x30a>
 8005574:	b123      	cbz	r3, 8005580 <__kernel_rem_pio2+0x300>
 8005576:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800557a:	f8c8 3000 	str.w	r3, [r8]
 800557e:	2301      	movs	r3, #1
 8005580:	3201      	adds	r2, #1
 8005582:	f108 0804 	add.w	r8, r8, #4
 8005586:	461d      	mov	r5, r3
 8005588:	e752      	b.n	8005430 <__kernel_rem_pio2+0x1b0>
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	f8c8 3000 	str.w	r3, [r8]
 8005590:	462b      	mov	r3, r5
 8005592:	e7f5      	b.n	8005580 <__kernel_rem_pio2+0x300>
 8005594:	f3af 8000 	nop.w
	...
 80055a4:	3ff00000 	.word	0x3ff00000
 80055a8:	08005ee0 	.word	0x08005ee0
 80055ac:	40200000 	.word	0x40200000
 80055b0:	3ff00000 	.word	0x3ff00000
 80055b4:	3e700000 	.word	0x3e700000
 80055b8:	41700000 	.word	0x41700000
 80055bc:	3fe00000 	.word	0x3fe00000
 80055c0:	08005ea0 	.word	0x08005ea0
 80055c4:	1e62      	subs	r2, r4, #1
 80055c6:	ab0e      	add	r3, sp, #56	; 0x38
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80055d0:	a90e      	add	r1, sp, #56	; 0x38
 80055d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80055d6:	e739      	b.n	800544c <__kernel_rem_pio2+0x1cc>
 80055d8:	1e62      	subs	r2, r4, #1
 80055da:	ab0e      	add	r3, sp, #56	; 0x38
 80055dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80055e4:	e7f4      	b.n	80055d0 <__kernel_rem_pio2+0x350>
 80055e6:	a90e      	add	r1, sp, #56	; 0x38
 80055e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	430a      	orrs	r2, r1
 80055f0:	e789      	b.n	8005506 <__kernel_rem_pio2+0x286>
 80055f2:	3301      	adds	r3, #1
 80055f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80055f8:	2900      	cmp	r1, #0
 80055fa:	d0fa      	beq.n	80055f2 <__kernel_rem_pio2+0x372>
 80055fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005602:	446a      	add	r2, sp
 8005604:	3a98      	subs	r2, #152	; 0x98
 8005606:	920a      	str	r2, [sp, #40]	; 0x28
 8005608:	9a08      	ldr	r2, [sp, #32]
 800560a:	18e3      	adds	r3, r4, r3
 800560c:	18a5      	adds	r5, r4, r2
 800560e:	aa22      	add	r2, sp, #136	; 0x88
 8005610:	f104 0801 	add.w	r8, r4, #1
 8005614:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	4543      	cmp	r3, r8
 800561e:	da04      	bge.n	800562a <__kernel_rem_pio2+0x3aa>
 8005620:	461c      	mov	r4, r3
 8005622:	e6a3      	b.n	800536c <__kernel_rem_pio2+0xec>
 8005624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005626:	2301      	movs	r3, #1
 8005628:	e7e4      	b.n	80055f4 <__kernel_rem_pio2+0x374>
 800562a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800562c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005630:	f7fa ff44 	bl	80004bc <__aeabi_i2d>
 8005634:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800563a:	46ab      	mov	fp, r5
 800563c:	461c      	mov	r4, r3
 800563e:	f04f 0900 	mov.w	r9, #0
 8005642:	2600      	movs	r6, #0
 8005644:	2700      	movs	r7, #0
 8005646:	9b06      	ldr	r3, [sp, #24]
 8005648:	4599      	cmp	r9, r3
 800564a:	dd06      	ble.n	800565a <__kernel_rem_pio2+0x3da>
 800564c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005652:	f108 0801 	add.w	r8, r8, #1
 8005656:	930a      	str	r3, [sp, #40]	; 0x28
 8005658:	e7df      	b.n	800561a <__kernel_rem_pio2+0x39a>
 800565a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800565e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005662:	f7fa ff95 	bl	8000590 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4630      	mov	r0, r6
 800566c:	4639      	mov	r1, r7
 800566e:	f7fa fdd9 	bl	8000224 <__adddf3>
 8005672:	f109 0901 	add.w	r9, r9, #1
 8005676:	4606      	mov	r6, r0
 8005678:	460f      	mov	r7, r1
 800567a:	e7e4      	b.n	8005646 <__kernel_rem_pio2+0x3c6>
 800567c:	3d01      	subs	r5, #1
 800567e:	e748      	b.n	8005512 <__kernel_rem_pio2+0x292>
 8005680:	ec47 6b10 	vmov	d0, r6, r7
 8005684:	f1ca 0000 	rsb	r0, sl, #0
 8005688:	f000 fa92 	bl	8005bb0 <scalbn>
 800568c:	ec57 6b10 	vmov	r6, r7, d0
 8005690:	4ba0      	ldr	r3, [pc, #640]	; (8005914 <__kernel_rem_pio2+0x694>)
 8005692:	ee10 0a10 	vmov	r0, s0
 8005696:	2200      	movs	r2, #0
 8005698:	4639      	mov	r1, r7
 800569a:	f7fb f9ff 	bl	8000a9c <__aeabi_dcmpge>
 800569e:	b1f8      	cbz	r0, 80056e0 <__kernel_rem_pio2+0x460>
 80056a0:	4b9d      	ldr	r3, [pc, #628]	; (8005918 <__kernel_rem_pio2+0x698>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fa ff72 	bl	8000590 <__aeabi_dmul>
 80056ac:	f7fb fa0a 	bl	8000ac4 <__aeabi_d2iz>
 80056b0:	4680      	mov	r8, r0
 80056b2:	f7fa ff03 	bl	80004bc <__aeabi_i2d>
 80056b6:	4b97      	ldr	r3, [pc, #604]	; (8005914 <__kernel_rem_pio2+0x694>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	f7fa ff69 	bl	8000590 <__aeabi_dmul>
 80056be:	460b      	mov	r3, r1
 80056c0:	4602      	mov	r2, r0
 80056c2:	4639      	mov	r1, r7
 80056c4:	4630      	mov	r0, r6
 80056c6:	f7fa fdab 	bl	8000220 <__aeabi_dsub>
 80056ca:	f7fb f9fb 	bl	8000ac4 <__aeabi_d2iz>
 80056ce:	1c65      	adds	r5, r4, #1
 80056d0:	ab0e      	add	r3, sp, #56	; 0x38
 80056d2:	f10a 0a18 	add.w	sl, sl, #24
 80056d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80056de:	e720      	b.n	8005522 <__kernel_rem_pio2+0x2a2>
 80056e0:	4630      	mov	r0, r6
 80056e2:	4639      	mov	r1, r7
 80056e4:	f7fb f9ee 	bl	8000ac4 <__aeabi_d2iz>
 80056e8:	ab0e      	add	r3, sp, #56	; 0x38
 80056ea:	4625      	mov	r5, r4
 80056ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056f0:	e717      	b.n	8005522 <__kernel_rem_pio2+0x2a2>
 80056f2:	ab0e      	add	r3, sp, #56	; 0x38
 80056f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80056f8:	f7fa fee0 	bl	80004bc <__aeabi_i2d>
 80056fc:	4632      	mov	r2, r6
 80056fe:	463b      	mov	r3, r7
 8005700:	f7fa ff46 	bl	8000590 <__aeabi_dmul>
 8005704:	4b84      	ldr	r3, [pc, #528]	; (8005918 <__kernel_rem_pio2+0x698>)
 8005706:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800570a:	2200      	movs	r2, #0
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f7fa ff3e 	bl	8000590 <__aeabi_dmul>
 8005714:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005718:	4606      	mov	r6, r0
 800571a:	460f      	mov	r7, r1
 800571c:	e70f      	b.n	800553e <__kernel_rem_pio2+0x2be>
 800571e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005722:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005726:	f7fa ff33 	bl	8000590 <__aeabi_dmul>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005732:	f7fa fd77 	bl	8000224 <__adddf3>
 8005736:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800573a:	f108 0801 	add.w	r8, r8, #1
 800573e:	9b02      	ldr	r3, [sp, #8]
 8005740:	4598      	cmp	r8, r3
 8005742:	dc01      	bgt.n	8005748 <__kernel_rem_pio2+0x4c8>
 8005744:	45b8      	cmp	r8, r7
 8005746:	ddea      	ble.n	800571e <__kernel_rem_pio2+0x49e>
 8005748:	ed9d 7b06 	vldr	d7, [sp, #24]
 800574c:	ab4a      	add	r3, sp, #296	; 0x128
 800574e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005752:	ed87 7b00 	vstr	d7, [r7]
 8005756:	3e01      	subs	r6, #1
 8005758:	e6f8      	b.n	800554c <__kernel_rem_pio2+0x2cc>
 800575a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800575c:	2b02      	cmp	r3, #2
 800575e:	dc0b      	bgt.n	8005778 <__kernel_rem_pio2+0x4f8>
 8005760:	2b00      	cmp	r3, #0
 8005762:	dc35      	bgt.n	80057d0 <__kernel_rem_pio2+0x550>
 8005764:	d059      	beq.n	800581a <__kernel_rem_pio2+0x59a>
 8005766:	9b04      	ldr	r3, [sp, #16]
 8005768:	f003 0007 	and.w	r0, r3, #7
 800576c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005770:	ecbd 8b02 	vpop	{d8}
 8005774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005778:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800577a:	2b03      	cmp	r3, #3
 800577c:	d1f3      	bne.n	8005766 <__kernel_rem_pio2+0x4e6>
 800577e:	ab4a      	add	r3, sp, #296	; 0x128
 8005780:	4423      	add	r3, r4
 8005782:	9306      	str	r3, [sp, #24]
 8005784:	461c      	mov	r4, r3
 8005786:	469a      	mov	sl, r3
 8005788:	9502      	str	r5, [sp, #8]
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f1aa 0a08 	sub.w	sl, sl, #8
 8005792:	dc6b      	bgt.n	800586c <__kernel_rem_pio2+0x5ec>
 8005794:	46aa      	mov	sl, r5
 8005796:	f1ba 0f01 	cmp.w	sl, #1
 800579a:	f1a4 0408 	sub.w	r4, r4, #8
 800579e:	f300 8085 	bgt.w	80058ac <__kernel_rem_pio2+0x62c>
 80057a2:	9c06      	ldr	r4, [sp, #24]
 80057a4:	2000      	movs	r0, #0
 80057a6:	3408      	adds	r4, #8
 80057a8:	2100      	movs	r1, #0
 80057aa:	2d01      	cmp	r5, #1
 80057ac:	f300 809d 	bgt.w	80058ea <__kernel_rem_pio2+0x66a>
 80057b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80057b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80057b8:	f1bb 0f00 	cmp.w	fp, #0
 80057bc:	f040 809b 	bne.w	80058f6 <__kernel_rem_pio2+0x676>
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	e9c3 5600 	strd	r5, r6, [r3]
 80057c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80057ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80057ce:	e7ca      	b.n	8005766 <__kernel_rem_pio2+0x4e6>
 80057d0:	3408      	adds	r4, #8
 80057d2:	ab4a      	add	r3, sp, #296	; 0x128
 80057d4:	441c      	add	r4, r3
 80057d6:	462e      	mov	r6, r5
 80057d8:	2000      	movs	r0, #0
 80057da:	2100      	movs	r1, #0
 80057dc:	2e00      	cmp	r6, #0
 80057de:	da36      	bge.n	800584e <__kernel_rem_pio2+0x5ce>
 80057e0:	f1bb 0f00 	cmp.w	fp, #0
 80057e4:	d039      	beq.n	800585a <__kernel_rem_pio2+0x5da>
 80057e6:	4602      	mov	r2, r0
 80057e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057ec:	9c01      	ldr	r4, [sp, #4]
 80057ee:	e9c4 2300 	strd	r2, r3, [r4]
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80057fa:	f7fa fd11 	bl	8000220 <__aeabi_dsub>
 80057fe:	ae4c      	add	r6, sp, #304	; 0x130
 8005800:	2401      	movs	r4, #1
 8005802:	42a5      	cmp	r5, r4
 8005804:	da2c      	bge.n	8005860 <__kernel_rem_pio2+0x5e0>
 8005806:	f1bb 0f00 	cmp.w	fp, #0
 800580a:	d002      	beq.n	8005812 <__kernel_rem_pio2+0x592>
 800580c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005810:	4619      	mov	r1, r3
 8005812:	9b01      	ldr	r3, [sp, #4]
 8005814:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005818:	e7a5      	b.n	8005766 <__kernel_rem_pio2+0x4e6>
 800581a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800581e:	eb0d 0403 	add.w	r4, sp, r3
 8005822:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005826:	2000      	movs	r0, #0
 8005828:	2100      	movs	r1, #0
 800582a:	2d00      	cmp	r5, #0
 800582c:	da09      	bge.n	8005842 <__kernel_rem_pio2+0x5c2>
 800582e:	f1bb 0f00 	cmp.w	fp, #0
 8005832:	d002      	beq.n	800583a <__kernel_rem_pio2+0x5ba>
 8005834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005838:	4619      	mov	r1, r3
 800583a:	9b01      	ldr	r3, [sp, #4]
 800583c:	e9c3 0100 	strd	r0, r1, [r3]
 8005840:	e791      	b.n	8005766 <__kernel_rem_pio2+0x4e6>
 8005842:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005846:	f7fa fced 	bl	8000224 <__adddf3>
 800584a:	3d01      	subs	r5, #1
 800584c:	e7ed      	b.n	800582a <__kernel_rem_pio2+0x5aa>
 800584e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005852:	f7fa fce7 	bl	8000224 <__adddf3>
 8005856:	3e01      	subs	r6, #1
 8005858:	e7c0      	b.n	80057dc <__kernel_rem_pio2+0x55c>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	e7c5      	b.n	80057ec <__kernel_rem_pio2+0x56c>
 8005860:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005864:	f7fa fcde 	bl	8000224 <__adddf3>
 8005868:	3401      	adds	r4, #1
 800586a:	e7ca      	b.n	8005802 <__kernel_rem_pio2+0x582>
 800586c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005870:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	9302      	str	r3, [sp, #8]
 800587a:	4632      	mov	r2, r6
 800587c:	463b      	mov	r3, r7
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa fccf 	bl	8000224 <__adddf3>
 8005886:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4640      	mov	r0, r8
 8005890:	4649      	mov	r1, r9
 8005892:	f7fa fcc5 	bl	8000220 <__aeabi_dsub>
 8005896:	4632      	mov	r2, r6
 8005898:	463b      	mov	r3, r7
 800589a:	f7fa fcc3 	bl	8000224 <__adddf3>
 800589e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80058a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058a6:	ed8a 7b00 	vstr	d7, [sl]
 80058aa:	e76e      	b.n	800578a <__kernel_rem_pio2+0x50a>
 80058ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80058b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80058b4:	4640      	mov	r0, r8
 80058b6:	4632      	mov	r2, r6
 80058b8:	463b      	mov	r3, r7
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fa fcb2 	bl	8000224 <__adddf3>
 80058c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4640      	mov	r0, r8
 80058ca:	4649      	mov	r1, r9
 80058cc:	f7fa fca8 	bl	8000220 <__aeabi_dsub>
 80058d0:	4632      	mov	r2, r6
 80058d2:	463b      	mov	r3, r7
 80058d4:	f7fa fca6 	bl	8000224 <__adddf3>
 80058d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058e0:	ed84 7b00 	vstr	d7, [r4]
 80058e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058e8:	e755      	b.n	8005796 <__kernel_rem_pio2+0x516>
 80058ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058ee:	f7fa fc99 	bl	8000224 <__adddf3>
 80058f2:	3d01      	subs	r5, #1
 80058f4:	e759      	b.n	80057aa <__kernel_rem_pio2+0x52a>
 80058f6:	9b01      	ldr	r3, [sp, #4]
 80058f8:	9a01      	ldr	r2, [sp, #4]
 80058fa:	601d      	str	r5, [r3, #0]
 80058fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005900:	605c      	str	r4, [r3, #4]
 8005902:	609f      	str	r7, [r3, #8]
 8005904:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005908:	60d3      	str	r3, [r2, #12]
 800590a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800590e:	6110      	str	r0, [r2, #16]
 8005910:	6153      	str	r3, [r2, #20]
 8005912:	e728      	b.n	8005766 <__kernel_rem_pio2+0x4e6>
 8005914:	41700000 	.word	0x41700000
 8005918:	3e700000 	.word	0x3e700000
 800591c:	00000000 	.word	0x00000000

08005920 <__kernel_sin>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	ed2d 8b04 	vpush	{d8-d9}
 8005928:	eeb0 8a41 	vmov.f32	s16, s2
 800592c:	eef0 8a61 	vmov.f32	s17, s3
 8005930:	ec55 4b10 	vmov	r4, r5, d0
 8005934:	b083      	sub	sp, #12
 8005936:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800593a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800593e:	9001      	str	r0, [sp, #4]
 8005940:	da06      	bge.n	8005950 <__kernel_sin+0x30>
 8005942:	ee10 0a10 	vmov	r0, s0
 8005946:	4629      	mov	r1, r5
 8005948:	f7fb f8bc 	bl	8000ac4 <__aeabi_d2iz>
 800594c:	2800      	cmp	r0, #0
 800594e:	d051      	beq.n	80059f4 <__kernel_sin+0xd4>
 8005950:	4622      	mov	r2, r4
 8005952:	462b      	mov	r3, r5
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fa fe1a 	bl	8000590 <__aeabi_dmul>
 800595c:	4682      	mov	sl, r0
 800595e:	468b      	mov	fp, r1
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4620      	mov	r0, r4
 8005966:	4629      	mov	r1, r5
 8005968:	f7fa fe12 	bl	8000590 <__aeabi_dmul>
 800596c:	a341      	add	r3, pc, #260	; (adr r3, 8005a74 <__kernel_sin+0x154>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	4680      	mov	r8, r0
 8005974:	4689      	mov	r9, r1
 8005976:	4650      	mov	r0, sl
 8005978:	4659      	mov	r1, fp
 800597a:	f7fa fe09 	bl	8000590 <__aeabi_dmul>
 800597e:	a33f      	add	r3, pc, #252	; (adr r3, 8005a7c <__kernel_sin+0x15c>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fc4c 	bl	8000220 <__aeabi_dsub>
 8005988:	4652      	mov	r2, sl
 800598a:	465b      	mov	r3, fp
 800598c:	f7fa fe00 	bl	8000590 <__aeabi_dmul>
 8005990:	a33c      	add	r3, pc, #240	; (adr r3, 8005a84 <__kernel_sin+0x164>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fc45 	bl	8000224 <__adddf3>
 800599a:	4652      	mov	r2, sl
 800599c:	465b      	mov	r3, fp
 800599e:	f7fa fdf7 	bl	8000590 <__aeabi_dmul>
 80059a2:	a33a      	add	r3, pc, #232	; (adr r3, 8005a8c <__kernel_sin+0x16c>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fc3a 	bl	8000220 <__aeabi_dsub>
 80059ac:	4652      	mov	r2, sl
 80059ae:	465b      	mov	r3, fp
 80059b0:	f7fa fdee 	bl	8000590 <__aeabi_dmul>
 80059b4:	a337      	add	r3, pc, #220	; (adr r3, 8005a94 <__kernel_sin+0x174>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f7fa fc33 	bl	8000224 <__adddf3>
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	4606      	mov	r6, r0
 80059c2:	460f      	mov	r7, r1
 80059c4:	b9eb      	cbnz	r3, 8005a02 <__kernel_sin+0xe2>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4650      	mov	r0, sl
 80059cc:	4659      	mov	r1, fp
 80059ce:	f7fa fddf 	bl	8000590 <__aeabi_dmul>
 80059d2:	a325      	add	r3, pc, #148	; (adr r3, 8005a68 <__kernel_sin+0x148>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f7fa fc22 	bl	8000220 <__aeabi_dsub>
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	f7fa fdd6 	bl	8000590 <__aeabi_dmul>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4620      	mov	r0, r4
 80059ea:	4629      	mov	r1, r5
 80059ec:	f7fa fc1a 	bl	8000224 <__adddf3>
 80059f0:	4604      	mov	r4, r0
 80059f2:	460d      	mov	r5, r1
 80059f4:	ec45 4b10 	vmov	d0, r4, r5
 80059f8:	b003      	add	sp, #12
 80059fa:	ecbd 8b04 	vpop	{d8-d9}
 80059fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a02:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <__kernel_sin+0x150>)
 8005a04:	ec51 0b18 	vmov	r0, r1, d8
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f7fa fdc1 	bl	8000590 <__aeabi_dmul>
 8005a0e:	4632      	mov	r2, r6
 8005a10:	ec41 0b19 	vmov	d9, r0, r1
 8005a14:	463b      	mov	r3, r7
 8005a16:	4640      	mov	r0, r8
 8005a18:	4649      	mov	r1, r9
 8005a1a:	f7fa fdb9 	bl	8000590 <__aeabi_dmul>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	ec51 0b19 	vmov	r0, r1, d9
 8005a26:	f7fa fbfb 	bl	8000220 <__aeabi_dsub>
 8005a2a:	4652      	mov	r2, sl
 8005a2c:	465b      	mov	r3, fp
 8005a2e:	f7fa fdaf 	bl	8000590 <__aeabi_dmul>
 8005a32:	ec53 2b18 	vmov	r2, r3, d8
 8005a36:	f7fa fbf3 	bl	8000220 <__aeabi_dsub>
 8005a3a:	a30b      	add	r3, pc, #44	; (adr r3, 8005a68 <__kernel_sin+0x148>)
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	4606      	mov	r6, r0
 8005a42:	460f      	mov	r7, r1
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	f7fa fda2 	bl	8000590 <__aeabi_dmul>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4630      	mov	r0, r6
 8005a52:	4639      	mov	r1, r7
 8005a54:	f7fa fbe6 	bl	8000224 <__adddf3>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f7fa fbde 	bl	8000220 <__aeabi_dsub>
 8005a64:	e7c4      	b.n	80059f0 <__kernel_sin+0xd0>
 8005a66:	bf00      	nop
 8005a68:	55555549 	.word	0x55555549
 8005a6c:	3fc55555 	.word	0x3fc55555
 8005a70:	3fe00000 	.word	0x3fe00000
 8005a74:	5acfd57c 	.word	0x5acfd57c
 8005a78:	3de5d93a 	.word	0x3de5d93a
 8005a7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a80:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a84:	57b1fe7d 	.word	0x57b1fe7d
 8005a88:	3ec71de3 	.word	0x3ec71de3
 8005a8c:	19c161d5 	.word	0x19c161d5
 8005a90:	3f2a01a0 	.word	0x3f2a01a0
 8005a94:	1110f8a6 	.word	0x1110f8a6
 8005a98:	3f811111 	.word	0x3f811111

08005a9c <fabs>:
 8005a9c:	ec51 0b10 	vmov	r0, r1, d0
 8005aa0:	ee10 2a10 	vmov	r2, s0
 8005aa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005aa8:	ec43 2b10 	vmov	d0, r2, r3
 8005aac:	4770      	bx	lr
	...

08005ab0 <floor>:
 8005ab0:	ec51 0b10 	vmov	r0, r1, d0
 8005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005abc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ac0:	2e13      	cmp	r6, #19
 8005ac2:	ee10 5a10 	vmov	r5, s0
 8005ac6:	ee10 8a10 	vmov	r8, s0
 8005aca:	460c      	mov	r4, r1
 8005acc:	dc32      	bgt.n	8005b34 <floor+0x84>
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	da14      	bge.n	8005afc <floor+0x4c>
 8005ad2:	a333      	add	r3, pc, #204	; (adr r3, 8005ba0 <floor+0xf0>)
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f7fa fba4 	bl	8000224 <__adddf3>
 8005adc:	2200      	movs	r2, #0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f7fa ffe6 	bl	8000ab0 <__aeabi_dcmpgt>
 8005ae4:	b138      	cbz	r0, 8005af6 <floor+0x46>
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	da57      	bge.n	8005b9a <floor+0xea>
 8005aea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005aee:	431d      	orrs	r5, r3
 8005af0:	d001      	beq.n	8005af6 <floor+0x46>
 8005af2:	4c2d      	ldr	r4, [pc, #180]	; (8005ba8 <floor+0xf8>)
 8005af4:	2500      	movs	r5, #0
 8005af6:	4621      	mov	r1, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	e025      	b.n	8005b48 <floor+0x98>
 8005afc:	4f2b      	ldr	r7, [pc, #172]	; (8005bac <floor+0xfc>)
 8005afe:	4137      	asrs	r7, r6
 8005b00:	ea01 0307 	and.w	r3, r1, r7
 8005b04:	4303      	orrs	r3, r0
 8005b06:	d01f      	beq.n	8005b48 <floor+0x98>
 8005b08:	a325      	add	r3, pc, #148	; (adr r3, 8005ba0 <floor+0xf0>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fa fb89 	bl	8000224 <__adddf3>
 8005b12:	2200      	movs	r2, #0
 8005b14:	2300      	movs	r3, #0
 8005b16:	f7fa ffcb 	bl	8000ab0 <__aeabi_dcmpgt>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d0eb      	beq.n	8005af6 <floor+0x46>
 8005b1e:	2c00      	cmp	r4, #0
 8005b20:	bfbe      	ittt	lt
 8005b22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b26:	fa43 f606 	asrlt.w	r6, r3, r6
 8005b2a:	19a4      	addlt	r4, r4, r6
 8005b2c:	ea24 0407 	bic.w	r4, r4, r7
 8005b30:	2500      	movs	r5, #0
 8005b32:	e7e0      	b.n	8005af6 <floor+0x46>
 8005b34:	2e33      	cmp	r6, #51	; 0x33
 8005b36:	dd0b      	ble.n	8005b50 <floor+0xa0>
 8005b38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005b3c:	d104      	bne.n	8005b48 <floor+0x98>
 8005b3e:	ee10 2a10 	vmov	r2, s0
 8005b42:	460b      	mov	r3, r1
 8005b44:	f7fa fb6e 	bl	8000224 <__adddf3>
 8005b48:	ec41 0b10 	vmov	d0, r0, r1
 8005b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295
 8005b58:	fa23 f707 	lsr.w	r7, r3, r7
 8005b5c:	4207      	tst	r7, r0
 8005b5e:	d0f3      	beq.n	8005b48 <floor+0x98>
 8005b60:	a30f      	add	r3, pc, #60	; (adr r3, 8005ba0 <floor+0xf0>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fb5d 	bl	8000224 <__adddf3>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f7fa ff9f 	bl	8000ab0 <__aeabi_dcmpgt>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d0bf      	beq.n	8005af6 <floor+0x46>
 8005b76:	2c00      	cmp	r4, #0
 8005b78:	da02      	bge.n	8005b80 <floor+0xd0>
 8005b7a:	2e14      	cmp	r6, #20
 8005b7c:	d103      	bne.n	8005b86 <floor+0xd6>
 8005b7e:	3401      	adds	r4, #1
 8005b80:	ea25 0507 	bic.w	r5, r5, r7
 8005b84:	e7b7      	b.n	8005af6 <floor+0x46>
 8005b86:	2301      	movs	r3, #1
 8005b88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005b8c:	fa03 f606 	lsl.w	r6, r3, r6
 8005b90:	4435      	add	r5, r6
 8005b92:	4545      	cmp	r5, r8
 8005b94:	bf38      	it	cc
 8005b96:	18e4      	addcc	r4, r4, r3
 8005b98:	e7f2      	b.n	8005b80 <floor+0xd0>
 8005b9a:	2500      	movs	r5, #0
 8005b9c:	462c      	mov	r4, r5
 8005b9e:	e7aa      	b.n	8005af6 <floor+0x46>
 8005ba0:	8800759c 	.word	0x8800759c
 8005ba4:	7e37e43c 	.word	0x7e37e43c
 8005ba8:	bff00000 	.word	0xbff00000
 8005bac:	000fffff 	.word	0x000fffff

08005bb0 <scalbn>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	ec55 4b10 	vmov	r4, r5, d0
 8005bb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005bba:	4606      	mov	r6, r0
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	b99a      	cbnz	r2, 8005be8 <scalbn+0x38>
 8005bc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005bc4:	4323      	orrs	r3, r4
 8005bc6:	d036      	beq.n	8005c36 <scalbn+0x86>
 8005bc8:	4b39      	ldr	r3, [pc, #228]	; (8005cb0 <scalbn+0x100>)
 8005bca:	4629      	mov	r1, r5
 8005bcc:	ee10 0a10 	vmov	r0, s0
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f7fa fcdd 	bl	8000590 <__aeabi_dmul>
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <scalbn+0x104>)
 8005bd8:	429e      	cmp	r6, r3
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	da10      	bge.n	8005c02 <scalbn+0x52>
 8005be0:	a32b      	add	r3, pc, #172	; (adr r3, 8005c90 <scalbn+0xe0>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	e03a      	b.n	8005c5e <scalbn+0xae>
 8005be8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005bec:	428a      	cmp	r2, r1
 8005bee:	d10c      	bne.n	8005c0a <scalbn+0x5a>
 8005bf0:	ee10 2a10 	vmov	r2, s0
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f7fa fb14 	bl	8000224 <__adddf3>
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	460d      	mov	r5, r1
 8005c00:	e019      	b.n	8005c36 <scalbn+0x86>
 8005c02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c06:	460b      	mov	r3, r1
 8005c08:	3a36      	subs	r2, #54	; 0x36
 8005c0a:	4432      	add	r2, r6
 8005c0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c10:	428a      	cmp	r2, r1
 8005c12:	dd08      	ble.n	8005c26 <scalbn+0x76>
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	a120      	add	r1, pc, #128	; (adr r1, 8005c98 <scalbn+0xe8>)
 8005c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c1c:	da1c      	bge.n	8005c58 <scalbn+0xa8>
 8005c1e:	a120      	add	r1, pc, #128	; (adr r1, 8005ca0 <scalbn+0xf0>)
 8005c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c24:	e018      	b.n	8005c58 <scalbn+0xa8>
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	dd08      	ble.n	8005c3c <scalbn+0x8c>
 8005c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c36:	ec45 4b10 	vmov	d0, r4, r5
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c40:	da19      	bge.n	8005c76 <scalbn+0xc6>
 8005c42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005c46:	429e      	cmp	r6, r3
 8005c48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005c4c:	dd0a      	ble.n	8005c64 <scalbn+0xb4>
 8005c4e:	a112      	add	r1, pc, #72	; (adr r1, 8005c98 <scalbn+0xe8>)
 8005c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e2      	bne.n	8005c1e <scalbn+0x6e>
 8005c58:	a30f      	add	r3, pc, #60	; (adr r3, 8005c98 <scalbn+0xe8>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fc97 	bl	8000590 <__aeabi_dmul>
 8005c62:	e7cb      	b.n	8005bfc <scalbn+0x4c>
 8005c64:	a10a      	add	r1, pc, #40	; (adr r1, 8005c90 <scalbn+0xe0>)
 8005c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0b8      	beq.n	8005be0 <scalbn+0x30>
 8005c6e:	a10e      	add	r1, pc, #56	; (adr r1, 8005ca8 <scalbn+0xf8>)
 8005c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c74:	e7b4      	b.n	8005be0 <scalbn+0x30>
 8005c76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c7a:	3236      	adds	r2, #54	; 0x36
 8005c7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005c84:	4620      	mov	r0, r4
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <scalbn+0x108>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	e7e8      	b.n	8005c5e <scalbn+0xae>
 8005c8c:	f3af 8000 	nop.w
 8005c90:	c2f8f359 	.word	0xc2f8f359
 8005c94:	01a56e1f 	.word	0x01a56e1f
 8005c98:	8800759c 	.word	0x8800759c
 8005c9c:	7e37e43c 	.word	0x7e37e43c
 8005ca0:	8800759c 	.word	0x8800759c
 8005ca4:	fe37e43c 	.word	0xfe37e43c
 8005ca8:	c2f8f359 	.word	0xc2f8f359
 8005cac:	81a56e1f 	.word	0x81a56e1f
 8005cb0:	43500000 	.word	0x43500000
 8005cb4:	ffff3cb0 	.word	0xffff3cb0
 8005cb8:	3c900000 	.word	0x3c900000

08005cbc <_init>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	bf00      	nop
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr

08005cc8 <_fini>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr
