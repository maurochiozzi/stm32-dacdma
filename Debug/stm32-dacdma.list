
stm32-dacdma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e1c  08003e1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e24  08003e24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08003e38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003e38  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f10  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae3  00000000  00000000  00034f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00037a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00038b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002688f  00000000  00000000  00039bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001580a  00000000  00000000  00060457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faae4  00000000  00000000  00075c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170745  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004860  00000000  00000000  00170798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003dc4 	.word	0x08003dc4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003dc4 	.word	0x08003dc4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000522:	463b      	mov	r3, r7
 8000524:	2230      	movs	r2, #48	; 0x30
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f003 fc43 	bl	8003db4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_DAC1_Init+0x6c>)
 8000530:	4a16      	ldr	r2, [pc, #88]	; (800058c <MX_DAC1_Init+0x70>)
 8000532:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <MX_DAC1_Init+0x6c>)
 8000536:	f000 fce4 	bl	8000f02 <HAL_DAC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000540:	f000 f98d 	bl	800085e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000544:	2302      	movs	r3, #2
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000554:	2316      	movs	r3, #22
 8000556:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_DAC1_Init+0x6c>)
 8000570:	f000 fcea 	bl	8000f48 <HAL_DAC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800057a:	f000 f970 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	3730      	adds	r7, #48	; 0x30
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028
 800058c:	50000800 	.word	0x50000800

08000590 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a2b      	ldr	r2, [pc, #172]	; (800065c <HAL_DAC_MspInit+0xcc>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d14f      	bne.n	8000652 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e2:	2310      	movs	r3, #16
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f001 f808 	bl	800160c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 80005fe:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <HAL_DAC_MspInit+0xd8>)
 8000600:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000604:	2206      	movs	r2, #6
 8000606:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800060a:	2210      	movs	r2, #16
 800060c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800061c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000620:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000628:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800062c:	2220      	movs	r2, #32
 800062e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000638:	f000 fe2e 	bl	8001298 <HAL_DMA_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000642:	f000 f90c 	bl	800085e <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	50000800 	.word	0x50000800
 8000660:	40021000 	.word	0x40021000
 8000664:	2000003c 	.word	0x2000003c
 8000668:	40020008 	.word	0x40020008

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_DMA_Init+0x50>)
 8000674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <MX_DMA_Init+0x50>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6493      	str	r3, [r2, #72]	; 0x48
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_DMA_Init+0x50>)
 8000680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x50>)
 800068c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MX_DMA_Init+0x50>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6493      	str	r3, [r2, #72]	; 0x48
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x50>)
 8000698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200b      	movs	r0, #11
 80006a8:	f000 fbf7 	bl	8000e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006ac:	200b      	movs	r0, #11
 80006ae:	f000 fc0e 	bl	8000ece <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a2e      	ldr	r2, [pc, #184]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_GPIO_Init+0xd4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f001 f8e7 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000748:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_GPIO_Init+0xd8>)
 800075a:	f000 ff57 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075e:	2320      	movs	r3, #32
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 ff48 	bl	800160c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2028      	movs	r0, #40	; 0x28
 8000782:	f000 fb8a 	bl	8000e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000786:	2028      	movs	r0, #40	; 0x28
 8000788:	f000 fba1 	bl	8000ece <HAL_NVIC_EnableIRQ>

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	48000800 	.word	0x48000800

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fa0d 	bl	8000bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f810 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff ff8a 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ac:	f7ff ff5e 	bl	800066c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007b0:	f000 f93a 	bl	8000a28 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 80007b4:	f000 f8ca 	bl	800094c <MX_TIM4_Init>
  MX_DAC1_Init();
 80007b8:	f7ff feb0 	bl	800051c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start(&htim4);
 80007bc:	4801      	ldr	r0, [pc, #4]	; (80007c4 <main+0x28>)
 80007be:	f002 f971 	bl	8002aa4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <main+0x26>
 80007c4:	2000009c 	.word	0x2000009c

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	2238      	movs	r2, #56	; 0x38
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 faec 	bl	8003db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f001 f8cc 	bl	8001988 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2340      	movs	r3, #64	; 0x40
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000806:	2304      	movs	r3, #4
 8000808:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800080a:	2355      	movs	r3, #85	; 0x55
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4618      	mov	r0, r3
 8000820:	f001 f966 	bl	8001af0 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800082a:	f000 f818 	bl	800085e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2104      	movs	r1, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fc6a 	bl	8002120 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000852:	f000 f804 	bl	800085e <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000862:	b672      	cpsid	i
}
 8000864:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000866:	e7fe      	b.n	8000866 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	; 0x60
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	; 0x58
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800089e:	f001 f917 	bl	8001ad0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f9b2 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <DMA1_Channel1_IRQHandler+0x10>)
 800090a:	f000 fd6d 	bl	80013e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000003c 	.word	0x2000003c

08000918 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800091c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000920:	f001 f80e 	bl	8001940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM4_Init+0x94>)
 800096c:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <MX_TIM4_Init+0x98>)
 800096e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2125-1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_TIM4_Init+0x94>)
 8000972:	f640 024c 	movw	r2, #2124	; 0x84c
 8000976:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_TIM4_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_TIM4_Init+0x94>)
 8000980:	2207      	movs	r2, #7
 8000982:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_TIM4_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM4_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_TIM4_Init+0x94>)
 8000992:	f002 f82f 	bl	80029f4 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800099c:	f7ff ff5f 	bl	800085e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_TIM4_Init+0x94>)
 80009ae:	f002 f8e9 	bl	8002b84 <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80009b8:	f7ff ff51 	bl	800085e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009bc:	2320      	movs	r3, #32
 80009be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_TIM4_Init+0x94>)
 80009ca:	f002 fb35 	bl	8003038 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f7ff ff43 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000009c 	.word	0x2000009c
 80009e4:	40000800 	.word	0x40000800

080009e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_TIM_Base_MspInit+0x38>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10b      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40000800 	.word	0x40000800
 8000a24:	40021000 	.word	0x40021000

08000a28 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <MX_LPUART1_UART_Init+0x90>)
 8000a30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a6c:	f002 fb7a 	bl	8003164 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f7ff fef2 	bl	800085e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a7e:	f003 f8ab 	bl	8003bd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a88:	f7ff fee9 	bl	800085e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000a90:	f003 f8e0 	bl	8003c54 <HAL_UARTEx_SetRxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a9a:	f7ff fee0 	bl	800085e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_LPUART1_UART_Init+0x8c>)
 8000aa0:	f003 f861 	bl	8003b66 <HAL_UARTEx_DisableFifoMode>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000aaa:	f7ff fed8 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000e8 	.word	0x200000e8
 8000ab8:	40008000 	.word	0x40008000

08000abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09e      	sub	sp, #120	; 0x78
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2254      	movs	r2, #84	; 0x54
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 f969 	bl	8003db4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <HAL_UART_MspInit+0xa8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d136      	bne.n	8000b5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aec:	2320      	movs	r3, #32
 8000aee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fd2d 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b04:	f7ff feab 	bl	800085e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0xac>)
 8000b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b0c:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <HAL_UART_MspInit+0xac>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_UART_MspInit+0xac>)
 8000b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0xac>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0xac>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0xac>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 fd59 	bl	800160c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3778      	adds	r7, #120	; 0x78
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40008000 	.word	0x40008000
 8000b68:	40021000 	.word	0x40021000

08000b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b96:	f7ff fec7 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f003 f8e7 	bl	8003d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9e:	f7ff fdfd 	bl	800079c <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   r0, =_estack
 8000ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb0:	08003e2c 	.word	0x08003e2c
  ldr r2, =_sbss
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb8:	2000017c 	.word	0x2000017c

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>

08000bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f95b 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f80e 	bl	8000bf0 <HAL_InitTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e001      	b.n	8000be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be0:	f7ff fe42 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be4:	79fb      	ldrb	r3, [r7, #7]

}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_InitTick+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d022      	beq.n	8000c4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_InitTick+0x6c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_InitTick+0x68>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f966 	bl	8000eea <HAL_SYSTICK_Config>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10f      	bne.n	8000c44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b0f      	cmp	r3, #15
 8000c28:	d809      	bhi.n	8000c3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c32:	f000 f932 	bl	8000e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_InitTick+0x70>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e007      	b.n	8000c4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e004      	b.n	8000c4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e001      	b.n	8000c4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c74:	6013      	str	r3, [r2, #0]
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	20000178 	.word	0x20000178
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000178 	.word	0x20000178

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff ffee 	bl	8000c88 <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d004      	beq.n	8000cc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_Delay+0x40>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc4:	bf00      	nop
 8000cc6:	f7ff ffdf 	bl	8000c88 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d8f7      	bhi.n	8000cc6 <HAL_Delay+0x26>
  {
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff29 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff40 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff90 	bl	8000dd8 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5f 	bl	8000d84 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff33 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffa4 	bl	8000e40 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e014      	b.n	8000f3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	791b      	ldrb	r3, [r3, #4]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fb33 	bl	8000590 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	795b      	ldrb	r3, [r3, #5]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_DAC_ConfigChannel+0x18>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e192      	b.n	8001286 <HAL_DAC_ConfigChannel+0x33e>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2201      	movs	r2, #1
 8000f64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2202      	movs	r2, #2
 8000f6a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d174      	bne.n	800105e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f74:	f7ff fe88 	bl	8000c88 <HAL_GetTick>
 8000f78:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d134      	bne.n	8000fea <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f80:	e011      	b.n	8000fa6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f82:	f7ff fe81 	bl	8000c88 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d90a      	bls.n	8000fa6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	f043 0208 	orr.w	r2, r3, #8
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e16f      	b.n	8001286 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e6      	bne.n	8000f82 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff fe73 	bl	8000ca0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc4:	e01e      	b.n	8001004 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000fc6:	f7ff fe5f 	bl	8000c88 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d90a      	bls.n	8000fea <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	f043 0208 	orr.w	r2, r3, #8
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e14d      	b.n	8001286 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dbe8      	blt.n	8000fc6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fe53 	bl	8000ca0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001002:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	ea02 0103 	and.w	r1, r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	409a      	lsls	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	21ff      	movs	r1, #255	; 0xff
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	ea02 0103 	and.w	r1, r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	409a      	lsls	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d11d      	bne.n	80010a2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	221f      	movs	r2, #31
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107e:	4013      	ands	r3, r2
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001096:	4313      	orrs	r3, r2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2207      	movs	r2, #7
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	4013      	ands	r3, r2
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d102      	bne.n	80010cc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	e00f      	b.n	80010ec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d102      	bne.n	80010da <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	e008      	b.n	80010ec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80010e2:	2301      	movs	r3, #1
 80010e4:	623b      	str	r3, [r7, #32]
 80010e6:	e001      	b.n	80010ec <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	6a3a      	ldr	r2, [r7, #32]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110e:	4013      	ands	r3, r2
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d102      	bne.n	8001120 <HAL_DAC_ConfigChannel+0x1d8>
 800111a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111e:	e000      	b.n	8001122 <HAL_DAC_ConfigChannel+0x1da>
 8001120:	2300      	movs	r3, #0
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113a:	4013      	ands	r3, r2
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	795b      	ldrb	r3, [r3, #5]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d102      	bne.n	800114c <HAL_DAC_ConfigChannel+0x204>
 8001146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114a:	e000      	b.n	800114e <HAL_DAC_ConfigChannel+0x206>
 800114c:	2300      	movs	r3, #0
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d114      	bne.n	800118e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001164:	f001 f97a 	bl	800245c <HAL_RCC_GetHCLKFreq>
 8001168:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4a48      	ldr	r2, [pc, #288]	; (8001290 <HAL_DAC_ConfigChannel+0x348>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d904      	bls.n	800117c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	e00f      	b.n	800119c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4a45      	ldr	r2, [pc, #276]	; (8001294 <HAL_DAC_ConfigChannel+0x34c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d90a      	bls.n	800119a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
 800118c:	e006      	b.n	800119c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001194:	4313      	orrs	r3, r2
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
 8001198:	e000      	b.n	800119c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800119a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011aa:	4313      	orrs	r3, r2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ee:	4013      	ands	r3, r2
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001206:	4313      	orrs	r3, r2
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001210:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	22c0      	movs	r2, #192	; 0xc0
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43da      	mvns	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	f640 710f 	movw	r1, #3855	; 0xf0f
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	ea02 0103 	and.w	r1, r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2201      	movs	r2, #1
 800127c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	09896800 	.word	0x09896800
 8001294:	04c4b400 	.word	0x04c4b400

08001298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e08d      	b.n	80013c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_DMA_Init+0x138>)
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d80f      	bhi.n	80012d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <HAL_DMA_Init+0x13c>)
 80012be:	4413      	add	r3, r2
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <HAL_DMA_Init+0x140>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	009a      	lsls	r2, r3, #2
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a42      	ldr	r2, [pc, #264]	; (80013dc <HAL_DMA_Init+0x144>)
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
 80012d4:	e00e      	b.n	80012f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <HAL_DMA_Init+0x148>)
 80012de:	4413      	add	r3, r2
 80012e0:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <HAL_DMA_Init+0x140>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	009a      	lsls	r2, r3, #2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a3c      	ldr	r2, [pc, #240]	; (80013e4 <HAL_DMA_Init+0x14c>)
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800130a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800130e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8fe 	bl	8001548 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001354:	d102      	bne.n	800135c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001370:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d010      	beq.n	800139c <HAL_DMA_Init+0x104>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d80c      	bhi.n	800139c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f91e 	bl	80015c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	e008      	b.n	80013ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020407 	.word	0x40020407
 80013d4:	bffdfff8 	.word	0xbffdfff8
 80013d8:	cccccccd 	.word	0xcccccccd
 80013dc:	40020000 	.word	0x40020000
 80013e0:	bffdfbf8 	.word	0xbffdfbf8
 80013e4:	40020400 	.word	0x40020400

080013e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	2204      	movs	r2, #4
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d026      	beq.n	8001462 <HAL_DMA_IRQHandler+0x7a>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d021      	beq.n	8001462 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2104      	movs	r1, #4
 800144a:	fa01 f202 	lsl.w	r2, r1, r2
 800144e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	2b00      	cmp	r3, #0
 8001456:	d071      	beq.n	800153c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001460:	e06c      	b.n	800153c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2202      	movs	r2, #2
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d02e      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d029      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10b      	bne.n	80014a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 020a 	bic.w	r2, r2, #10
 800149c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f003 021f 	and.w	r2, r3, #31
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2102      	movs	r1, #2
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d038      	beq.n	800153c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014d2:	e033      	b.n	800153c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	2208      	movs	r2, #8
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d02a      	beq.n	800153e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d025      	beq.n	800153e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 020e 	bic.w	r2, r2, #14
 8001500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 021f 	and.w	r2, r3, #31
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001558:	429a      	cmp	r2, r3
 800155a:	d802      	bhi.n	8001562 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e001      	b.n	8001566 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001564:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3b08      	subs	r3, #8
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	009a      	lsls	r2, r3, #2
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4413      	add	r3, r2
 8001588:	461a      	mov	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001592:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2201      	movs	r2, #1
 800159c:	409a      	lsls	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40020407 	.word	0x40020407
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40020820 	.word	0x40020820
 80015bc:	cccccccd 	.word	0xcccccccd
 80015c0:	40020880 	.word	0x40020880

080015c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a08      	ldr	r2, [pc, #32]	; (8001608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015e6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	2201      	movs	r2, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	1000823f 	.word	0x1000823f
 8001608:	40020940 	.word	0x40020940

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800161a:	e15a      	b.n	80018d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 814c 	beq.w	80018cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d005      	beq.n	800164c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001648:	2b02      	cmp	r3, #2
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0201 	and.w	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d017      	beq.n	80016ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80a6 	beq.w	80018cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <HAL_GPIO_Init+0x2e4>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	4a5a      	ldr	r2, [pc, #360]	; (80018f0 <HAL_GPIO_Init+0x2e4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6613      	str	r3, [r2, #96]	; 0x60
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HAL_GPIO_Init+0x2e4>)
 800178e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001798:	4a56      	ldr	r2, [pc, #344]	; (80018f4 <HAL_GPIO_Init+0x2e8>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017c2:	d01f      	beq.n	8001804 <HAL_GPIO_Init+0x1f8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_GPIO_Init+0x2ec>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d019      	beq.n	8001800 <HAL_GPIO_Init+0x1f4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d013      	beq.n	80017fc <HAL_GPIO_Init+0x1f0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <HAL_GPIO_Init+0x2f4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00d      	beq.n	80017f8 <HAL_GPIO_Init+0x1ec>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a49      	ldr	r2, [pc, #292]	; (8001904 <HAL_GPIO_Init+0x2f8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <HAL_GPIO_Init+0x1e8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a48      	ldr	r2, [pc, #288]	; (8001908 <HAL_GPIO_Init+0x2fc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_GPIO_Init+0x1e4>
 80017ec:	2305      	movs	r3, #5
 80017ee:	e00a      	b.n	8001806 <HAL_GPIO_Init+0x1fa>
 80017f0:	2306      	movs	r3, #6
 80017f2:	e008      	b.n	8001806 <HAL_GPIO_Init+0x1fa>
 80017f4:	2304      	movs	r3, #4
 80017f6:	e006      	b.n	8001806 <HAL_GPIO_Init+0x1fa>
 80017f8:	2303      	movs	r3, #3
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_Init+0x1fa>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0x1fa>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_Init+0x1fa>
 8001804:	2300      	movs	r3, #0
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_GPIO_Init+0x2e8>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_GPIO_Init+0x300>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001848:	4a30      	ldr	r2, [pc, #192]	; (800190c <HAL_GPIO_Init+0x300>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_GPIO_Init+0x300>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001872:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_GPIO_Init+0x300>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_GPIO_Init+0x300>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <HAL_GPIO_Init+0x300>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_GPIO_Init+0x300>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c6:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_GPIO_Init+0x300>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f ae9d 	bne.w	800161c <HAL_GPIO_Init+0x10>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	48001000 	.word	0x48001000
 8001908:	48001400 	.word	0x48001400
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800192c:	e002      	b.n	8001934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f806 	bl	8001970 <HAL_GPIO_EXTI_Callback>
  }
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d141      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a2:	d131      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019a4:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019aa:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019bc:	4a41      	ldr	r2, [pc, #260]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2232      	movs	r2, #50	; 0x32
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9b      	lsrs	r3, r3, #18
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019da:	e002      	b.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3b01      	subs	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ee:	d102      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f2      	bne.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a02:	d158      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e057      	b.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a18:	e04d      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d141      	bne.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2e:	d131      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a48:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2232      	movs	r2, #50	; 0x32
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	0c9b      	lsrs	r3, r3, #18
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a66:	e002      	b.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7a:	d102      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f2      	bne.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d112      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e011      	b.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001aa4:	e007      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ade:	6093      	str	r3, [r2, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40007000 	.word	0x40007000

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e306      	b.n	8002110 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d075      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0e:	4b97      	ldr	r3, [pc, #604]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b18:	4b94      	ldr	r3, [pc, #592]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3e>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_OscConfig+0x44>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d10b      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b8d      	ldr	r3, [pc, #564]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d05b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d157      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e2e1      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x74>
 8001b56:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a84      	ldr	r2, [pc, #528]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7e      	ldr	r2, [pc, #504]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7b      	ldr	r2, [pc, #492]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b88:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a74      	ldr	r2, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f86e 	bl	8000c88 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f86a 	bl	8000c88 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e2a6      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xc0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f85a 	bl	8000c88 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f856 	bl	8000c88 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e292      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe8>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d075      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b56      	ldr	r3, [pc, #344]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x136>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_OscConfig+0x13c>
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d11f      	bne.n	8001c6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x154>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e265      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4946      	ldr	r1, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c58:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe ffc7 	bl	8000bf0 <HAL_InitTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d043      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e251      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d023      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a3c      	ldr	r2, [pc, #240]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f802 	bl	8000c88 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7fe fffe 	bl	8000c88 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e23a      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	492d      	ldr	r1, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe ffde 	bl	8000c88 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7fe ffda 	bl	8000c88 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e216      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1e0>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d041      	beq.n	8001d82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7fe ffb7 	bl	8000c88 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7fe ffb3 	bl	8000c88 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1ef      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ef      	beq.n	8001d1e <HAL_RCC_OscConfig+0x22e>
 8001d3e:	e020      	b.n	8001d82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7fe ff9a 	bl	8000c88 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d56:	e00d      	b.n	8001d74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7fe ff96 	bl	8000c88 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d906      	bls.n	8001d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1d2      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ea      	bne.n	8001d58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80a6 	beq.w	8001edc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d94:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2b4>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2b6>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4a7e      	ldr	r2, [pc, #504]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4b7c      	ldr	r3, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a75      	ldr	r2, [pc, #468]	; (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7fe ff53 	bl	8000c88 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe ff4f 	bl	8000c88 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e18b      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_RCC_OscConfig+0x32e>
 8001e0c:	4b66      	ldr	r3, [pc, #408]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	4a65      	ldr	r2, [pc, #404]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1c:	e024      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d110      	bne.n	8001e48 <HAL_RCC_OscConfig+0x358>
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	4a5e      	ldr	r2, [pc, #376]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	4a5a      	ldr	r2, [pc, #360]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e46:	e00f      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e48:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7fe ff0a 	bl	8000c88 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7fe ff06 	bl	8000c88 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e140      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_RCC_OscConfig+0x388>
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fef3 	bl	8000c88 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe feef 	bl	8000c88 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e129      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ed      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe fec2 	bl	8000c88 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f08:	f7fe febe 	bl	8000c88 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0fa      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ef      	beq.n	8001f08 <HAL_RCC_OscConfig+0x418>
 8001f28:	e01b      	b.n	8001f62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fea5 	bl	8000c88 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f42:	f7fe fea1 	bl	8000c88 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0dd      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ef      	bne.n	8001f42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80d1 	beq.w	800210e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	f000 808b 	beq.w	8002090 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d15e      	bne.n	8002040 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fe7b 	bl	8000c88 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	e00c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7fe fe77 	bl	8000c88 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d905      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0b3      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ec      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <HAL_RCC_OscConfig+0x62c>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6a11      	ldr	r1, [r2, #32]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fd6:	0212      	lsls	r2, r2, #8
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fde:	0852      	lsrs	r2, r2, #1
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0552      	lsls	r2, r2, #21
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fea:	0852      	lsrs	r2, r2, #1
 8001fec:	3a01      	subs	r2, #1
 8001fee:	0652      	lsls	r2, r2, #25
 8001ff0:	4311      	orrs	r1, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ff6:	06d2      	lsls	r2, r2, #27
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	4947      	ldr	r1, [pc, #284]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b45      	ldr	r3, [pc, #276]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a44      	ldr	r2, [pc, #272]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800200c:	4b42      	ldr	r3, [pc, #264]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a41      	ldr	r2, [pc, #260]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002016:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fe36 	bl	8000c88 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe fe32 	bl	8000c88 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e06e      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x530>
 800203e:	e066      	b.n	800210e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a31      	ldr	r2, [pc, #196]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 800205e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fe0e 	bl	8000c88 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe fe0a 	bl	8000c88 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e046      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x580>
 800208e:	e03e      	b.n	800210e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e039      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_OscConfig+0x628>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d12c      	bne.n	800210a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	3b01      	subs	r3, #1
 80020bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d123      	bne.n	800210a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d11b      	bne.n	800210a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d113      	bne.n	800210a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d109      	bne.n	800210a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	3b01      	subs	r3, #1
 8002104:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3720      	adds	r7, #32
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	019f800c 	.word	0x019f800c

08002120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e11e      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b91      	ldr	r3, [pc, #580]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	498c      	ldr	r1, [pc, #560]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b8a      	ldr	r3, [pc, #552]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e106      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d073      	beq.n	800225c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d129      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217c:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0f4      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800218c:	f000 f99e 	bl	80024cc <RCC_GetSysClockFreqFromPLLSource>
 8002190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4a7c      	ldr	r2, [pc, #496]	; (8002388 <HAL_RCC_ClockConfig+0x268>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d93f      	bls.n	800221a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800219a:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d033      	beq.n	800221a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d12f      	bne.n	800221a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e024      	b.n	800221a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0c6      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0be      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021f8:	f000 f8ce 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4a61      	ldr	r2, [pc, #388]	; (8002388 <HAL_RCC_ClockConfig+0x268>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d909      	bls.n	800221a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800220e:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4957      	ldr	r1, [pc, #348]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7fe fd2c 	bl	8000c88 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe fd28 	bl	8000c88 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e095      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800227a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800228c:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002294:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800229a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4936      	ldr	r1, [pc, #216]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d21d      	bcs.n	800230c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 020f 	bic.w	r2, r3, #15
 80022d8:	4929      	ldr	r1, [pc, #164]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fcd2 	bl	8000c88 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe fcce 	bl	8000c88 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e03b      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d1ed      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4917      	ldr	r1, [pc, #92]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490f      	ldr	r1, [pc, #60]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234a:	f000 f825 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	490c      	ldr	r1, [pc, #48]	; (800238c <HAL_RCC_ClockConfig+0x26c>)
 800235c:	5ccb      	ldrb	r3, [r1, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x270>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x274>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fc3e 	bl	8000bf0 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	04c4b400 	.word	0x04c4b400
 800238c:	08003ddc 	.word	0x08003ddc
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e047      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e03e      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d136      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3301      	adds	r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	68d2      	ldr	r2, [r2, #12]
 80023f8:	0a12      	lsrs	r2, r2, #8
 80023fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
      break;
 8002404:	e00c      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	0a12      	lsrs	r2, r2, #8
 8002414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
      break;
 800241e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0e5b      	lsrs	r3, r3, #25
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	e001      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002440:	693b      	ldr	r3, [r7, #16]
}
 8002442:	4618      	mov	r0, r3
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	00f42400 	.word	0x00f42400
 8002458:	016e3600 	.word	0x016e3600

0800245c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_RCC_GetHCLKFreq+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002478:	f7ff fff0 	bl	800245c <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_RCC_GetPCLK1Freq+0x28>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	08003dec 	.word	0x08003dec

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a4:	f7ff ffda 	bl	800245c <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0adb      	lsrs	r3, r3, #11
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4904      	ldr	r1, [pc, #16]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08003dec 	.word	0x08003dec

080024cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d10c      	bne.n	800250a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024fa:	68d2      	ldr	r2, [r2, #12]
 80024fc:	0a12      	lsrs	r2, r2, #8
 80024fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
    break;
 8002508:	e00c      	b.n	8002524 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4a0e      	ldr	r2, [pc, #56]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	0a12      	lsrs	r2, r2, #8
 8002518:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    break;
 8002522:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0e5b      	lsrs	r3, r3, #25
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800253e:	687b      	ldr	r3, [r7, #4]
}
 8002540:	4618      	mov	r0, r3
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	016e3600 	.word	0x016e3600
 8002554:	00f42400 	.word	0x00f42400

08002558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002560:	2300      	movs	r3, #0
 8002562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002564:	2300      	movs	r3, #0
 8002566:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8098 	beq.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a39      	ldr	r2, [pc, #228]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025ae:	f7fe fb6b 	bl	8000c88 <HAL_GetTick>
 80025b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025b4:	e009      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fb67 	bl	8000c88 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d902      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	74fb      	strb	r3, [r7, #19]
        break;
 80025c8:	e005      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ca:	4b30      	ldr	r3, [pc, #192]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ef      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d159      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01e      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d019      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002602:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002614:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002624:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe fb27 	bl	8000c88 <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263c:	e00b      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe fb23 	bl	8000c88 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d902      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	74fb      	strb	r3, [r7, #19]
            break;
 8002654:	e006      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ec      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10b      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002680:	e008      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	74bb      	strb	r3, [r7, #18]
 8002686:	e005      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002694:	7c7b      	ldrb	r3, [r7, #17]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4ba7      	ldr	r3, [pc, #668]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	4aa6      	ldr	r2, [pc, #664]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b2:	4ba1      	ldr	r3, [pc, #644]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f023 0203 	bic.w	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	499d      	ldr	r1, [pc, #628]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d4:	4b98      	ldr	r3, [pc, #608]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 020c 	bic.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4995      	ldr	r1, [pc, #596]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026f6:	4b90      	ldr	r3, [pc, #576]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	498c      	ldr	r1, [pc, #560]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002718:	4b87      	ldr	r3, [pc, #540]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	4984      	ldr	r1, [pc, #528]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800273a:	4b7f      	ldr	r3, [pc, #508]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	497b      	ldr	r1, [pc, #492]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4973      	ldr	r1, [pc, #460]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277e:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	496a      	ldr	r1, [pc, #424]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4962      	ldr	r1, [pc, #392]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027c2:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	4959      	ldr	r1, [pc, #356]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027e4:	4b54      	ldr	r3, [pc, #336]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	4951      	ldr	r1, [pc, #324]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	4948      	ldr	r1, [pc, #288]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002828:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4940      	ldr	r1, [pc, #256]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002846:	d105      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002852:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002860:	4b35      	ldr	r3, [pc, #212]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	4932      	ldr	r1, [pc, #200]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d105      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d015      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	4924      	ldr	r1, [pc, #144]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b6:	d105      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	4916      	ldr	r1, [pc, #88]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ee:	d105      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d019      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002926:	d109      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4a02      	ldr	r2, [pc, #8]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002932:	60d3      	str	r3, [r2, #12]
 8002934:	e002      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4926      	ldr	r1, [pc, #152]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	4918      	ldr	r1, [pc, #96]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d105      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	490a      	ldr	r1, [pc, #40]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e049      	b.n	8002a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd ffe4 	bl	80009e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 f9bc 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d001      	beq.n	8002abc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e04c      	b.n	8002b56 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <HAL_TIM_Base_Start+0xc0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d022      	beq.n	8002b14 <HAL_TIM_Base_Start+0x70>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d01d      	beq.n	8002b14 <HAL_TIM_Base_Start+0x70>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <HAL_TIM_Base_Start+0xc4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d018      	beq.n	8002b14 <HAL_TIM_Base_Start+0x70>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <HAL_TIM_Base_Start+0xc8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d013      	beq.n	8002b14 <HAL_TIM_Base_Start+0x70>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <HAL_TIM_Base_Start+0xcc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00e      	beq.n	8002b14 <HAL_TIM_Base_Start+0x70>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <HAL_TIM_Base_Start+0xd0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d009      	beq.n	8002b14 <HAL_TIM_Base_Start+0x70>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <HAL_TIM_Base_Start+0xd4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_TIM_Base_Start+0x70>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_TIM_Base_Start+0xd8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d115      	bne.n	8002b40 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_TIM_Base_Start+0xdc>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d015      	beq.n	8002b52 <HAL_TIM_Base_Start+0xae>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d011      	beq.n	8002b52 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3e:	e008      	b.n	8002b52 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e000      	b.n	8002b54 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40013400 	.word	0x40013400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40015000 	.word	0x40015000
 8002b80:	00010007 	.word	0x00010007

08002b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0f6      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x20a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6f      	ldr	r2, [pc, #444]	; (8002d98 <HAL_TIM_ConfigClockSource+0x214>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	f000 80c1 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002be0:	4a6d      	ldr	r2, [pc, #436]	; (8002d98 <HAL_TIM_ConfigClockSource+0x214>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	f200 80c6 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002be8:	4a6c      	ldr	r2, [pc, #432]	; (8002d9c <HAL_TIM_ConfigClockSource+0x218>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f000 80b9 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	; (8002d9c <HAL_TIM_ConfigClockSource+0x218>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	f200 80be 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bf8:	4a69      	ldr	r2, [pc, #420]	; (8002da0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f000 80b1 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002c00:	4a67      	ldr	r2, [pc, #412]	; (8002da0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	f200 80b6 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c08:	4a66      	ldr	r2, [pc, #408]	; (8002da4 <HAL_TIM_ConfigClockSource+0x220>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	f000 80a9 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002c10:	4a64      	ldr	r2, [pc, #400]	; (8002da4 <HAL_TIM_ConfigClockSource+0x220>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	f200 80ae 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c18:	4a63      	ldr	r2, [pc, #396]	; (8002da8 <HAL_TIM_ConfigClockSource+0x224>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	f000 80a1 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002c20:	4a61      	ldr	r2, [pc, #388]	; (8002da8 <HAL_TIM_ConfigClockSource+0x224>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	f200 80a6 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c28:	4a60      	ldr	r2, [pc, #384]	; (8002dac <HAL_TIM_ConfigClockSource+0x228>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	f000 8099 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002c30:	4a5e      	ldr	r2, [pc, #376]	; (8002dac <HAL_TIM_ConfigClockSource+0x228>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f200 809e 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002c3c:	f000 8091 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002c40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002c44:	f200 8096 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4c:	f000 8089 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c54:	f200 808e 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5c:	d03e      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0x158>
 8002c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c62:	f200 8087 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	f000 8086 	beq.w	8002d7a <HAL_TIM_ConfigClockSource+0x1f6>
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	d87f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d01a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x12a>
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d87b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d050      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x19e>
 8002c80:	2b60      	cmp	r3, #96	; 0x60
 8002c82:	d877      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d03c      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x17e>
 8002c88:	2b50      	cmp	r3, #80	; 0x50
 8002c8a:	d873      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d058      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x1be>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d86f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d064      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002c98:	2b30      	cmp	r3, #48	; 0x30
 8002c9a:	d86b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d060      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d867      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05c      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d05a      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x1de>
 8002cac:	e062      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f000 f99b 	bl	8002ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	609a      	str	r2, [r3, #8]
      break;
 8002cda:	e04f      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f000 f984 	bl	8002ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfe:	609a      	str	r2, [r3, #8]
      break;
 8002d00:	e03c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 f8f6 	bl	8002f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2150      	movs	r1, #80	; 0x50
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f94f 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d20:	e02c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 f915 	bl	8002f5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2160      	movs	r1, #96	; 0x60
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f93f 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d40:	e01c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 f8d6 	bl	8002f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f92f 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d60:	e00c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f000 f926 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d72:	e003      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	00100070 	.word	0x00100070
 8002d9c:	00100060 	.word	0x00100060
 8002da0:	00100050 	.word	0x00100050
 8002da4:	00100040 	.word	0x00100040
 8002da8:	00100030 	.word	0x00100030
 8002dac:	00100020 	.word	0x00100020

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a46      	ldr	r2, [pc, #280]	; (8002edc <TIM_Base_SetConfig+0x12c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d017      	beq.n	8002df8 <TIM_Base_SetConfig+0x48>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d013      	beq.n	8002df8 <TIM_Base_SetConfig+0x48>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a43      	ldr	r2, [pc, #268]	; (8002ee0 <TIM_Base_SetConfig+0x130>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00f      	beq.n	8002df8 <TIM_Base_SetConfig+0x48>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a42      	ldr	r2, [pc, #264]	; (8002ee4 <TIM_Base_SetConfig+0x134>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x48>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a41      	ldr	r2, [pc, #260]	; (8002ee8 <TIM_Base_SetConfig+0x138>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x48>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a40      	ldr	r2, [pc, #256]	; (8002eec <TIM_Base_SetConfig+0x13c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x48>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3f      	ldr	r2, [pc, #252]	; (8002ef0 <TIM_Base_SetConfig+0x140>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a33      	ldr	r2, [pc, #204]	; (8002edc <TIM_Base_SetConfig+0x12c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d023      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d01f      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a30      	ldr	r2, [pc, #192]	; (8002ee0 <TIM_Base_SetConfig+0x130>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01b      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2f      	ldr	r2, [pc, #188]	; (8002ee4 <TIM_Base_SetConfig+0x134>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d017      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <TIM_Base_SetConfig+0x138>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2d      	ldr	r2, [pc, #180]	; (8002eec <TIM_Base_SetConfig+0x13c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00f      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2d      	ldr	r2, [pc, #180]	; (8002ef4 <TIM_Base_SetConfig+0x144>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <TIM_Base_SetConfig+0x148>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <TIM_Base_SetConfig+0x14c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <TIM_Base_SetConfig+0x140>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <TIM_Base_SetConfig+0x12c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <TIM_Base_SetConfig+0x110>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	; (8002eec <TIM_Base_SetConfig+0x13c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00f      	beq.n	8002ec0 <TIM_Base_SetConfig+0x110>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <TIM_Base_SetConfig+0x144>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_Base_SetConfig+0x110>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <TIM_Base_SetConfig+0x148>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d007      	beq.n	8002ec0 <TIM_Base_SetConfig+0x110>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <TIM_Base_SetConfig+0x14c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x110>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <TIM_Base_SetConfig+0x140>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40013400 	.word	0x40013400
 8002ef0:	40015000 	.word	0x40015000
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800

08002f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 030a 	bic.w	r3, r3, #10
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f023 0210 	bic.w	r2, r3, #16
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	031b      	lsls	r3, r3, #12
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f043 0307 	orr.w	r3, r3, #7
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	431a      	orrs	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800304c:	2302      	movs	r3, #2
 800304e:	e074      	b.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a34      	ldr	r2, [pc, #208]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a33      	ldr	r2, [pc, #204]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a31      	ldr	r2, [pc, #196]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d108      	bne.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003094:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a21      	ldr	r2, [pc, #132]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d01d      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d018      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d10c      	bne.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4313      	orrs	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40013400 	.word	0x40013400
 8003150:	40015000 	.word	0x40015000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40014000 	.word	0x40014000

08003164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e042      	b.n	80031fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7fd fc97 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2224      	movs	r2, #36	; 0x24
 8003192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f82c 	bl	8003204 <UART_SetConfig>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e022      	b.n	80031fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fb1c 	bl	80037fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fba3 	bl	8003940 <UART_CheckIdleState>
 80031fa:	4603      	mov	r3, r0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003208:	b08c      	sub	sp, #48	; 0x30
 800320a:	af00      	add	r7, sp, #0
 800320c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	431a      	orrs	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4313      	orrs	r3, r2
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4baa      	ldr	r3, [pc, #680]	; (80034dc <UART_SetConfig+0x2d8>)
 8003234:	4013      	ands	r3, r2
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800323c:	430b      	orrs	r3, r1
 800323e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a9f      	ldr	r2, [pc, #636]	; (80034e0 <UART_SetConfig+0x2dc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	4313      	orrs	r3, r2
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800327a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	f023 010f 	bic.w	r1, r3, #15
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a90      	ldr	r2, [pc, #576]	; (80034e4 <UART_SetConfig+0x2e0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d125      	bne.n	80032f4 <UART_SetConfig+0xf0>
 80032a8:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <UART_SetConfig+0x2e4>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d81a      	bhi.n	80032ec <UART_SetConfig+0xe8>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <UART_SetConfig+0xb8>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032dd 	.word	0x080032dd
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032d2:	e116      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032d4:	2302      	movs	r3, #2
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032da:	e112      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032dc:	2304      	movs	r3, #4
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032e2:	e10e      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032e4:	2308      	movs	r3, #8
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ea:	e10a      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032ec:	2310      	movs	r3, #16
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f2:	e106      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <UART_SetConfig+0x2e8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d138      	bne.n	8003370 <UART_SetConfig+0x16c>
 80032fe:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <UART_SetConfig+0x2e4>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d82d      	bhi.n	8003368 <UART_SetConfig+0x164>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <UART_SetConfig+0x110>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003349 	.word	0x08003349
 8003318:	08003369 	.word	0x08003369
 800331c:	08003369 	.word	0x08003369
 8003320:	08003369 	.word	0x08003369
 8003324:	08003359 	.word	0x08003359
 8003328:	08003369 	.word	0x08003369
 800332c:	08003369 	.word	0x08003369
 8003330:	08003369 	.word	0x08003369
 8003334:	08003351 	.word	0x08003351
 8003338:	08003369 	.word	0x08003369
 800333c:	08003369 	.word	0x08003369
 8003340:	08003369 	.word	0x08003369
 8003344:	08003361 	.word	0x08003361
 8003348:	2300      	movs	r3, #0
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334e:	e0d8      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003350:	2302      	movs	r3, #2
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003356:	e0d4      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003358:	2304      	movs	r3, #4
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800335e:	e0d0      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003360:	2308      	movs	r3, #8
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003366:	e0cc      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003368:	2310      	movs	r3, #16
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800336e:	e0c8      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <UART_SetConfig+0x2ec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d125      	bne.n	80033c6 <UART_SetConfig+0x1c2>
 800337a:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <UART_SetConfig+0x2e4>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	d016      	beq.n	80033b6 <UART_SetConfig+0x1b2>
 8003388:	2b30      	cmp	r3, #48	; 0x30
 800338a:	d818      	bhi.n	80033be <UART_SetConfig+0x1ba>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d00a      	beq.n	80033a6 <UART_SetConfig+0x1a2>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d814      	bhi.n	80033be <UART_SetConfig+0x1ba>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <UART_SetConfig+0x19a>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d008      	beq.n	80033ae <UART_SetConfig+0x1aa>
 800339c:	e00f      	b.n	80033be <UART_SetConfig+0x1ba>
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a4:	e0ad      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033a6:	2302      	movs	r3, #2
 80033a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ac:	e0a9      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033ae:	2304      	movs	r3, #4
 80033b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033b4:	e0a5      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033b6:	2308      	movs	r3, #8
 80033b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033bc:	e0a1      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033be:	2310      	movs	r3, #16
 80033c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033c4:	e09d      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <UART_SetConfig+0x2f0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d125      	bne.n	800341c <UART_SetConfig+0x218>
 80033d0:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <UART_SetConfig+0x2e4>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033da:	2bc0      	cmp	r3, #192	; 0xc0
 80033dc:	d016      	beq.n	800340c <UART_SetConfig+0x208>
 80033de:	2bc0      	cmp	r3, #192	; 0xc0
 80033e0:	d818      	bhi.n	8003414 <UART_SetConfig+0x210>
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d00a      	beq.n	80033fc <UART_SetConfig+0x1f8>
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d814      	bhi.n	8003414 <UART_SetConfig+0x210>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <UART_SetConfig+0x1f0>
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d008      	beq.n	8003404 <UART_SetConfig+0x200>
 80033f2:	e00f      	b.n	8003414 <UART_SetConfig+0x210>
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fa:	e082      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003402:	e07e      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800340a:	e07a      	b.n	8003502 <UART_SetConfig+0x2fe>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003412:	e076      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800341a:	e072      	b.n	8003502 <UART_SetConfig+0x2fe>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a35      	ldr	r2, [pc, #212]	; (80034f8 <UART_SetConfig+0x2f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12a      	bne.n	800347c <UART_SetConfig+0x278>
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <UART_SetConfig+0x2e4>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003434:	d01a      	beq.n	800346c <UART_SetConfig+0x268>
 8003436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343a:	d81b      	bhi.n	8003474 <UART_SetConfig+0x270>
 800343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003440:	d00c      	beq.n	800345c <UART_SetConfig+0x258>
 8003442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003446:	d815      	bhi.n	8003474 <UART_SetConfig+0x270>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <UART_SetConfig+0x250>
 800344c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003450:	d008      	beq.n	8003464 <UART_SetConfig+0x260>
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x270>
 8003454:	2300      	movs	r3, #0
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345a:	e052      	b.n	8003502 <UART_SetConfig+0x2fe>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003462:	e04e      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800346a:	e04a      	b.n	8003502 <UART_SetConfig+0x2fe>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003472:	e046      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347a:	e042      	b.n	8003502 <UART_SetConfig+0x2fe>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <UART_SetConfig+0x2dc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d13a      	bne.n	80034fc <UART_SetConfig+0x2f8>
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <UART_SetConfig+0x2e4>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003494:	d01a      	beq.n	80034cc <UART_SetConfig+0x2c8>
 8003496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800349a:	d81b      	bhi.n	80034d4 <UART_SetConfig+0x2d0>
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a0:	d00c      	beq.n	80034bc <UART_SetConfig+0x2b8>
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	d815      	bhi.n	80034d4 <UART_SetConfig+0x2d0>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <UART_SetConfig+0x2b0>
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d008      	beq.n	80034c4 <UART_SetConfig+0x2c0>
 80034b2:	e00f      	b.n	80034d4 <UART_SetConfig+0x2d0>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ba:	e022      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034bc:	2302      	movs	r3, #2
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c2:	e01e      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034c4:	2304      	movs	r3, #4
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ca:	e01a      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034cc:	2308      	movs	r3, #8
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d2:	e016      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034d4:	2310      	movs	r3, #16
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034da:	e012      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034dc:	cfff69f3 	.word	0xcfff69f3
 80034e0:	40008000 	.word	0x40008000
 80034e4:	40013800 	.word	0x40013800
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40004800 	.word	0x40004800
 80034f4:	40004c00 	.word	0x40004c00
 80034f8:	40005000 	.word	0x40005000
 80034fc:	2310      	movs	r3, #16
 80034fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4aae      	ldr	r2, [pc, #696]	; (80037c0 <UART_SetConfig+0x5bc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	f040 8097 	bne.w	800363c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800350e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003512:	2b08      	cmp	r3, #8
 8003514:	d823      	bhi.n	800355e <UART_SetConfig+0x35a>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x318>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003541 	.word	0x08003541
 8003520:	0800355f 	.word	0x0800355f
 8003524:	08003549 	.word	0x08003549
 8003528:	0800355f 	.word	0x0800355f
 800352c:	0800354f 	.word	0x0800354f
 8003530:	0800355f 	.word	0x0800355f
 8003534:	0800355f 	.word	0x0800355f
 8003538:	0800355f 	.word	0x0800355f
 800353c:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7fe ff98 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003546:	e010      	b.n	800356a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003548:	4b9e      	ldr	r3, [pc, #632]	; (80037c4 <UART_SetConfig+0x5c0>)
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800354c:	e00d      	b.n	800356a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354e:	f7fe ff23 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003554:	e009      	b.n	800356a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800355c:	e005      	b.n	800356a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8130 	beq.w	80037d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	4a94      	ldr	r2, [pc, #592]	; (80037c8 <UART_SetConfig+0x5c4>)
 8003578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357c:	461a      	mov	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	fbb3 f3f2 	udiv	r3, r3, r2
 8003584:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d305      	bcc.n	80035a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d903      	bls.n	80035aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035a8:	e113      	b.n	80037d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2200      	movs	r2, #0
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	60fa      	str	r2, [r7, #12]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	4a84      	ldr	r2, [pc, #528]	; (80037c8 <UART_SetConfig+0x5c4>)
 80035b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2200      	movs	r2, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035cc:	f7fc fe24 	bl	8000218 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	020b      	lsls	r3, r1, #8
 80035e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035e6:	0202      	lsls	r2, r0, #8
 80035e8:	6979      	ldr	r1, [r7, #20]
 80035ea:	6849      	ldr	r1, [r1, #4]
 80035ec:	0849      	lsrs	r1, r1, #1
 80035ee:	2000      	movs	r0, #0
 80035f0:	460c      	mov	r4, r1
 80035f2:	4605      	mov	r5, r0
 80035f4:	eb12 0804 	adds.w	r8, r2, r4
 80035f8:	eb43 0905 	adc.w	r9, r3, r5
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	469a      	mov	sl, r3
 8003604:	4693      	mov	fp, r2
 8003606:	4652      	mov	r2, sl
 8003608:	465b      	mov	r3, fp
 800360a:	4640      	mov	r0, r8
 800360c:	4649      	mov	r1, r9
 800360e:	f7fc fe03 	bl	8000218 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4613      	mov	r3, r2
 8003618:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003620:	d308      	bcc.n	8003634 <UART_SetConfig+0x430>
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d204      	bcs.n	8003634 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	e0ce      	b.n	80037d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800363a:	e0ca      	b.n	80037d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d166      	bne.n	8003714 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800364a:	2b08      	cmp	r3, #8
 800364c:	d827      	bhi.n	800369e <UART_SetConfig+0x49a>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x450>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003679 	.word	0x08003679
 8003658:	08003681 	.word	0x08003681
 800365c:	08003689 	.word	0x08003689
 8003660:	0800369f 	.word	0x0800369f
 8003664:	0800368f 	.word	0x0800368f
 8003668:	0800369f 	.word	0x0800369f
 800366c:	0800369f 	.word	0x0800369f
 8003670:	0800369f 	.word	0x0800369f
 8003674:	08003697 	.word	0x08003697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fefc 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 800367c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800367e:	e014      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe ff0e 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8003684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003686:	e010      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003688:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <UART_SetConfig+0x5c0>)
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800368c:	e00d      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368e:	f7fe fe83 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003694:	e009      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800369c:	e005      	b.n	80036aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8090 	beq.w	80037d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	4a44      	ldr	r2, [pc, #272]	; (80037c8 <UART_SetConfig+0x5c4>)
 80036b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036bc:	461a      	mov	r2, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036c4:	005a      	lsls	r2, r3, #1
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	441a      	add	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d916      	bls.n	800370c <UART_SetConfig+0x508>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d212      	bcs.n	800370c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f023 030f 	bic.w	r3, r3, #15
 80036ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	8bfb      	ldrh	r3, [r7, #30]
 80036fe:	4313      	orrs	r3, r2
 8003700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	8bfa      	ldrh	r2, [r7, #30]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e062      	b.n	80037d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003712:	e05e      	b.n	80037d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003714:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003718:	2b08      	cmp	r3, #8
 800371a:	d828      	bhi.n	800376e <UART_SetConfig+0x56a>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <UART_SetConfig+0x520>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003749 	.word	0x08003749
 8003728:	08003751 	.word	0x08003751
 800372c:	08003759 	.word	0x08003759
 8003730:	0800376f 	.word	0x0800376f
 8003734:	0800375f 	.word	0x0800375f
 8003738:	0800376f 	.word	0x0800376f
 800373c:	0800376f 	.word	0x0800376f
 8003740:	0800376f 	.word	0x0800376f
 8003744:	08003767 	.word	0x08003767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fe94 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800374e:	e014      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003750:	f7fe fea6 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003756:	e010      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <UART_SetConfig+0x5c0>)
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800375c:	e00d      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375e:	f7fe fe1b 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003764:	e009      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800376c:	e005      	b.n	800377a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003778:	bf00      	nop
    }

    if (pclk != 0U)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d028      	beq.n	80037d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <UART_SetConfig+0x5c4>)
 8003786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800378a:	461a      	mov	r2, r3
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	441a      	add	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d910      	bls.n	80037cc <UART_SetConfig+0x5c8>
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d20c      	bcs.n	80037cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e009      	b.n	80037d2 <UART_SetConfig+0x5ce>
 80037be:	bf00      	nop
 80037c0:	40008000 	.word	0x40008000
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	08003df4 	.word	0x08003df4
      }
      else
      {
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2201      	movs	r2, #1
 80037de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3730      	adds	r7, #48	; 0x30
 80037f6:	46bd      	mov	sp, r7
 80037f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01a      	beq.n	8003912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038fa:	d10a      	bne.n	8003912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003950:	f7fd f99a 	bl	8000c88 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d10e      	bne.n	8003982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f82f 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e025      	b.n	80039ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d10e      	bne.n	80039ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f819 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e00f      	b.n	80039ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b09c      	sub	sp, #112	; 0x70
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e6:	e0a9      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	f000 80a5 	beq.w	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fd f949 	bl	8000c88 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d140      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e6      	bne.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	663b      	str	r3, [r7, #96]	; 0x60
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e069      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d051      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa6:	d149      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e6      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	613b      	str	r3, [r7, #16]
   return(result);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b04:	623a      	str	r2, [r7, #32]
 8003b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	69f9      	ldr	r1, [r7, #28]
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e010      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	f43f af46 	beq.w	80039e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3770      	adds	r7, #112	; 0x70
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_UARTEx_DisableFifoMode+0x16>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e027      	b.n	8003bcc <HAL_UARTEx_DisableFifoMode+0x66>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003baa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e02d      	b.n	8003c4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f84f 	bl	8003cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e02d      	b.n	8003cc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f811 	bl	8003cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d108      	bne.n	8003cf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cf0:	e031      	b.n	8003d56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	0e5b      	lsrs	r3, r3, #25
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	0f5b      	lsrs	r3, r3, #29
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d1a:	7bbb      	ldrb	r3, [r7, #14]
 8003d1c:	7b3a      	ldrb	r2, [r7, #12]
 8003d1e:	4911      	ldr	r1, [pc, #68]	; (8003d64 <UARTEx_SetNbDataToProcess+0x94>)
 8003d20:	5c8a      	ldrb	r2, [r1, r2]
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d26:	7b3a      	ldrb	r2, [r7, #12]
 8003d28:	490f      	ldr	r1, [pc, #60]	; (8003d68 <UARTEx_SetNbDataToProcess+0x98>)
 8003d2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	7b7a      	ldrb	r2, [r7, #13]
 8003d3c:	4909      	ldr	r1, [pc, #36]	; (8003d64 <UARTEx_SetNbDataToProcess+0x94>)
 8003d3e:	5c8a      	ldrb	r2, [r1, r2]
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d44:	7b7a      	ldrb	r2, [r7, #13]
 8003d46:	4908      	ldr	r1, [pc, #32]	; (8003d68 <UARTEx_SetNbDataToProcess+0x98>)
 8003d48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	08003e0c 	.word	0x08003e0c
 8003d68:	08003e14 	.word	0x08003e14

08003d6c <__libc_init_array>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4d0d      	ldr	r5, [pc, #52]	; (8003da4 <__libc_init_array+0x38>)
 8003d70:	4c0d      	ldr	r4, [pc, #52]	; (8003da8 <__libc_init_array+0x3c>)
 8003d72:	1b64      	subs	r4, r4, r5
 8003d74:	10a4      	asrs	r4, r4, #2
 8003d76:	2600      	movs	r6, #0
 8003d78:	42a6      	cmp	r6, r4
 8003d7a:	d109      	bne.n	8003d90 <__libc_init_array+0x24>
 8003d7c:	4d0b      	ldr	r5, [pc, #44]	; (8003dac <__libc_init_array+0x40>)
 8003d7e:	4c0c      	ldr	r4, [pc, #48]	; (8003db0 <__libc_init_array+0x44>)
 8003d80:	f000 f820 	bl	8003dc4 <_init>
 8003d84:	1b64      	subs	r4, r4, r5
 8003d86:	10a4      	asrs	r4, r4, #2
 8003d88:	2600      	movs	r6, #0
 8003d8a:	42a6      	cmp	r6, r4
 8003d8c:	d105      	bne.n	8003d9a <__libc_init_array+0x2e>
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d94:	4798      	blx	r3
 8003d96:	3601      	adds	r6, #1
 8003d98:	e7ee      	b.n	8003d78 <__libc_init_array+0xc>
 8003d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9e:	4798      	blx	r3
 8003da0:	3601      	adds	r6, #1
 8003da2:	e7f2      	b.n	8003d8a <__libc_init_array+0x1e>
 8003da4:	08003e24 	.word	0x08003e24
 8003da8:	08003e24 	.word	0x08003e24
 8003dac:	08003e24 	.word	0x08003e24
 8003db0:	08003e28 	.word	0x08003e28

08003db4 <memset>:
 8003db4:	4402      	add	r2, r0
 8003db6:	4603      	mov	r3, r0
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d100      	bne.n	8003dbe <memset+0xa>
 8003dbc:	4770      	bx	lr
 8003dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc2:	e7f9      	b.n	8003db8 <memset+0x4>

08003dc4 <_init>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr

08003dd0 <_fini>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr
