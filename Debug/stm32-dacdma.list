
stm32-dacdma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d8  080042d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e0  080042e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000000c  080042f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080042f4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001601e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d43  00000000  00000000  0003605a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00038da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00039fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002738a  00000000  00000000  0003b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165f8  00000000  00000000  00062432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe312  00000000  00000000  00078a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176d3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  00176d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004270 	.word	0x08004270

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004270 	.word	0x08004270

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000522:	463b      	mov	r3, r7
 8000524:	2230      	movs	r2, #48	; 0x30
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f003 fe99 	bl	8004260 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_DAC1_Init+0x6c>)
 8000530:	4a16      	ldr	r2, [pc, #88]	; (800058c <MX_DAC1_Init+0x70>)
 8000532:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <MX_DAC1_Init+0x6c>)
 8000536:	f000 fd0c 	bl	8000f52 <HAL_DAC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000540:	f000 f9b3 	bl	80008aa <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000544:	2302      	movs	r3, #2
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000554:	2316      	movs	r3, #22
 8000556:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_DAC1_Init+0x6c>)
 8000570:	f000 fdfe 	bl	8001170 <HAL_DAC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800057a:	f000 f996 	bl	80008aa <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	3730      	adds	r7, #48	; 0x30
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028
 800058c:	50000800 	.word	0x50000800

08000590 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a2b      	ldr	r2, [pc, #172]	; (800065c <HAL_DAC_MspInit+0xcc>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d150      	bne.n	8000654 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <HAL_DAC_MspInit+0xd0>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e2:	2310      	movs	r3, #16
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f001 fa5e 	bl	8001ab8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 80005fe:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <HAL_DAC_MspInit+0xd8>)
 8000600:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000604:	2206      	movs	r2, #6
 8000606:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800060a:	2210      	movs	r2, #16
 800060c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800061c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000620:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000628:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800062c:	2220      	movs	r2, #32
 800062e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000636:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800063a:	f000 ffcb 	bl	80015d4 <HAL_DMA_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000644:	f000 f931 	bl	80008aa <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <HAL_DAC_MspInit+0xd4>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	; 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	50000800 	.word	0x50000800
 8000660:	40021000 	.word	0x40021000
 8000664:	2000003c 	.word	0x2000003c
 8000668:	40020008 	.word	0x40020008

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_DMA_Init+0x50>)
 8000674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <MX_DMA_Init+0x50>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6493      	str	r3, [r2, #72]	; 0x48
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_DMA_Init+0x50>)
 8000680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x50>)
 800068c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MX_DMA_Init+0x50>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6493      	str	r3, [r2, #72]	; 0x48
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x50>)
 8000698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200b      	movs	r0, #11
 80006a8:	f000 fc1f 	bl	8000eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006ac:	200b      	movs	r0, #11
 80006ae:	f000 fc36 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a2e      	ldr	r2, [pc, #184]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_GPIO_Init+0xd4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f001 fb3d 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000748:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_GPIO_Init+0xd8>)
 800075a:	f001 f9ad 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075e:	2320      	movs	r3, #32
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f001 f99e 	bl	8001ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2028      	movs	r0, #40	; 0x28
 8000782:	f000 fbb2 	bl	8000eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000786:	2028      	movs	r0, #40	; 0x28
 8000788:	f000 fbc9 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	48000800 	.word	0x48000800

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fa34 	bl	8000c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f835 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff ff89 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ae:	f7ff ff5d 	bl	800066c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007b2:	f000 f961 	bl	8000a78 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 80007b6:	f000 f8ef 	bl	8000998 <MX_TIM4_Init>
  MX_DAC1_Init();
 80007ba:	f7ff feaf 	bl	800051c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start(&htim4);
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <main+0x68>)
 80007c0:	f002 fbc6 	bl	8002f50 <HAL_TIM_Base_Start>


  // Generate node one signal sample
  for(uint16_t i = 0; i < NODE_ONE_SAMPLE_SIZE; i++){
 80007c4:	2300      	movs	r3, #0
 80007c6:	82fb      	strh	r3, [r7, #22]
 80007c8:	e008      	b.n	80007dc <main+0x40>
	  node_one_signal[i] = (0xFFF+1)/2.0;
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <main+0x6c>)
 80007ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint16_t i = 0; i < NODE_ONE_SAMPLE_SIZE; i++){
 80007d6:	8afb      	ldrh	r3, [r7, #22]
 80007d8:	3301      	adds	r3, #1
 80007da:	82fb      	strh	r3, [r7, #22]
 80007dc:	8afb      	ldrh	r3, [r7, #22]
 80007de:	2b63      	cmp	r3, #99	; 0x63
 80007e0:	d9f3      	bls.n	80007ca <main+0x2e>
  }

  // Start DAC with DMA

  uint32_t DAC_OUT[4] = {0, 1241, 2482, 3723};
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <main+0x70>)
 80007e4:	1d3c      	adds	r4, r7, #4
 80007e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t i = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	757b      	strb	r3, [r7, #21]

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, node_one_signal, NODE_ONE_SAMPLE_SIZE, DAC_ALIGN_12B_R);
 80007f0:	2300      	movs	r3, #0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <main+0x6c>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <main+0x74>)
 80007fc:	f000 fbcc 	bl	8000f98 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000800:	e7fe      	b.n	8000800 <main+0x64>
 8000802:	bf00      	nop
 8000804:	2000022c 	.word	0x2000022c
 8000808:	2000009c 	.word	0x2000009c
 800080c:	08004288 	.word	0x08004288
 8000810:	20000028 	.word	0x20000028

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2238      	movs	r2, #56	; 0x38
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fd1c 	bl	8004260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000836:	2000      	movs	r0, #0
 8000838:	f001 fafc 	bl	8001e34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	2302      	movs	r3, #2
 8000850:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000856:	2355      	movs	r3, #85	; 0x55
 8000858:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fb96 	bl	8001f9c <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000876:	f000 f818 	bl	80008aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fe9a 	bl	80025cc <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800089e:	f000 f804 	bl	80008aa <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3750      	adds	r7, #80	; 0x50
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ae:	b672      	cpsid	i
}
 80008b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6613      	str	r3, [r2, #96]	; 0x60
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	; 0x58
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ea:	f001 fb47 	bl	8001f7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f9b4 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <DMA1_Channel1_IRQHandler+0x10>)
 8000956:	f000 ff60 	bl	800181a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000003c 	.word	0x2000003c

08000964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000968:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800096c:	f001 fa3e 	bl	8001dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009b8:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <MX_TIM4_Init+0x9c>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21250-1;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009be:	f245 3201 	movw	r2, #21249	; 0x5301
 80009c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009cc:	f240 321f 	movw	r2, #799	; 0x31f
 80009d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009e0:	f002 fa5e 	bl	8002ea0 <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80009ea:	f7ff ff5e 	bl	80008aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_TIM4_Init+0x98>)
 80009fc:	f002 fb18 	bl	8003030 <HAL_TIM_ConfigClockSource>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000a06:	f7ff ff50 	bl	80008aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_TIM4_Init+0x98>)
 8000a18:	f002 fd64 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000a22:	f7ff ff42 	bl	80008aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000022c 	.word	0x2000022c
 8000a34:	40000800 	.word	0x40000800

08000a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_TIM_Base_MspInit+0x38>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10b      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_TIM_Base_MspInit+0x3c>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <HAL_TIM_Base_MspInit+0x3c>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6593      	str	r3, [r2, #88]	; 0x58
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_TIM_Base_MspInit+0x3c>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40000800 	.word	0x40000800
 8000a74:	40021000 	.word	0x40021000

08000a78 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <MX_LPUART1_UART_Init+0x90>)
 8000a80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000abc:	f002 fda8 	bl	8003610 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ac6:	f7ff fef0 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000ace:	f003 fad9 	bl	8004084 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ad8:	f7ff fee7 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000adc:	2100      	movs	r1, #0
 8000ade:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000ae0:	f003 fb0e 	bl	8004100 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000aea:	f7ff fede 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_LPUART1_UART_Init+0x8c>)
 8000af0:	f003 fa8f 	bl	8004012 <HAL_UARTEx_DisableFifoMode>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000afa:	f7ff fed6 	bl	80008aa <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000278 	.word	0x20000278
 8000b08:	40008000 	.word	0x40008000

08000b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09e      	sub	sp, #120	; 0x78
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2254      	movs	r2, #84	; 0x54
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 fb97 	bl	8004260 <memset>
  if(uartHandle->Instance==LPUART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_UART_MspInit+0xa8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d136      	bne.n	8000baa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 ff5b 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b54:	f7ff fea9 	bl	80008aa <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5c:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 ff87 	bl	8001ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3778      	adds	r7, #120	; 0x78
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40008000 	.word	0x40008000
 8000bb8:	40021000 	.word	0x40021000

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be6:	f7ff fec5 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f003 fb15 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fdd5 	bl	800079c <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   r0, =_estack
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	2000030c 	.word	0x2000030c

08000c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_2_IRQHandler>

08000c0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f95b 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f80e 	bl	8000c40 <HAL_InitTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e001      	b.n	8000c34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c30:	f7ff fe40 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c34:	79fb      	ldrb	r3, [r7, #7]

}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_InitTick+0x68>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d022      	beq.n	8000c9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_InitTick+0x6c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_InitTick+0x68>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f966 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10f      	bne.n	8000c94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b0f      	cmp	r3, #15
 8000c78:	d809      	bhi.n	8000c8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	6879      	ldr	r1, [r7, #4]
 8000c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c82:	f000 f932 	bl	8000eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_InitTick+0x70>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e007      	b.n	8000c9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e004      	b.n	8000c9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e001      	b.n	8000c9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cc4:	6013      	str	r3, [r2, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20000308 	.word	0x20000308
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000308 	.word	0x20000308

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d004      	beq.n	8000d14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_Delay+0x40>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	4413      	add	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d14:	bf00      	nop
 8000d16:	f7ff ffdf 	bl	8000cd8 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d8f7      	bhi.n	8000d16 <HAL_Delay+0x26>
  {
  }
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000008 	.word	0x20000008

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff29 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff40 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff33 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa4 	bl	8000e90 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e014      	b.n	8000f8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	791b      	ldrb	r3, [r3, #4]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fb0b 	bl	8000590 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DAC_Start_DMA+0x1e>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e0ae      	b.n	8001114 <HAL_DAC_Start_DMA+0x17c>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d12f      	bne.n	8001028 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4a53      	ldr	r2, [pc, #332]	; (800111c <HAL_DAC_Start_DMA+0x184>)
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_DAC_Start_DMA+0x188>)
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_DAC_Start_DMA+0x18c>)
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d013      	beq.n	800101e <HAL_DAC_Start_DMA+0x86>
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d845      	bhi.n	8001088 <HAL_DAC_Start_DMA+0xf0>
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_DAC_Start_DMA+0x72>
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	2b04      	cmp	r3, #4
 8001006:	d005      	beq.n	8001014 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001008:	e03e      	b.n	8001088 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3308      	adds	r3, #8
 8001010:	613b      	str	r3, [r7, #16]
        break;
 8001012:	e03c      	b.n	800108e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	330c      	adds	r3, #12
 800101a:	613b      	str	r3, [r7, #16]
        break;
 800101c:	e037      	b.n	800108e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3310      	adds	r3, #16
 8001024:	613b      	str	r3, [r7, #16]
        break;
 8001026:	e032      	b.n	800108e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <HAL_DAC_Start_DMA+0x190>)
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4a3d      	ldr	r2, [pc, #244]	; (800112c <HAL_DAC_Start_DMA+0x194>)
 8001036:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4a3c      	ldr	r2, [pc, #240]	; (8001130 <HAL_DAC_Start_DMA+0x198>)
 800103e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800104e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	2b08      	cmp	r3, #8
 8001054:	d013      	beq.n	800107e <HAL_DAC_Start_DMA+0xe6>
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	2b08      	cmp	r3, #8
 800105a:	d817      	bhi.n	800108c <HAL_DAC_Start_DMA+0xf4>
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_DAC_Start_DMA+0xd2>
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d005      	beq.n	8001074 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001068:	e010      	b.n	800108c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3314      	adds	r3, #20
 8001070:	613b      	str	r3, [r7, #16]
        break;
 8001072:	e00c      	b.n	800108e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3318      	adds	r3, #24
 800107a:	613b      	str	r3, [r7, #16]
        break;
 800107c:	e007      	b.n	800108e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	331c      	adds	r3, #28
 8001084:	613b      	str	r3, [r7, #16]
        break;
 8001086:	e002      	b.n	800108e <HAL_DAC_Start_DMA+0xf6>
        break;
 8001088:	bf00      	nop
 800108a:	e000      	b.n	800108e <HAL_DAC_Start_DMA+0xf6>
        break;
 800108c:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d111      	bne.n	80010b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6898      	ldr	r0, [r3, #8]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	f000 fb39 	bl	8001724 <HAL_DMA_Start_IT>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
 80010b6:	e010      	b.n	80010da <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68d8      	ldr	r0, [r3, #12]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	f000 fb27 	bl	8001724 <HAL_DMA_Start_IT>
 80010d6:	4603      	mov	r3, r0
 80010d8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10f      	bne.n	8001106 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6819      	ldr	r1, [r3, #0]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2201      	movs	r2, #1
 80010f4:	409a      	lsls	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fdf6 	bl	8000cf0 <HAL_Delay>
 8001104:	e005      	b.n	8001112 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	f043 0204 	orr.w	r2, r3, #4
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	080014c1 	.word	0x080014c1
 8001120:	080014e3 	.word	0x080014e3
 8001124:	080014ff 	.word	0x080014ff
 8001128:	08001569 	.word	0x08001569
 800112c:	0800158b 	.word	0x0800158b
 8001130:	080015a7 	.word	0x080015a7

08001134 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	795b      	ldrb	r3, [r3, #5]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_DAC_ConfigChannel+0x18>
 8001184:	2302      	movs	r3, #2
 8001186:	e192      	b.n	80014ae <HAL_DAC_ConfigChannel+0x33e>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2201      	movs	r2, #1
 800118c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2202      	movs	r2, #2
 8001192:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d174      	bne.n	8001286 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800119c:	f7ff fd9c 	bl	8000cd8 <HAL_GetTick>
 80011a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d134      	bne.n	8001212 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011a8:	e011      	b.n	80011ce <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80011aa:	f7ff fd95 	bl	8000cd8 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d90a      	bls.n	80011ce <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f043 0208 	orr.w	r2, r3, #8
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2203      	movs	r2, #3
 80011c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e16f      	b.n	80014ae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e6      	bne.n	80011aa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff fd87 	bl	8000cf0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
 80011ec:	e01e      	b.n	800122c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80011ee:	f7ff fd73 	bl	8000cd8 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d90a      	bls.n	8001212 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f043 0208 	orr.w	r2, r3, #8
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2203      	movs	r2, #3
 800120c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e14d      	b.n	80014ae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	2b00      	cmp	r3, #0
 800121a:	dbe8      	blt.n	80011ee <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fd67 	bl	8000cf0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800122a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	ea02 0103 	and.w	r1, r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	409a      	lsls	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	21ff      	movs	r1, #255	; 0xff
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	ea02 0103 	and.w	r1, r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	409a      	lsls	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d11d      	bne.n	80012ca <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	221f      	movs	r2, #31
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a6:	4013      	ands	r3, r2
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012be:	4313      	orrs	r3, r2
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2207      	movs	r2, #7
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e2:	4013      	ands	r3, r2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	e00f      	b.n	8001314 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d102      	bne.n	8001302 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
 8001300:	e008      	b.n	8001314 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800130a:	2301      	movs	r3, #1
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	e001      	b.n	8001314 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	4313      	orrs	r3, r2
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001336:	4013      	ands	r3, r2
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d102      	bne.n	8001348 <HAL_DAC_ConfigChannel+0x1d8>
 8001342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001346:	e000      	b.n	800134a <HAL_DAC_ConfigChannel+0x1da>
 8001348:	2300      	movs	r3, #0
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001362:	4013      	ands	r3, r2
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	795b      	ldrb	r3, [r3, #5]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d102      	bne.n	8001374 <HAL_DAC_ConfigChannel+0x204>
 800136e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001372:	e000      	b.n	8001376 <HAL_DAC_ConfigChannel+0x206>
 8001374:	2300      	movs	r3, #0
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d114      	bne.n	80013b6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800138c:	f001 fabc 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8001390:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4a48      	ldr	r2, [pc, #288]	; (80014b8 <HAL_DAC_ConfigChannel+0x348>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d904      	bls.n	80013a4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e00f      	b.n	80013c4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_DAC_ConfigChannel+0x34c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d90a      	bls.n	80013c2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
 80013b4:	e006      	b.n	80013c4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	4313      	orrs	r3, r2
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
 80013c0:	e000      	b.n	80013c4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80013c2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d2:	4313      	orrs	r3, r2
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	4013      	ands	r3, r2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	4313      	orrs	r3, r2
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001438:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	22c0      	movs	r2, #192	; 0xc0
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43da      	mvns	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	400a      	ands	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	ea02 0103 	and.w	r1, r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	09896800 	.word	0x09896800
 80014bc:	04c4b400 	.word	0x04c4b400

080014c0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff fe30 	bl	8001134 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	711a      	strb	r2, [r3, #4]
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fe29 	bl	8001148 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fe1f 	bl	800115c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	711a      	strb	r2, [r3, #4]
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff ffd8 	bl	800152c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2201      	movs	r2, #1
 8001580:	711a      	strb	r2, [r3, #4]
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff ffd1 	bl	8001540 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f043 0204 	orr.w	r2, r3, #4
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff ffc7 	bl	8001554 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	711a      	strb	r2, [r3, #4]
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e08d      	b.n	8001702 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_DMA_Init+0x138>)
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d80f      	bhi.n	8001612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <HAL_DMA_Init+0x13c>)
 80015fa:	4413      	add	r3, r2
 80015fc:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_DMA_Init+0x140>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	009a      	lsls	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a42      	ldr	r2, [pc, #264]	; (8001718 <HAL_DMA_Init+0x144>)
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
 8001610:	e00e      	b.n	8001630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b40      	ldr	r3, [pc, #256]	; (800171c <HAL_DMA_Init+0x148>)
 800161a:	4413      	add	r3, r2
 800161c:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <HAL_DMA_Init+0x140>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	009a      	lsls	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a3c      	ldr	r2, [pc, #240]	; (8001720 <HAL_DMA_Init+0x14c>)
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f9b6 	bl	80019f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001690:	d102      	bne.n	8001698 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_DMA_Init+0x104>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d80c      	bhi.n	80016d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f9d6 	bl	8001a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	e008      	b.n	80016ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020407 	.word	0x40020407
 8001710:	bffdfff8 	.word	0xbffdfff8
 8001714:	cccccccd 	.word	0xcccccccd
 8001718:	40020000 	.word	0x40020000
 800171c:	bffdfbf8 	.word	0xbffdfbf8
 8001720:	40020400 	.word	0x40020400

08001724 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_DMA_Start_IT+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e066      	b.n	8001812 <HAL_DMA_Start_IT+0xee>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d155      	bne.n	8001804 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f8fb 	bl	8001978 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 020e 	orr.w	r2, r2, #14
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00f      	b.n	80017bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 020a 	orr.w	r2, r2, #10
 80017ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e005      	b.n	8001810 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001810:	7dfb      	ldrb	r3, [r7, #23]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	2204      	movs	r2, #4
 800183c:	409a      	lsls	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d026      	beq.n	8001894 <HAL_DMA_IRQHandler+0x7a>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d021      	beq.n	8001894 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0204 	bic.w	r2, r2, #4
 800186c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2104      	movs	r1, #4
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	2b00      	cmp	r3, #0
 8001888:	d071      	beq.n	800196e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001892:	e06c      	b.n	800196e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2202      	movs	r2, #2
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d02e      	beq.n	8001906 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d029      	beq.n	8001906 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 020a 	bic.w	r2, r2, #10
 80018ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2102      	movs	r1, #2
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d038      	beq.n	800196e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001904:	e033      	b.n	800196e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2208      	movs	r2, #8
 8001910:	409a      	lsls	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02a      	beq.n	8001970 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d025      	beq.n	8001970 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 020e 	bic.w	r2, r2, #14
 8001932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800196e:	bf00      	nop
 8001970:	bf00      	nop
}
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800198e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d108      	bne.n	80019d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019d6:	e007      	b.n	80019e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d802      	bhi.n	8001a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e001      	b.n	8001a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a10:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3b08      	subs	r3, #8
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	009a      	lsls	r2, r3, #2
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4413      	add	r3, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40020407 	.word	0x40020407
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020820 	.word	0x40020820
 8001a68:	cccccccd 	.word	0xcccccccd
 8001a6c:	40020880 	.word	0x40020880

08001a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a92:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	1000823f 	.word	0x1000823f
 8001ab4:	40020940 	.word	0x40020940

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ac6:	e15a      	b.n	8001d7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 814c 	beq.w	8001d78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d005      	beq.n	8001af8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d130      	bne.n	8001b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	f003 0201 	and.w	r2, r3, #1
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d017      	beq.n	8001b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d123      	bne.n	8001bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80a6 	beq.w	8001d78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2c:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_GPIO_Init+0x2e4>)
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c30:	4a5a      	ldr	r2, [pc, #360]	; (8001d9c <HAL_GPIO_Init+0x2e4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6613      	str	r3, [r2, #96]	; 0x60
 8001c38:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_GPIO_Init+0x2e4>)
 8001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c44:	4a56      	ldr	r2, [pc, #344]	; (8001da0 <HAL_GPIO_Init+0x2e8>)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c6e:	d01f      	beq.n	8001cb0 <HAL_GPIO_Init+0x1f8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x2ec>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d019      	beq.n	8001cac <HAL_GPIO_Init+0x1f4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d013      	beq.n	8001ca8 <HAL_GPIO_Init+0x1f0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_GPIO_Init+0x2f4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00d      	beq.n	8001ca4 <HAL_GPIO_Init+0x1ec>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_GPIO_Init+0x2f8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d007      	beq.n	8001ca0 <HAL_GPIO_Init+0x1e8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_GPIO_Init+0x2fc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_GPIO_Init+0x1e4>
 8001c98:	2305      	movs	r3, #5
 8001c9a:	e00a      	b.n	8001cb2 <HAL_GPIO_Init+0x1fa>
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	e008      	b.n	8001cb2 <HAL_GPIO_Init+0x1fa>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x1fa>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e004      	b.n	8001cb2 <HAL_GPIO_Init+0x1fa>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x1fa>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_GPIO_Init+0x1fa>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc2:	4937      	ldr	r1, [pc, #220]	; (8001da0 <HAL_GPIO_Init+0x2e8>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd0:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf4:	4a30      	ldr	r2, [pc, #192]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d1e:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f ae9d 	bne.w	8001ac8 <HAL_GPIO_Init+0x10>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	48000400 	.word	0x48000400
 8001da8:	48000800 	.word	0x48000800
 8001dac:	48000c00 	.word	0x48000c00
 8001db0:	48001000 	.word	0x48001000
 8001db4:	48001400 	.word	0x48001400
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f806 	bl	8001e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d141      	bne.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e42:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4e:	d131      	bne.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e56:	4a46      	ldr	r2, [pc, #280]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e60:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e68:	4a41      	ldr	r2, [pc, #260]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2232      	movs	r2, #50	; 0x32
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a3f      	ldr	r2, [pc, #252]	; (8001f78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	3301      	adds	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e86:	e002      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f2      	bne.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d158      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e057      	b.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eba:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ec4:	e04d      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ecc:	d141      	bne.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d131      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee2:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef4:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2232      	movs	r2, #50	; 0x32
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f12:	e002      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f26:	d102      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f2      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d112      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e011      	b.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f50:	e007      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40007000 	.word	0x40007000
 8001f74:	20000000 	.word	0x20000000
 8001f78:	431bde83 	.word	0x431bde83

08001f7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8a:	6093      	str	r3, [r2, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e306      	b.n	80025bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d075      	beq.n	80020a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b97      	ldr	r3, [pc, #604]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc4:	4b94      	ldr	r3, [pc, #592]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_OscConfig+0x3e>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x44>
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	4b8d      	ldr	r3, [pc, #564]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d05b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x108>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d157      	bne.n	80020a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e2e1      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x74>
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a84      	ldr	r2, [pc, #528]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x98>
 800201a:	4b7f      	ldr	r3, [pc, #508]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a7e      	ldr	r2, [pc, #504]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b7c      	ldr	r3, [pc, #496]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7b      	ldr	r2, [pc, #492]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002034:	4b78      	ldr	r3, [pc, #480]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a77      	ldr	r2, [pc, #476]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b75      	ldr	r3, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a74      	ldr	r2, [pc, #464]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe fe40 	bl	8000cd8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe fe3c 	bl	8000cd8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e2a6      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206e:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xc0>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe fe2c 	bl	8000cd8 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7fe fe28 	bl	8000cd8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e292      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002096:	4b60      	ldr	r3, [pc, #384]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0xe8>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d075      	beq.n	800219e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_OscConfig+0x136>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_OscConfig+0x13c>
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d11f      	bne.n	8002118 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_OscConfig+0x154>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e265      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	4946      	ldr	r1, [pc, #280]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002104:	4b45      	ldr	r3, [pc, #276]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fd99 	bl	8000c40 <HAL_InitTick>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d043      	beq.n	800219c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e251      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d023      	beq.n	8002168 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3c      	ldr	r2, [pc, #240]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fdd4 	bl	8000cd8 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7fe fdd0 	bl	8000cd8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e23a      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002146:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	492d      	ldr	r1, [pc, #180]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
 8002166:	e01a      	b.n	800219e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 800216e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fdb0 	bl	8000cd8 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7fe fdac 	bl	8000cd8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e216      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1e0>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d041      	beq.n	800222e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01c      	beq.n	80021ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80021b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7fe fd89 	bl	8000cd8 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ca:	f7fe fd85 	bl	8000cd8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1ef      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80021de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0ef      	beq.n	80021ca <HAL_RCC_OscConfig+0x22e>
 80021ea:	e020      	b.n	800222e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7fe fd6c 	bl	8000cd8 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002202:	e00d      	b.n	8002220 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7fe fd68 	bl	8000cd8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d906      	bls.n	8002220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1d2      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002220:	4b8c      	ldr	r3, [pc, #560]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ea      	bne.n	8002204 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80a6 	beq.w	8002388 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002240:	4b84      	ldr	r3, [pc, #528]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x2b4>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x2b6>
 8002250:	2300      	movs	r3, #0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b7f      	ldr	r3, [pc, #508]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	4a7e      	ldr	r2, [pc, #504]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6593      	str	r3, [r2, #88]	; 0x58
 8002262:	4b7c      	ldr	r3, [pc, #496]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002272:	4b79      	ldr	r3, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0x4bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_OscConfig+0x4bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a75      	ldr	r2, [pc, #468]	; (8002458 <HAL_RCC_OscConfig+0x4bc>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7fe fd25 	bl	8000cd8 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7fe fd21 	bl	8000cd8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e18b      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCC_OscConfig+0x4bc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_RCC_OscConfig+0x32e>
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c8:	e024      	b.n	8002314 <HAL_RCC_OscConfig+0x378>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d110      	bne.n	80022f4 <HAL_RCC_OscConfig+0x358>
 80022d2:	4b60      	ldr	r3, [pc, #384]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	4a5e      	ldr	r2, [pc, #376]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e2:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f2:	e00f      	b.n	8002314 <HAL_RCC_OscConfig+0x378>
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a56      	ldr	r2, [pc, #344]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d016      	beq.n	800234a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7fe fcdc 	bl	8000cd8 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7fe fcd8 	bl	8000cd8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e140      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ed      	beq.n	8002324 <HAL_RCC_OscConfig+0x388>
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7fe fcc5 	bl	8000cd8 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fcc1 	bl	8000cd8 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e129      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ed      	bne.n	8002352 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a34      	ldr	r2, [pc, #208]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03c      	beq.n	800240e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 800239e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a2:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7fe fc94 	bl	8000cd8 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b4:	f7fe fc90 	bl	8000cd8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0fa      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80023c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ef      	beq.n	80023b4 <HAL_RCC_OscConfig+0x418>
 80023d4:	e01b      	b.n	800240e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80023d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe fc77 	bl	8000cd8 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ee:	f7fe fc73 	bl	8000cd8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0dd      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ef      	bne.n	80023ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80d1 	beq.w	80025ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b0c      	cmp	r3, #12
 8002422:	f000 808b 	beq.w	800253c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d15e      	bne.n	80024ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fc4d 	bl	8000cd8 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	e00c      	b.n	800245c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7fe fc49 	bl	8000cd8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d905      	bls.n	800245c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0b3      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ec      	bne.n	8002442 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002468:	4b56      	ldr	r3, [pc, #344]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_RCC_OscConfig+0x62c>)
 800246e:	4013      	ands	r3, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6a11      	ldr	r1, [r2, #32]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002478:	3a01      	subs	r2, #1
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	4311      	orrs	r1, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002482:	0212      	lsls	r2, r2, #8
 8002484:	4311      	orrs	r1, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800248a:	0852      	lsrs	r2, r2, #1
 800248c:	3a01      	subs	r2, #1
 800248e:	0552      	lsls	r2, r2, #21
 8002490:	4311      	orrs	r1, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002496:	0852      	lsrs	r2, r2, #1
 8002498:	3a01      	subs	r2, #1
 800249a:	0652      	lsls	r2, r2, #25
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024a2:	06d2      	lsls	r2, r2, #27
 80024a4:	430a      	orrs	r2, r1
 80024a6:	4947      	ldr	r1, [pc, #284]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fc08 	bl	8000cd8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fc04 	bl	8000cd8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e06e      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x530>
 80024ea:	e066      	b.n	80025ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a34      	ldr	r2, [pc, #208]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002504:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 800250a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fbe0 	bl	8000cd8 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe fbdc 	bl	8000cd8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e046      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x580>
 800253a:	e03e      	b.n	80025ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e039      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_OscConfig+0x628>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	429a      	cmp	r2, r3
 800255a:	d12c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	3b01      	subs	r3, #1
 8002568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d123      	bne.n	80025b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d11b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d113      	bne.n	80025b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	3b01      	subs	r3, #1
 800259c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	3b01      	subs	r3, #1
 80025b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	019f800c 	.word	0x019f800c

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e11e      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b91      	ldr	r3, [pc, #580]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b8e      	ldr	r3, [pc, #568]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 020f 	bic.w	r2, r3, #15
 80025fa:	498c      	ldr	r1, [pc, #560]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b8a      	ldr	r3, [pc, #552]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e106      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d073      	beq.n	8002708 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d129      	bne.n	800267c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002628:	4b81      	ldr	r3, [pc, #516]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0f4      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002638:	f000 f99e 	bl	8002978 <RCC_GetSysClockFreqFromPLLSource>
 800263c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4a7c      	ldr	r2, [pc, #496]	; (8002834 <HAL_RCC_ClockConfig+0x268>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d93f      	bls.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002646:	4b7a      	ldr	r3, [pc, #488]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d033      	beq.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002662:	2b00      	cmp	r3, #0
 8002664:	d12f      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002666:	4b72      	ldr	r3, [pc, #456]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800266e:	4a70      	ldr	r2, [pc, #448]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e024      	b.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d107      	bne.n	8002694 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0c6      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0be      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026a4:	f000 f8ce 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_RCC_ClockConfig+0x268>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d909      	bls.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026b2:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ba:	4a5d      	ldr	r2, [pc, #372]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b5a      	ldr	r3, [pc, #360]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4957      	ldr	r1, [pc, #348]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d8:	f7fe fafe 	bl	8000cd8 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe fafa 	bl	8000cd8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e095      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d023      	beq.n	800275c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b43      	ldr	r3, [pc, #268]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a42      	ldr	r2, [pc, #264]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800272a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002738:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002740:	4a3b      	ldr	r2, [pc, #236]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002746:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b39      	ldr	r3, [pc, #228]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4936      	ldr	r1, [pc, #216]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
 800275a:	e008      	b.n	800276e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b80      	cmp	r3, #128	; 0x80
 8002760:	d105      	bne.n	800276e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4a32      	ldr	r2, [pc, #200]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d21d      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277c:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 020f 	bic.w	r2, r3, #15
 8002784:	4929      	ldr	r1, [pc, #164]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800278c:	f7fe faa4 	bl	8000cd8 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7fe faa0 	bl	8000cd8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e03b      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1ed      	bne.n	8002794 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4917      	ldr	r1, [pc, #92]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490f      	ldr	r1, [pc, #60]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f6:	f000 f825 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490c      	ldr	r1, [pc, #48]	; (8002838 <HAL_RCC_ClockConfig+0x26c>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x270>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fa10 	bl	8000c40 <HAL_InitTick>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	04c4b400 	.word	0x04c4b400
 8002838:	08004298 	.word	0x08004298
 800283c:	20000000 	.word	0x20000000
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d102      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	e047      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d102      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002868:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_RCC_GetSysClockFreq+0xc0>)
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e03e      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d136      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_RCC_GetSysClockFreq+0xc0>)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	4a16      	ldr	r2, [pc, #88]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a2:	68d2      	ldr	r2, [r2, #12]
 80028a4:	0a12      	lsrs	r2, r2, #8
 80028a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
      break;
 80028b0:	e00c      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b2:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	0a12      	lsrs	r2, r2, #8
 80028c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
      break;
 80028ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0e5b      	lsrs	r3, r3, #25
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	3301      	adds	r3, #1
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e001      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028ec:	693b      	ldr	r3, [r7, #16]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	00f42400 	.word	0x00f42400
 8002904:	016e3600 	.word	0x016e3600

08002908 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_RCC_GetHCLKFreq+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002924:	f7ff fff0 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4904      	ldr	r1, [pc, #16]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	080042a8 	.word	0x080042a8

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002950:	f7ff ffda 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0adb      	lsrs	r3, r3, #11
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4904      	ldr	r1, [pc, #16]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	080042a8 	.word	0x080042a8

08002978 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800297e:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d10c      	bne.n	80029b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800299c:	4a17      	ldr	r2, [pc, #92]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029a6:	68d2      	ldr	r2, [r2, #12]
 80029a8:	0a12      	lsrs	r2, r2, #8
 80029aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	617b      	str	r3, [r7, #20]
    break;
 80029b4:	e00c      	b.n	80029d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c0:	68d2      	ldr	r2, [r2, #12]
 80029c2:	0a12      	lsrs	r2, r2, #8
 80029c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
    break;
 80029ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0e5b      	lsrs	r3, r3, #25
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	3301      	adds	r3, #1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029ea:	687b      	ldr	r3, [r7, #4]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40021000 	.word	0x40021000
 80029fc:	016e3600 	.word	0x016e3600
 8002a00:	00f42400 	.word	0x00f42400

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8098 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	4a3f      	ldr	r2, [pc, #252]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a39      	ldr	r2, [pc, #228]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5a:	f7fe f93d 	bl	8000cd8 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a60:	e009      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe f939 	bl	8000cd8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d902      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	74fb      	strb	r3, [r7, #19]
        break;
 8002a74:	e005      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a76:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ef      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d159      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01e      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d019      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe f8f9 	bl	8000cd8 <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe f8f5 	bl	8000cd8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d902      	bls.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	74fb      	strb	r3, [r7, #19]
            break;
 8002b00:	e006      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ec      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b2c:	e008      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	74bb      	strb	r3, [r7, #18]
 8002b32:	e005      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b40:	7c7b      	ldrb	r3, [r7, #17]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4ba7      	ldr	r3, [pc, #668]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	4aa6      	ldr	r2, [pc, #664]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5e:	4ba1      	ldr	r3, [pc, #644]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f023 0203 	bic.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	499d      	ldr	r1, [pc, #628]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b80:	4b98      	ldr	r3, [pc, #608]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 020c 	bic.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4995      	ldr	r1, [pc, #596]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba2:	4b90      	ldr	r3, [pc, #576]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	498c      	ldr	r1, [pc, #560]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc4:	4b87      	ldr	r3, [pc, #540]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	4984      	ldr	r1, [pc, #528]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002be6:	4b7f      	ldr	r3, [pc, #508]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	497b      	ldr	r1, [pc, #492]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c08:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4973      	ldr	r1, [pc, #460]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2a:	4b6e      	ldr	r3, [pc, #440]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	496a      	ldr	r1, [pc, #424]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4c:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4962      	ldr	r1, [pc, #392]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	4959      	ldr	r1, [pc, #356]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c90:	4b54      	ldr	r3, [pc, #336]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	4951      	ldr	r1, [pc, #324]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4948      	ldr	r1, [pc, #288]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4940      	ldr	r1, [pc, #256]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d0c:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	4932      	ldr	r1, [pc, #200]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d36:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	4924      	ldr	r1, [pc, #144]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	4916      	ldr	r1, [pc, #88]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d019      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd2:	d109      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a02      	ldr	r2, [pc, #8]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dde:	60d3      	str	r3, [r2, #12]
 8002de0:	e002      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4926      	ldr	r1, [pc, #152]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d015      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	4918      	ldr	r1, [pc, #96]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	490a      	ldr	r1, [pc, #40]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e82:	d105      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e90:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e049      	b.n	8002f46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fdb6 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f000 f9bc 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d001      	beq.n	8002f68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e04c      	b.n	8003002 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_TIM_Base_Start+0xc0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x70>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d01d      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x70>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a22      	ldr	r2, [pc, #136]	; (8003014 <HAL_TIM_Base_Start+0xc4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x70>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a21      	ldr	r2, [pc, #132]	; (8003018 <HAL_TIM_Base_Start+0xc8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x70>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	; (800301c <HAL_TIM_Base_Start+0xcc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x70>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <HAL_TIM_Base_Start+0xd0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x70>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <HAL_TIM_Base_Start+0xd4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x70>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <HAL_TIM_Base_Start+0xd8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d115      	bne.n	8002fec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_TIM_Base_Start+0xdc>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d015      	beq.n	8002ffe <HAL_TIM_Base_Start+0xae>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d011      	beq.n	8002ffe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	e008      	b.n	8002ffe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e000      	b.n	8003000 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40013400 	.word	0x40013400
 8003024:	40014000 	.word	0x40014000
 8003028:	40015000 	.word	0x40015000
 800302c:	00010007 	.word	0x00010007

08003030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e0f6      	b.n	800323a <HAL_TIM_ConfigClockSource+0x20a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800306a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6f      	ldr	r2, [pc, #444]	; (8003244 <HAL_TIM_ConfigClockSource+0x214>)
 8003086:	4293      	cmp	r3, r2
 8003088:	f000 80c1 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 800308c:	4a6d      	ldr	r2, [pc, #436]	; (8003244 <HAL_TIM_ConfigClockSource+0x214>)
 800308e:	4293      	cmp	r3, r2
 8003090:	f200 80c6 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003094:	4a6c      	ldr	r2, [pc, #432]	; (8003248 <HAL_TIM_ConfigClockSource+0x218>)
 8003096:	4293      	cmp	r3, r2
 8003098:	f000 80b9 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 800309c:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <HAL_TIM_ConfigClockSource+0x218>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	f200 80be 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 80030a4:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_TIM_ConfigClockSource+0x21c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	f000 80b1 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 80030ac:	4a67      	ldr	r2, [pc, #412]	; (800324c <HAL_TIM_ConfigClockSource+0x21c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f200 80b6 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 80030b4:	4a66      	ldr	r2, [pc, #408]	; (8003250 <HAL_TIM_ConfigClockSource+0x220>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	f000 80a9 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 80030bc:	4a64      	ldr	r2, [pc, #400]	; (8003250 <HAL_TIM_ConfigClockSource+0x220>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	f200 80ae 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 80030c4:	4a63      	ldr	r2, [pc, #396]	; (8003254 <HAL_TIM_ConfigClockSource+0x224>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	f000 80a1 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 80030cc:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_TIM_ConfigClockSource+0x224>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f200 80a6 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 80030d4:	4a60      	ldr	r2, [pc, #384]	; (8003258 <HAL_TIM_ConfigClockSource+0x228>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	f000 8099 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 80030dc:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <HAL_TIM_ConfigClockSource+0x228>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	f200 809e 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 80030e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80030e8:	f000 8091 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 80030ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80030f0:	f200 8096 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 80030f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f8:	f000 8089 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x1de>
 80030fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003100:	f200 808e 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d03e      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0x158>
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310e:	f200 8087 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	f000 8086 	beq.w	8003226 <HAL_TIM_ConfigClockSource+0x1f6>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	d87f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d01a      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x12a>
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d87b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d050      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x19e>
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d877      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d03c      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0x17e>
 8003134:	2b50      	cmp	r3, #80	; 0x50
 8003136:	d873      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d058      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x1be>
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d86f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003140:	2b30      	cmp	r3, #48	; 0x30
 8003142:	d064      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x1de>
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d86b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d060      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x1de>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d867      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05c      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x1de>
 8003154:	2b10      	cmp	r3, #16
 8003156:	d05a      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x1de>
 8003158:	e062      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f000 f99b 	bl	80034a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800317c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
      break;
 8003186:	e04f      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f000 f984 	bl	80034a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031aa:	609a      	str	r2, [r3, #8]
      break;
 80031ac:	e03c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 f8f6 	bl	80033ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2150      	movs	r1, #80	; 0x50
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f94f 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 80031cc:	e02c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 f915 	bl	800340a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2160      	movs	r1, #96	; 0x60
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f93f 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 80031ec:	e01c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f000 f8d6 	bl	80033ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f92f 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 800320c:	e00c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 f926 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 800321e:	e003      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e000      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	00100070 	.word	0x00100070
 8003248:	00100060 	.word	0x00100060
 800324c:	00100050 	.word	0x00100050
 8003250:	00100040 	.word	0x00100040
 8003254:	00100030 	.word	0x00100030
 8003258:	00100020 	.word	0x00100020

0800325c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a46      	ldr	r2, [pc, #280]	; (8003388 <TIM_Base_SetConfig+0x12c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d017      	beq.n	80032a4 <TIM_Base_SetConfig+0x48>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d013      	beq.n	80032a4 <TIM_Base_SetConfig+0x48>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a43      	ldr	r2, [pc, #268]	; (800338c <TIM_Base_SetConfig+0x130>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00f      	beq.n	80032a4 <TIM_Base_SetConfig+0x48>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a42      	ldr	r2, [pc, #264]	; (8003390 <TIM_Base_SetConfig+0x134>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00b      	beq.n	80032a4 <TIM_Base_SetConfig+0x48>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a41      	ldr	r2, [pc, #260]	; (8003394 <TIM_Base_SetConfig+0x138>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <TIM_Base_SetConfig+0x48>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a40      	ldr	r2, [pc, #256]	; (8003398 <TIM_Base_SetConfig+0x13c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_Base_SetConfig+0x48>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3f      	ldr	r2, [pc, #252]	; (800339c <TIM_Base_SetConfig+0x140>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d108      	bne.n	80032b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a33      	ldr	r2, [pc, #204]	; (8003388 <TIM_Base_SetConfig+0x12c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d023      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d01f      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a30      	ldr	r2, [pc, #192]	; (800338c <TIM_Base_SetConfig+0x130>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01b      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <TIM_Base_SetConfig+0x134>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d017      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <TIM_Base_SetConfig+0x138>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2d      	ldr	r2, [pc, #180]	; (8003398 <TIM_Base_SetConfig+0x13c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00f      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <TIM_Base_SetConfig+0x144>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2c      	ldr	r2, [pc, #176]	; (80033a4 <TIM_Base_SetConfig+0x148>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <TIM_Base_SetConfig+0x14c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_Base_SetConfig+0xaa>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <TIM_Base_SetConfig+0x140>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d108      	bne.n	8003318 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <TIM_Base_SetConfig+0x12c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <TIM_Base_SetConfig+0x110>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a14      	ldr	r2, [pc, #80]	; (8003398 <TIM_Base_SetConfig+0x13c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00f      	beq.n	800336c <TIM_Base_SetConfig+0x110>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <TIM_Base_SetConfig+0x144>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_Base_SetConfig+0x110>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <TIM_Base_SetConfig+0x148>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_Base_SetConfig+0x110>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <TIM_Base_SetConfig+0x14c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0x110>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0d      	ldr	r2, [pc, #52]	; (800339c <TIM_Base_SetConfig+0x140>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	615a      	str	r2, [r3, #20]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40015000 	.word	0x40015000
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800

080033ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0201 	bic.w	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 030a 	bic.w	r3, r3, #10
 80033e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800340a:	b480      	push	{r7}
 800340c:	b087      	sub	sp, #28
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0210 	bic.w	r2, r3, #16
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	031b      	lsls	r3, r3, #12
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003446:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	f043 0307 	orr.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	021a      	lsls	r2, r3, #8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e074      	b.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a33      	ldr	r2, [pc, #204]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a31      	ldr	r2, [pc, #196]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003540:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d01d      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a11      	ldr	r2, [pc, #68]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10c      	bne.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40013400 	.word	0x40013400
 80035fc:	40015000 	.word	0x40015000
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40014000 	.word	0x40014000

08003610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e042      	b.n	80036a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003628:	2b00      	cmp	r3, #0
 800362a:	d106      	bne.n	800363a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fd fa69 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2224      	movs	r2, #36	; 0x24
 800363e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f82c 	bl	80036b0 <UART_SetConfig>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e022      	b.n	80036a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fb1c 	bl	8003ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800367e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800368e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fba3 	bl	8003dec <UART_CheckIdleState>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b08c      	sub	sp, #48	; 0x30
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4baa      	ldr	r3, [pc, #680]	; (8003988 <UART_SetConfig+0x2d8>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a9f      	ldr	r2, [pc, #636]	; (800398c <UART_SetConfig+0x2dc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003718:	4313      	orrs	r3, r2
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003726:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003730:	430b      	orrs	r3, r1
 8003732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f023 010f 	bic.w	r1, r3, #15
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a90      	ldr	r2, [pc, #576]	; (8003990 <UART_SetConfig+0x2e0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d125      	bne.n	80037a0 <UART_SetConfig+0xf0>
 8003754:	4b8f      	ldr	r3, [pc, #572]	; (8003994 <UART_SetConfig+0x2e4>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b03      	cmp	r3, #3
 8003760:	d81a      	bhi.n	8003798 <UART_SetConfig+0xe8>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <UART_SetConfig+0xb8>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	08003789 	.word	0x08003789
 8003770:	08003781 	.word	0x08003781
 8003774:	08003791 	.word	0x08003791
 8003778:	2301      	movs	r3, #1
 800377a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377e:	e116      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003780:	2302      	movs	r3, #2
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003786:	e112      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003788:	2304      	movs	r3, #4
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800378e:	e10e      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003790:	2308      	movs	r3, #8
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003796:	e10a      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003798:	2310      	movs	r3, #16
 800379a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800379e:	e106      	b.n	80039ae <UART_SetConfig+0x2fe>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a7c      	ldr	r2, [pc, #496]	; (8003998 <UART_SetConfig+0x2e8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d138      	bne.n	800381c <UART_SetConfig+0x16c>
 80037aa:	4b7a      	ldr	r3, [pc, #488]	; (8003994 <UART_SetConfig+0x2e4>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d82d      	bhi.n	8003814 <UART_SetConfig+0x164>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <UART_SetConfig+0x110>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	08003815 	.word	0x08003815
 80037c8:	08003815 	.word	0x08003815
 80037cc:	08003815 	.word	0x08003815
 80037d0:	08003805 	.word	0x08003805
 80037d4:	08003815 	.word	0x08003815
 80037d8:	08003815 	.word	0x08003815
 80037dc:	08003815 	.word	0x08003815
 80037e0:	080037fd 	.word	0x080037fd
 80037e4:	08003815 	.word	0x08003815
 80037e8:	08003815 	.word	0x08003815
 80037ec:	08003815 	.word	0x08003815
 80037f0:	0800380d 	.word	0x0800380d
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037fa:	e0d8      	b.n	80039ae <UART_SetConfig+0x2fe>
 80037fc:	2302      	movs	r3, #2
 80037fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003802:	e0d4      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003804:	2304      	movs	r3, #4
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800380a:	e0d0      	b.n	80039ae <UART_SetConfig+0x2fe>
 800380c:	2308      	movs	r3, #8
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003812:	e0cc      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003814:	2310      	movs	r3, #16
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800381a:	e0c8      	b.n	80039ae <UART_SetConfig+0x2fe>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a5e      	ldr	r2, [pc, #376]	; (800399c <UART_SetConfig+0x2ec>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d125      	bne.n	8003872 <UART_SetConfig+0x1c2>
 8003826:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <UART_SetConfig+0x2e4>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d016      	beq.n	8003862 <UART_SetConfig+0x1b2>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d818      	bhi.n	800386a <UART_SetConfig+0x1ba>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d00a      	beq.n	8003852 <UART_SetConfig+0x1a2>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d814      	bhi.n	800386a <UART_SetConfig+0x1ba>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <UART_SetConfig+0x19a>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d008      	beq.n	800385a <UART_SetConfig+0x1aa>
 8003848:	e00f      	b.n	800386a <UART_SetConfig+0x1ba>
 800384a:	2300      	movs	r3, #0
 800384c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003850:	e0ad      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003852:	2302      	movs	r3, #2
 8003854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003858:	e0a9      	b.n	80039ae <UART_SetConfig+0x2fe>
 800385a:	2304      	movs	r3, #4
 800385c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003860:	e0a5      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003862:	2308      	movs	r3, #8
 8003864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003868:	e0a1      	b.n	80039ae <UART_SetConfig+0x2fe>
 800386a:	2310      	movs	r3, #16
 800386c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003870:	e09d      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a4a      	ldr	r2, [pc, #296]	; (80039a0 <UART_SetConfig+0x2f0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d125      	bne.n	80038c8 <UART_SetConfig+0x218>
 800387c:	4b45      	ldr	r3, [pc, #276]	; (8003994 <UART_SetConfig+0x2e4>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003886:	2bc0      	cmp	r3, #192	; 0xc0
 8003888:	d016      	beq.n	80038b8 <UART_SetConfig+0x208>
 800388a:	2bc0      	cmp	r3, #192	; 0xc0
 800388c:	d818      	bhi.n	80038c0 <UART_SetConfig+0x210>
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d00a      	beq.n	80038a8 <UART_SetConfig+0x1f8>
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d814      	bhi.n	80038c0 <UART_SetConfig+0x210>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <UART_SetConfig+0x1f0>
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d008      	beq.n	80038b0 <UART_SetConfig+0x200>
 800389e:	e00f      	b.n	80038c0 <UART_SetConfig+0x210>
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a6:	e082      	b.n	80039ae <UART_SetConfig+0x2fe>
 80038a8:	2302      	movs	r3, #2
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ae:	e07e      	b.n	80039ae <UART_SetConfig+0x2fe>
 80038b0:	2304      	movs	r3, #4
 80038b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b6:	e07a      	b.n	80039ae <UART_SetConfig+0x2fe>
 80038b8:	2308      	movs	r3, #8
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038be:	e076      	b.n	80039ae <UART_SetConfig+0x2fe>
 80038c0:	2310      	movs	r3, #16
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c6:	e072      	b.n	80039ae <UART_SetConfig+0x2fe>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a35      	ldr	r2, [pc, #212]	; (80039a4 <UART_SetConfig+0x2f4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d12a      	bne.n	8003928 <UART_SetConfig+0x278>
 80038d2:	4b30      	ldr	r3, [pc, #192]	; (8003994 <UART_SetConfig+0x2e4>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e0:	d01a      	beq.n	8003918 <UART_SetConfig+0x268>
 80038e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e6:	d81b      	bhi.n	8003920 <UART_SetConfig+0x270>
 80038e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ec:	d00c      	beq.n	8003908 <UART_SetConfig+0x258>
 80038ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f2:	d815      	bhi.n	8003920 <UART_SetConfig+0x270>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <UART_SetConfig+0x250>
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d008      	beq.n	8003910 <UART_SetConfig+0x260>
 80038fe:	e00f      	b.n	8003920 <UART_SetConfig+0x270>
 8003900:	2300      	movs	r3, #0
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003906:	e052      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003908:	2302      	movs	r3, #2
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390e:	e04e      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003910:	2304      	movs	r3, #4
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003916:	e04a      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003918:	2308      	movs	r3, #8
 800391a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391e:	e046      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003920:	2310      	movs	r3, #16
 8003922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003926:	e042      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a17      	ldr	r2, [pc, #92]	; (800398c <UART_SetConfig+0x2dc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d13a      	bne.n	80039a8 <UART_SetConfig+0x2f8>
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <UART_SetConfig+0x2e4>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800393c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003940:	d01a      	beq.n	8003978 <UART_SetConfig+0x2c8>
 8003942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003946:	d81b      	bhi.n	8003980 <UART_SetConfig+0x2d0>
 8003948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394c:	d00c      	beq.n	8003968 <UART_SetConfig+0x2b8>
 800394e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003952:	d815      	bhi.n	8003980 <UART_SetConfig+0x2d0>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <UART_SetConfig+0x2b0>
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d008      	beq.n	8003970 <UART_SetConfig+0x2c0>
 800395e:	e00f      	b.n	8003980 <UART_SetConfig+0x2d0>
 8003960:	2300      	movs	r3, #0
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003966:	e022      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003968:	2302      	movs	r3, #2
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396e:	e01e      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003970:	2304      	movs	r3, #4
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003976:	e01a      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003978:	2308      	movs	r3, #8
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397e:	e016      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003980:	2310      	movs	r3, #16
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e012      	b.n	80039ae <UART_SetConfig+0x2fe>
 8003988:	cfff69f3 	.word	0xcfff69f3
 800398c:	40008000 	.word	0x40008000
 8003990:	40013800 	.word	0x40013800
 8003994:	40021000 	.word	0x40021000
 8003998:	40004400 	.word	0x40004400
 800399c:	40004800 	.word	0x40004800
 80039a0:	40004c00 	.word	0x40004c00
 80039a4:	40005000 	.word	0x40005000
 80039a8:	2310      	movs	r3, #16
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4aae      	ldr	r2, [pc, #696]	; (8003c6c <UART_SetConfig+0x5bc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	f040 8097 	bne.w	8003ae8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d823      	bhi.n	8003a0a <UART_SetConfig+0x35a>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x318>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	08003a0b 	.word	0x08003a0b
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	08003a0b 	.word	0x08003a0b
 80039d8:	080039fb 	.word	0x080039fb
 80039dc:	08003a0b 	.word	0x08003a0b
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a0b 	.word	0x08003a0b
 80039e8:	08003a03 	.word	0x08003a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe ff98 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 80039f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039f2:	e010      	b.n	8003a16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f4:	4b9e      	ldr	r3, [pc, #632]	; (8003c70 <UART_SetConfig+0x5c0>)
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039f8:	e00d      	b.n	8003a16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fa:	f7fe ff23 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a00:	e009      	b.n	8003a16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a08:	e005      	b.n	8003a16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8130 	beq.w	8003c7e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	4a94      	ldr	r2, [pc, #592]	; (8003c74 <UART_SetConfig+0x5c4>)
 8003a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d305      	bcc.n	8003a4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d903      	bls.n	8003a56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a54:	e113      	b.n	8003c7e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2200      	movs	r2, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	60fa      	str	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4a84      	ldr	r2, [pc, #528]	; (8003c74 <UART_SetConfig+0x5c4>)
 8003a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a78:	f7fc fbce 	bl	8000218 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	020b      	lsls	r3, r1, #8
 8003a8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a92:	0202      	lsls	r2, r0, #8
 8003a94:	6979      	ldr	r1, [r7, #20]
 8003a96:	6849      	ldr	r1, [r1, #4]
 8003a98:	0849      	lsrs	r1, r1, #1
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	eb12 0804 	adds.w	r8, r2, r4
 8003aa4:	eb43 0905 	adc.w	r9, r3, r5
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	469a      	mov	sl, r3
 8003ab0:	4693      	mov	fp, r2
 8003ab2:	4652      	mov	r2, sl
 8003ab4:	465b      	mov	r3, fp
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	4649      	mov	r1, r9
 8003aba:	f7fc fbad 	bl	8000218 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003acc:	d308      	bcc.n	8003ae0 <UART_SetConfig+0x430>
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad4:	d204      	bcs.n	8003ae0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a3a      	ldr	r2, [r7, #32]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	e0ce      	b.n	8003c7e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ae6:	e0ca      	b.n	8003c7e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af0:	d166      	bne.n	8003bc0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d827      	bhi.n	8003b4a <UART_SetConfig+0x49a>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0x450>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b35 	.word	0x08003b35
 8003b0c:	08003b4b 	.word	0x08003b4b
 8003b10:	08003b3b 	.word	0x08003b3b
 8003b14:	08003b4b 	.word	0x08003b4b
 8003b18:	08003b4b 	.word	0x08003b4b
 8003b1c:	08003b4b 	.word	0x08003b4b
 8003b20:	08003b43 	.word	0x08003b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b24:	f7fe fefc 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b2a:	e014      	b.n	8003b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b2c:	f7fe ff0e 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8003b30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b32:	e010      	b.n	8003b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b34:	4b4e      	ldr	r3, [pc, #312]	; (8003c70 <UART_SetConfig+0x5c0>)
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b38:	e00d      	b.n	8003b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3a:	f7fe fe83 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8003b3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b40:	e009      	b.n	8003b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b48:	e005      	b.n	8003b56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8090 	beq.w	8003c7e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	4a44      	ldr	r2, [pc, #272]	; (8003c74 <UART_SetConfig+0x5c4>)
 8003b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b70:	005a      	lsls	r2, r3, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	441a      	add	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	2b0f      	cmp	r3, #15
 8003b88:	d916      	bls.n	8003bb8 <UART_SetConfig+0x508>
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b90:	d212      	bcs.n	8003bb8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f023 030f 	bic.w	r3, r3, #15
 8003b9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	8bfb      	ldrh	r3, [r7, #30]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	8bfa      	ldrh	r2, [r7, #30]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e062      	b.n	8003c7e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bbe:	e05e      	b.n	8003c7e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d828      	bhi.n	8003c1a <UART_SetConfig+0x56a>
 8003bc8:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x520>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003c05 	.word	0x08003c05
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c1b 	.word	0x08003c1b
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c13 	.word	0x08003c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe fe94 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bfa:	e014      	b.n	8003c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe fea6 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8003c00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c02:	e010      	b.n	8003c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <UART_SetConfig+0x5c0>)
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c08:	e00d      	b.n	8003c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0a:	f7fe fe1b 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8003c0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c10:	e009      	b.n	8003c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c18:	e005      	b.n	8003c26 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c24:	bf00      	nop
    }

    if (pclk != 0U)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d028      	beq.n	8003c7e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <UART_SetConfig+0x5c4>)
 8003c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	441a      	add	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d910      	bls.n	8003c78 <UART_SetConfig+0x5c8>
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d20c      	bcs.n	8003c78 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e009      	b.n	8003c7e <UART_SetConfig+0x5ce>
 8003c6a:	bf00      	nop
 8003c6c:	40008000 	.word	0x40008000
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	080042b0 	.word	0x080042b0
      }
      else
      {
        ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2200      	movs	r2, #0
 8003c92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2200      	movs	r2, #0
 8003c98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3730      	adds	r7, #48	; 0x30
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da6:	d10a      	bne.n	8003dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dfc:	f7fc ff6c 	bl	8000cd8 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d10e      	bne.n	8003e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f82f 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e025      	b.n	8003e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d10e      	bne.n	8003e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f819 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e00f      	b.n	8003e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b09c      	sub	sp, #112	; 0x70
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e92:	e0a9      	b.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	f000 80a5 	beq.w	8003fe8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9e:	f7fc ff1b 	bl	8000cd8 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d140      	bne.n	8003f36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ed8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e6      	bne.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3308      	adds	r3, #8
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f06:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e069      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d051      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d149      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e6      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fb0:	623a      	str	r2, [r7, #32]
 8003fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e010      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	429a      	cmp	r2, r3
 8004004:	f43f af46 	beq.w	8003e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3770      	adds	r7, #112	; 0x70
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_UARTEx_DisableFifoMode+0x16>
 8004024:	2302      	movs	r3, #2
 8004026:	e027      	b.n	8004078 <HAL_UARTEx_DisableFifoMode+0x66>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e02d      	b.n	80040f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f84f 	bl	800417c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e02d      	b.n	8004174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	; 0x24
 8004124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f811 	bl	800417c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004188:	2b00      	cmp	r3, #0
 800418a:	d108      	bne.n	800419e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800419c:	e031      	b.n	8004202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800419e:	2308      	movs	r3, #8
 80041a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041a2:	2308      	movs	r3, #8
 80041a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	0e5b      	lsrs	r3, r3, #25
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	0f5b      	lsrs	r3, r3, #29
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041c6:	7bbb      	ldrb	r3, [r7, #14]
 80041c8:	7b3a      	ldrb	r2, [r7, #12]
 80041ca:	4911      	ldr	r1, [pc, #68]	; (8004210 <UARTEx_SetNbDataToProcess+0x94>)
 80041cc:	5c8a      	ldrb	r2, [r1, r2]
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041d2:	7b3a      	ldrb	r2, [r7, #12]
 80041d4:	490f      	ldr	r1, [pc, #60]	; (8004214 <UARTEx_SetNbDataToProcess+0x98>)
 80041d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	7b7a      	ldrb	r2, [r7, #13]
 80041e8:	4909      	ldr	r1, [pc, #36]	; (8004210 <UARTEx_SetNbDataToProcess+0x94>)
 80041ea:	5c8a      	ldrb	r2, [r1, r2]
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041f0:	7b7a      	ldrb	r2, [r7, #13]
 80041f2:	4908      	ldr	r1, [pc, #32]	; (8004214 <UARTEx_SetNbDataToProcess+0x98>)
 80041f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004202:	bf00      	nop
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	080042c8 	.word	0x080042c8
 8004214:	080042d0 	.word	0x080042d0

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4d0d      	ldr	r5, [pc, #52]	; (8004250 <__libc_init_array+0x38>)
 800421c:	4c0d      	ldr	r4, [pc, #52]	; (8004254 <__libc_init_array+0x3c>)
 800421e:	1b64      	subs	r4, r4, r5
 8004220:	10a4      	asrs	r4, r4, #2
 8004222:	2600      	movs	r6, #0
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	4d0b      	ldr	r5, [pc, #44]	; (8004258 <__libc_init_array+0x40>)
 800422a:	4c0c      	ldr	r4, [pc, #48]	; (800425c <__libc_init_array+0x44>)
 800422c:	f000 f820 	bl	8004270 <_init>
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	2600      	movs	r6, #0
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	f855 3b04 	ldr.w	r3, [r5], #4
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	080042e0 	.word	0x080042e0
 8004254:	080042e0 	.word	0x080042e0
 8004258:	080042e0 	.word	0x080042e0
 800425c:	080042e4 	.word	0x080042e4

08004260 <memset>:
 8004260:	4402      	add	r2, r0
 8004262:	4603      	mov	r3, r0
 8004264:	4293      	cmp	r3, r2
 8004266:	d100      	bne.n	800426a <memset+0xa>
 8004268:	4770      	bx	lr
 800426a:	f803 1b01 	strb.w	r1, [r3], #1
 800426e:	e7f9      	b.n	8004264 <memset+0x4>

08004270 <_init>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr

0800427c <_fini>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr
